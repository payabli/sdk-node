/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { PayabliClient } from "../../src/Client";
import * as Payabli from "../../src/api/index";

describe("Notificationlogs", () => {
    test("searchNotificationLogs (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            startDate: "2024-01-01T00:00:00Z",
            endDate: "2024-01-31T23:59:59Z",
            orgId: 12345,
            notificationEvent: "ActivatedMerchant",
            succeeded: true,
        };
        const rawResponseBody = [
            {
                id: "550e8400-e29b-41d4-a716-446655440000",
                orgId: 12345,
                paypointId: 67890,
                notificationEvent: "ActivatedMerchant",
                target: "https://webhook.example.com/payments",
                responseStatus: "200",
                success: true,
                jobData: '{"transactionId":"txn_123"}',
                createdDate: "2024-01-15T10:30:00Z",
                successDate: "2024-01-15T10:30:05Z",
                lastFailedDate: null,
                isInProgress: false,
            },
        ];
        server
            .mockEndpoint()
            .post("/v2/notificationlogs")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.notificationlogs.searchNotificationLogs({
            PageSize: 20,
            body: {
                startDate: "2024-01-01T00:00:00Z",
                endDate: "2024-01-31T23:59:59Z",
                orgId: 12345,
                notificationEvent: "ActivatedMerchant",
                succeeded: true,
            },
        });
        expect(response).toEqual([
            {
                id: "550e8400-e29b-41d4-a716-446655440000",
                orgId: 12345,
                paypointId: 67890,
                notificationEvent: "ActivatedMerchant",
                target: "https://webhook.example.com/payments",
                responseStatus: "200",
                success: true,
                jobData: '{"transactionId":"txn_123"}',
                createdDate: "2024-01-15T10:30:00Z",
                successDate: "2024-01-15T10:30:05Z",
                lastFailedDate: null,
                isInProgress: false,
            },
        ]);
    });

    test("searchNotificationLogs (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            startDate: "2024-01-15T09:30:00Z",
            endDate: "2024-01-15T09:30:00Z",
            notificationEvent: undefined,
            succeeded: undefined,
            orgId: undefined,
            paypointId: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/v2/notificationlogs")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.notificationlogs.searchNotificationLogs({
                body: {
                    startDate: "2024-01-15T09:30:00Z",
                    endDate: "2024-01-15T09:30:00Z",
                    notificationEvent: undefined,
                    succeeded: undefined,
                    orgId: undefined,
                    paypointId: undefined,
                },
            });
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("searchNotificationLogs (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            startDate: "2024-01-15T09:30:00Z",
            endDate: "2024-01-15T09:30:00Z",
            notificationEvent: undefined,
            succeeded: undefined,
            orgId: undefined,
            paypointId: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/v2/notificationlogs")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.notificationlogs.searchNotificationLogs({
                body: {
                    startDate: "2024-01-15T09:30:00Z",
                    endDate: "2024-01-15T09:30:00Z",
                    notificationEvent: undefined,
                    succeeded: undefined,
                    orgId: undefined,
                    paypointId: undefined,
                },
            });
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("searchNotificationLogs (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            startDate: "2024-01-15T09:30:00Z",
            endDate: "2024-01-15T09:30:00Z",
            notificationEvent: undefined,
            succeeded: undefined,
            orgId: undefined,
            paypointId: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/v2/notificationlogs")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.notificationlogs.searchNotificationLogs({
                body: {
                    startDate: "2024-01-15T09:30:00Z",
                    endDate: "2024-01-15T09:30:00Z",
                    notificationEvent: undefined,
                    succeeded: undefined,
                    orgId: undefined,
                    paypointId: undefined,
                },
            });
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("searchNotificationLogs (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            startDate: "2024-01-15T09:30:00Z",
            endDate: "2024-01-15T09:30:00Z",
            notificationEvent: undefined,
            succeeded: undefined,
            orgId: undefined,
            paypointId: undefined,
        };
        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: "responseText" };
        server
            .mockEndpoint()
            .post("/v2/notificationlogs")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.notificationlogs.searchNotificationLogs({
                body: {
                    startDate: "2024-01-15T09:30:00Z",
                    endDate: "2024-01-15T09:30:00Z",
                    notificationEvent: undefined,
                    succeeded: undefined,
                    orgId: undefined,
                    paypointId: undefined,
                },
            });
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: "responseText",
            }),
        );
    });

    test("getNotificationLog (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "550e8400-e29b-41d4-a716-446655440000",
            orgId: 12345,
            paypointId: 67890,
            notificationEvent: "ActivatedMerchant",
            target: "https://webhook.example.com/payments",
            responseStatus: "200",
            success: true,
            jobData: '{"transactionId":"txn_123"}',
            createdDate: "2024-01-15T10:30:00Z",
            successDate: "2024-01-15T10:30:05Z",
            lastFailedDate: null,
            isInProgress: false,
            webHeaders: [
                { key: "Content-Type", value: "application/json" },
                { key: "User-Agent", value: "PaymentSystem/1.0" },
            ],
            responseHeaders: [
                { key: "Content-Type", value: ["application/json"] },
                { key: "X-Request-ID", value: ["req_abc123"] },
            ],
            responseContent: '{"status":"received","id":"wh_123"}',
        };
        server
            .mockEndpoint()
            .get("/v2/notificationlogs/550e8400-e29b-41d4-a716-446655440000")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.notificationlogs.getNotificationLog("550e8400-e29b-41d4-a716-446655440000");
        expect(response).toEqual({
            id: "550e8400-e29b-41d4-a716-446655440000",
            orgId: 12345,
            paypointId: 67890,
            notificationEvent: "ActivatedMerchant",
            target: "https://webhook.example.com/payments",
            responseStatus: "200",
            success: true,
            jobData: '{"transactionId":"txn_123"}',
            createdDate: "2024-01-15T10:30:00Z",
            successDate: "2024-01-15T10:30:05Z",
            lastFailedDate: null,
            isInProgress: false,
            webHeaders: [
                {
                    key: "Content-Type",
                    value: "application/json",
                },
                {
                    key: "User-Agent",
                    value: "PaymentSystem/1.0",
                },
            ],
            responseHeaders: [
                {
                    key: "Content-Type",
                    value: ["application/json"],
                },
                {
                    key: "X-Request-ID",
                    value: ["req_abc123"],
                },
            ],
            responseContent: '{"status":"received","id":"wh_123"}',
        });
    });

    test("getNotificationLog (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/v2/notificationlogs/d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.notificationlogs.getNotificationLog("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32");
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("getNotificationLog (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/v2/notificationlogs/d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.notificationlogs.getNotificationLog("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32");
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("getNotificationLog (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/v2/notificationlogs/d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.notificationlogs.getNotificationLog("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32");
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("getNotificationLog (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: "responseText" };
        server
            .mockEndpoint()
            .get("/v2/notificationlogs/d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.notificationlogs.getNotificationLog("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32");
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: "responseText",
            }),
        );
    });

    test("retryNotificationLog (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "550e8400-e29b-41d4-a716-446655440000",
            orgId: 12345,
            paypointId: 67890,
            notificationEvent: "ActivatedMerchant",
            target: "https://webhook.example.com/payments",
            responseStatus: "200",
            success: true,
            jobData: '{"transactionId":"txn_123"}',
            createdDate: "2024-01-15T10:30:00Z",
            successDate: "2024-01-15T10:30:05Z",
            lastFailedDate: null,
            isInProgress: false,
            webHeaders: [{ key: "Content-Type", value: "application/json" }],
            responseHeaders: [{ key: "Content-Type", value: ["application/json"] }],
            responseContent: '{"status":"received","id":"wh_123"}',
        };
        server
            .mockEndpoint()
            .get("/v2/notificationlogs/550e8400-e29b-41d4-a716-446655440000/retry")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.notificationlogs.retryNotificationLog("550e8400-e29b-41d4-a716-446655440000");
        expect(response).toEqual({
            id: "550e8400-e29b-41d4-a716-446655440000",
            orgId: 12345,
            paypointId: 67890,
            notificationEvent: "ActivatedMerchant",
            target: "https://webhook.example.com/payments",
            responseStatus: "200",
            success: true,
            jobData: '{"transactionId":"txn_123"}',
            createdDate: "2024-01-15T10:30:00Z",
            successDate: "2024-01-15T10:30:05Z",
            lastFailedDate: null,
            isInProgress: false,
            webHeaders: [
                {
                    key: "Content-Type",
                    value: "application/json",
                },
            ],
            responseHeaders: [
                {
                    key: "Content-Type",
                    value: ["application/json"],
                },
            ],
            responseContent: '{"status":"received","id":"wh_123"}',
        });
    });

    test("retryNotificationLog (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/v2/notificationlogs/d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32/retry")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.notificationlogs.retryNotificationLog("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32");
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("retryNotificationLog (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/v2/notificationlogs/d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32/retry")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.notificationlogs.retryNotificationLog("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32");
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("retryNotificationLog (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/v2/notificationlogs/d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32/retry")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.notificationlogs.retryNotificationLog("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32");
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("retryNotificationLog (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: "responseText" };
        server
            .mockEndpoint()
            .get("/v2/notificationlogs/d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32/retry")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.notificationlogs.retryNotificationLog("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32");
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: "responseText",
            }),
        );
    });

    test("bulkRetryNotificationLogs (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = [
            "550e8400-e29b-41d4-a716-446655440000",
            "550e8400-e29b-41d4-a716-446655440001",
            "550e8400-e29b-41d4-a716-446655440002",
        ];

        server
            .mockEndpoint()
            .post("/v2/notificationlogs/retry")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.notificationlogs.bulkRetryNotificationLogs([
            "550e8400-e29b-41d4-a716-446655440000",
            "550e8400-e29b-41d4-a716-446655440001",
            "550e8400-e29b-41d4-a716-446655440002",
        ]);
        expect(response).toEqual(undefined);
    });

    test("bulkRetryNotificationLogs (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = ["d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32", "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"];
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/v2/notificationlogs/retry")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.notificationlogs.bulkRetryNotificationLogs([
                "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
                "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
            ]);
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("bulkRetryNotificationLogs (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = ["d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32", "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"];
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/v2/notificationlogs/retry")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.notificationlogs.bulkRetryNotificationLogs([
                "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
                "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
            ]);
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("bulkRetryNotificationLogs (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = ["d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32", "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"];
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/v2/notificationlogs/retry")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.notificationlogs.bulkRetryNotificationLogs([
                "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
                "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
            ]);
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("bulkRetryNotificationLogs (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = ["d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32", "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"];
        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: "responseText" };
        server
            .mockEndpoint()
            .post("/v2/notificationlogs/retry")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.notificationlogs.bulkRetryNotificationLogs([
                "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
                "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
            ]);
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: "responseText",
            }),
        );
    });
});
