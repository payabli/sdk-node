/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { PayabliClient } from "../../src/Client";
import * as Payabli from "../../src/api/index";

describe("PaymentMethodDomain", () => {
    test("AddPaymentMethodDomain (Paypoint)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            domainName: "checkout.example.com",
            entityId: 109,
            entityType: "paypoint",
            applePay: { isEnabled: true },
            googlePay: { isEnabled: true },
        };
        const rawResponseBody = {
            isSuccess: true,
            pageidentifier: "pageidentifier",
            responseData: {
                id: "pmd_a4c7e39d15f24b8c8d6259f174e3d081",
                type: "PaymentMethodDomains",
                entityId: 109,
                entityType: "paypoint",
                domainName: "checkout.example.com",
                applePay: { isEnabled: true, data: undefined },
                googlePay: { isEnabled: true, data: undefined },
                ownerEntityId: 109,
                ownerEntityType: "paypoint",
                cascades: [
                    {
                        jobId: "1030398",
                        jobStatus: "completed",
                        jobErrorMessage: undefined,
                        createdAt: "2025-04-25T15:37:28.685Z",
                        updatedAt: "2025-04-25T15:37:33.228Z",
                    },
                    {
                        jobId: "611502",
                        jobStatus: "completed",
                        jobErrorMessage: undefined,
                        createdAt: "2026-09-26T22:25:45.095Z",
                        updatedAt: "2026-09-26T22:25:46.187Z",
                    },
                    {
                        jobId: "611172",
                        jobStatus: "completed",
                        jobErrorMessage: undefined,
                        createdAt: "2026-09-26T19:46:40.075Z",
                        updatedAt: "2026-09-26T19:47:13.548Z",
                    },
                ],
                createdAt: "2025-04-25T15:44:17.016Z",
                updatedAt: "2025-04-25T15:44:17.016Z",
            },
            responseText: "Success",
        };
        server
            .mockEndpoint()
            .post("/PaymentMethodDomain")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.paymentMethodDomain.addPaymentMethodDomain({
            domainName: "checkout.example.com",
            entityId: 109,
            entityType: "paypoint",
            applePay: {
                isEnabled: true,
            },
            googlePay: {
                isEnabled: true,
            },
        });
        expect(response).toEqual({
            isSuccess: true,
            pageidentifier: "pageidentifier",
            responseData: {
                id: "pmd_a4c7e39d15f24b8c8d6259f174e3d081",
                type: "PaymentMethodDomains",
                entityId: 109,
                entityType: "paypoint",
                domainName: "checkout.example.com",
                applePay: {
                    isEnabled: true,
                    data: undefined,
                },
                googlePay: {
                    isEnabled: true,
                    data: undefined,
                },
                ownerEntityId: 109,
                ownerEntityType: "paypoint",
                cascades: [
                    {
                        jobId: "1030398",
                        jobStatus: "completed",
                        jobErrorMessage: undefined,
                        createdAt: "2025-04-25T15:37:28.685Z",
                        updatedAt: "2025-04-25T15:37:33.228Z",
                    },
                    {
                        jobId: "611502",
                        jobStatus: "completed",
                        jobErrorMessage: undefined,
                        createdAt: "2026-09-26T22:25:45.095Z",
                        updatedAt: "2026-09-26T22:25:46.187Z",
                    },
                    {
                        jobId: "611172",
                        jobStatus: "completed",
                        jobErrorMessage: undefined,
                        createdAt: "2026-09-26T19:46:40.075Z",
                        updatedAt: "2026-09-26T19:47:13.548Z",
                    },
                ],
                createdAt: "2025-04-25T15:44:17.016Z",
                updatedAt: "2025-04-25T15:44:17.016Z",
            },
            responseText: "Success",
        });
    });

    test("AddPaymentMethodDomain (4109a17e)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            applePay: undefined,
            googlePay: undefined,
            domainName: undefined,
            entityId: undefined,
            entityType: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/PaymentMethodDomain")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paymentMethodDomain.addPaymentMethodDomain({
                applePay: undefined,
                googlePay: undefined,
                domainName: undefined,
                entityId: undefined,
                entityType: undefined,
            });
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("AddPaymentMethodDomain (3b5c5886)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            applePay: undefined,
            googlePay: undefined,
            domainName: undefined,
            entityId: undefined,
            entityType: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/PaymentMethodDomain")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paymentMethodDomain.addPaymentMethodDomain({
                applePay: undefined,
                googlePay: undefined,
                domainName: undefined,
                entityId: undefined,
                entityType: undefined,
            });
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("AddPaymentMethodDomain (292f9f8a)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            applePay: undefined,
            googlePay: undefined,
            domainName: undefined,
            entityId: undefined,
            entityType: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/PaymentMethodDomain")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paymentMethodDomain.addPaymentMethodDomain({
                applePay: undefined,
                googlePay: undefined,
                domainName: undefined,
                entityId: undefined,
                entityType: undefined,
            });
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("AddPaymentMethodDomain (69c276e4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            applePay: undefined,
            googlePay: undefined,
            domainName: undefined,
            entityId: undefined,
            entityType: undefined,
        };
        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .post("/PaymentMethodDomain")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paymentMethodDomain.addPaymentMethodDomain({
                applePay: undefined,
                googlePay: undefined,
                domainName: undefined,
                entityId: undefined,
                entityType: undefined,
            });
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("CascadePaymentMethodDomain (CascadeDomains)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            isSuccess: true,
            pageidentifier: "null",
            responseData: {
                id: "pmd_b8237fa45c964d8a9ef27160cd42b8c5",
                type: "PaymentMethodDomains",
                entityId: 78,
                entityType: "organization",
                domainName: "checkout.example.com",
                applePay: { isEnabled: true, data: undefined },
                googlePay: { isEnabled: true, data: undefined },
                ownerEntityId: 78,
                ownerEntityType: "organization",
                cascades: [
                    {
                        jobId: "1245697",
                        jobStatus: "completed",
                        jobErrorMessage: undefined,
                        createdAt: "2025-04-25T15:37:28.685Z",
                        updatedAt: "2025-04-25T15:37:33.228Z",
                    },
                ],
                createdAt: "2025-03-15T10:24:36.207Z",
                updatedAt: "2025-04-25T15:38:46.804Z",
            },
            responseText: "Success",
        };
        server
            .mockEndpoint()
            .post("/PaymentMethodDomain/pmd_b8237fa45c964d8a9ef27160cd42b8c5/cascade")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.paymentMethodDomain.cascadePaymentMethodDomain(
            "pmd_b8237fa45c964d8a9ef27160cd42b8c5",
        );
        expect(response).toEqual({
            isSuccess: true,
            pageidentifier: "null",
            responseData: {
                id: "pmd_b8237fa45c964d8a9ef27160cd42b8c5",
                type: "PaymentMethodDomains",
                entityId: 78,
                entityType: "organization",
                domainName: "checkout.example.com",
                applePay: {
                    isEnabled: true,
                    data: undefined,
                },
                googlePay: {
                    isEnabled: true,
                    data: undefined,
                },
                ownerEntityId: 78,
                ownerEntityType: "organization",
                cascades: [
                    {
                        jobId: "1245697",
                        jobStatus: "completed",
                        jobErrorMessage: undefined,
                        createdAt: "2025-04-25T15:37:28.685Z",
                        updatedAt: "2025-04-25T15:37:33.228Z",
                    },
                ],
                createdAt: "2025-03-15T10:24:36.207Z",
                updatedAt: "2025-04-25T15:38:46.804Z",
            },
            responseText: "Success",
        });
    });

    test("CascadePaymentMethodDomain (797244f5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/PaymentMethodDomain/domainId/cascade")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paymentMethodDomain.cascadePaymentMethodDomain("domainId");
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("CascadePaymentMethodDomain (85dd77e5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/PaymentMethodDomain/domainId/cascade")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paymentMethodDomain.cascadePaymentMethodDomain("domainId");
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("CascadePaymentMethodDomain (6692d8b1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/PaymentMethodDomain/domainId/cascade")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paymentMethodDomain.cascadePaymentMethodDomain("domainId");
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("CascadePaymentMethodDomain (da6a4fb)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .post("/PaymentMethodDomain/domainId/cascade")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paymentMethodDomain.cascadePaymentMethodDomain("domainId");
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("DeletePaymentMethodDomain (Delete)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            isSuccess: true,
            pageIdentifier: "null",
            responseData: "pmd_b8237fa45c964d8a9ef27160cd42b8c5",
            responseText: "Success",
        };
        server
            .mockEndpoint()
            .delete("/PaymentMethodDomain/pmd_b8237fa45c964d8a9ef27160cd42b8c5")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.paymentMethodDomain.deletePaymentMethodDomain(
            "pmd_b8237fa45c964d8a9ef27160cd42b8c5",
        );
        expect(response).toEqual({
            isSuccess: true,
            pageIdentifier: "null",
            responseData: "pmd_b8237fa45c964d8a9ef27160cd42b8c5",
            responseText: "Success",
        });
    });

    test("DeletePaymentMethodDomain (797244f5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/PaymentMethodDomain/domainId")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paymentMethodDomain.deletePaymentMethodDomain("domainId");
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("DeletePaymentMethodDomain (85dd77e5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/PaymentMethodDomain/domainId")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paymentMethodDomain.deletePaymentMethodDomain("domainId");
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("DeletePaymentMethodDomain (6692d8b1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/PaymentMethodDomain/domainId")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paymentMethodDomain.deletePaymentMethodDomain("domainId");
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("DeletePaymentMethodDomain (da6a4fb)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .delete("/PaymentMethodDomain/domainId")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paymentMethodDomain.deletePaymentMethodDomain("domainId");
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("GetPaymentMethodDomain (GetDomain)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "pmd_b8237fa45c964d8a9ef27160cd42b8c5",
            type: "PaymentMethodDomains",
            entityId: 78,
            entityType: "organization",
            domainName: "checkout.example.com",
            applePay: { isEnabled: true, data: undefined },
            googlePay: { isEnabled: true, data: undefined },
            ownerEntityId: 78,
            ownerEntityType: "organization",
            cascades: [
                {
                    jobId: "1245697",
                    jobStatus: "completed",
                    createdAt: "2025-04-25T15:37:28.685Z",
                    updatedAt: "2025-04-25T15:37:33.228Z",
                },
            ],
            createdAt: "2025-03-15T10:24:36.207Z",
            updatedAt: "2025-04-25T15:38:46.804Z",
        };
        server
            .mockEndpoint()
            .get("/PaymentMethodDomain/pmd_b8237fa45c964d8a9ef27160cd42b8c5")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.paymentMethodDomain.getPaymentMethodDomain(
            "pmd_b8237fa45c964d8a9ef27160cd42b8c5",
        );
        expect(response).toEqual({
            id: "pmd_b8237fa45c964d8a9ef27160cd42b8c5",
            type: "PaymentMethodDomains",
            entityId: 78,
            entityType: "organization",
            domainName: "checkout.example.com",
            applePay: {
                isEnabled: true,
                data: undefined,
            },
            googlePay: {
                isEnabled: true,
                data: undefined,
            },
            ownerEntityId: 78,
            ownerEntityType: "organization",
            cascades: [
                {
                    jobId: "1245697",
                    jobStatus: "completed",
                    createdAt: "2025-04-25T15:37:28.685Z",
                    updatedAt: "2025-04-25T15:37:33.228Z",
                },
            ],
            createdAt: "2025-03-15T10:24:36.207Z",
            updatedAt: "2025-04-25T15:38:46.804Z",
        });
    });

    test("GetPaymentMethodDomain (797244f5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/PaymentMethodDomain/domainId")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paymentMethodDomain.getPaymentMethodDomain("domainId");
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("GetPaymentMethodDomain (85dd77e5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/PaymentMethodDomain/domainId")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paymentMethodDomain.getPaymentMethodDomain("domainId");
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("GetPaymentMethodDomain (6692d8b1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/PaymentMethodDomain/domainId")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paymentMethodDomain.getPaymentMethodDomain("domainId");
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("GetPaymentMethodDomain (da6a4fb)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .get("/PaymentMethodDomain/domainId")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paymentMethodDomain.getPaymentMethodDomain("domainId");
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("ListPaymentMethodDomains (PaypointDomains)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            records: [
                {
                    id: "pmd_7b4b3ca0f6b74f02853dfcee5ec090a3",
                    type: "PaymentMethodDomains",
                    entityId: 1147,
                    entityType: "paypoint",
                    domainName: "payment.example.com",
                    applePay: { isEnabled: true },
                    googlePay: { isEnabled: true },
                    ownerEntityId: 1147,
                    ownerEntityType: "paypoint",
                    createdAt: "2025-02-13T18:31:07.023Z",
                    updatedAt: "2025-03-18T13:48:39.056Z",
                },
                {
                    id: "pmd_1f799c8ab7dd432dbc2052ce332c101c",
                    type: "PaymentMethodDomains",
                    entityId: 1147,
                    entityType: "paypoint",
                    domainName: "checkout.example.com",
                    applePay: { isEnabled: true },
                    googlePay: { isEnabled: true },
                    ownerEntityId: 1147,
                    ownerEntityType: "paypoint",
                    createdAt: "2025-02-13T18:04:50.207Z",
                    updatedAt: "2025-02-13T18:04:50.207Z",
                },
                {
                    id: "pmd_135ac1be6fab4a97850aadbbba77ce1b",
                    type: "PaymentMethodDomains",
                    entityId: 1147,
                    entityType: "paypoint",
                    domainName: "pay.example.com",
                    applePay: { isEnabled: true },
                    googlePay: { isEnabled: false },
                    ownerEntityId: 1147,
                    ownerEntityType: "paypoint",
                    createdAt: "2026-09-06T03:55:32.213Z",
                    updatedAt: "2026-09-06T03:55:47.586Z",
                },
            ],
            summary: {
                pageIdentifier: "t.wlbQ4YZ3/JJkaP2/muAxibhlwdVz1Ve89QtI40H9KPhf...",
                pageSize: 20,
                totalPages: 1,
                totalRecords: 17,
            },
        };
        server
            .mockEndpoint()
            .get("/PaymentMethodDomain/list")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.paymentMethodDomain.listPaymentMethodDomains({
            entityId: 1147,
            entityType: "paypoint",
        });
        expect(response).toEqual({
            records: [
                {
                    id: "pmd_7b4b3ca0f6b74f02853dfcee5ec090a3",
                    type: "PaymentMethodDomains",
                    entityId: 1147,
                    entityType: "paypoint",
                    domainName: "payment.example.com",
                    applePay: {
                        isEnabled: true,
                    },
                    googlePay: {
                        isEnabled: true,
                    },
                    ownerEntityId: 1147,
                    ownerEntityType: "paypoint",
                    createdAt: "2025-02-13T18:31:07.023Z",
                    updatedAt: "2025-03-18T13:48:39.056Z",
                },
                {
                    id: "pmd_1f799c8ab7dd432dbc2052ce332c101c",
                    type: "PaymentMethodDomains",
                    entityId: 1147,
                    entityType: "paypoint",
                    domainName: "checkout.example.com",
                    applePay: {
                        isEnabled: true,
                    },
                    googlePay: {
                        isEnabled: true,
                    },
                    ownerEntityId: 1147,
                    ownerEntityType: "paypoint",
                    createdAt: "2025-02-13T18:04:50.207Z",
                    updatedAt: "2025-02-13T18:04:50.207Z",
                },
                {
                    id: "pmd_135ac1be6fab4a97850aadbbba77ce1b",
                    type: "PaymentMethodDomains",
                    entityId: 1147,
                    entityType: "paypoint",
                    domainName: "pay.example.com",
                    applePay: {
                        isEnabled: true,
                    },
                    googlePay: {
                        isEnabled: false,
                    },
                    ownerEntityId: 1147,
                    ownerEntityType: "paypoint",
                    createdAt: "2026-09-06T03:55:32.213Z",
                    updatedAt: "2026-09-06T03:55:47.586Z",
                },
            ],
            summary: {
                pageIdentifier: "t.wlbQ4YZ3/JJkaP2/muAxibhlwdVz1Ve89QtI40H9KPhf...",
                pageSize: 20,
                totalPages: 1,
                totalRecords: 17,
            },
        });
    });

    test("ListPaymentMethodDomains (OrgDomains)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            records: [
                {
                    id: "pmd_1bed085c821e432fa71ae0817c571dd6",
                    type: "PaymentMethodDomains",
                    entityId: 39,
                    entityType: "organization",
                    domainName: "checkout.example.com",
                    applePay: { isEnabled: true },
                    googlePay: { isEnabled: false },
                    ownerEntityId: 39,
                    ownerEntityType: "organization",
                    createdAt: "2026-09-27T01:20:17.486Z",
                    updatedAt: "2025-03-26T23:55:36.876Z",
                },
                {
                    id: "pmd_dab1e3d2a3774216920bdc2afd62c307",
                    type: "PaymentMethodDomains",
                    entityId: 39,
                    entityType: "organization",
                    domainName: "checkout.example.com",
                    applePay: { isEnabled: true },
                    googlePay: { isEnabled: false },
                    ownerEntityId: 39,
                    ownerEntityType: "organization",
                    createdAt: "2026-08-23T03:42:06.673Z",
                    updatedAt: "2025-03-26T23:56:15.708Z",
                },
            ],
            summary: { pageIdentifier: "pageIdentifier", pageSize: 20, totalPages: 1, totalRecords: 2 },
        };
        server
            .mockEndpoint()
            .get("/PaymentMethodDomain/list")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.paymentMethodDomain.listPaymentMethodDomains({
            entityId: 39,
            entityType: "organization",
        });
        expect(response).toEqual({
            records: [
                {
                    id: "pmd_1bed085c821e432fa71ae0817c571dd6",
                    type: "PaymentMethodDomains",
                    entityId: 39,
                    entityType: "organization",
                    domainName: "checkout.example.com",
                    applePay: {
                        isEnabled: true,
                    },
                    googlePay: {
                        isEnabled: false,
                    },
                    ownerEntityId: 39,
                    ownerEntityType: "organization",
                    createdAt: "2026-09-27T01:20:17.486Z",
                    updatedAt: "2025-03-26T23:55:36.876Z",
                },
                {
                    id: "pmd_dab1e3d2a3774216920bdc2afd62c307",
                    type: "PaymentMethodDomains",
                    entityId: 39,
                    entityType: "organization",
                    domainName: "checkout.example.com",
                    applePay: {
                        isEnabled: true,
                    },
                    googlePay: {
                        isEnabled: false,
                    },
                    ownerEntityId: 39,
                    ownerEntityType: "organization",
                    createdAt: "2026-08-23T03:42:06.673Z",
                    updatedAt: "2025-03-26T23:56:15.708Z",
                },
            ],
            summary: {
                pageIdentifier: "pageIdentifier",
                pageSize: 20,
                totalPages: 1,
                totalRecords: 2,
            },
        });
    });

    test("ListPaymentMethodDomains (c60dd33b)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/PaymentMethodDomain/list")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paymentMethodDomain.listPaymentMethodDomains();
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("ListPaymentMethodDomains (1e230aeb)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/PaymentMethodDomain/list")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paymentMethodDomain.listPaymentMethodDomains();
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("ListPaymentMethodDomains (b3843b57)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/PaymentMethodDomain/list")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paymentMethodDomain.listPaymentMethodDomains();
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("ListPaymentMethodDomains (e5d1eb2d)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .get("/PaymentMethodDomain/list")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paymentMethodDomain.listPaymentMethodDomains();
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("UpdatePaymentMethodDomain (UpdatePaymentMethodDomain)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { applePay: { isEnabled: false }, googlePay: { isEnabled: false } };
        const rawResponseBody = {
            isSuccess: true,
            pageidentifier: "null",
            responseData: {
                id: "pmd_b8237fa45c964d8a9ef27160cd42b8c5",
                type: "PaymentMethodDomains",
                entityId: 78,
                entityType: "organization",
                domainName: "checkout.example.com",
                applePay: { isEnabled: false, data: undefined },
                googlePay: { isEnabled: false, data: undefined },
                ownerEntityId: 78,
                ownerEntityType: "organization",
                cascades: [
                    {
                        jobId: "1245697",
                        jobStatus: "completed",
                        jobErrorMessage: undefined,
                        createdAt: "2025-04-25T15:37:28.685Z",
                        updatedAt: "2025-04-25T15:37:33.228Z",
                    },
                ],
                createdAt: "2025-03-15T10:24:36.207Z",
                updatedAt: "2025-04-25T16:05:12.345Z",
            },
            responseText: "Success",
        };
        server
            .mockEndpoint()
            .patch("/PaymentMethodDomain/pmd_b8237fa45c964d8a9ef27160cd42b8c5")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.paymentMethodDomain.updatePaymentMethodDomain(
            "pmd_b8237fa45c964d8a9ef27160cd42b8c5",
            {
                applePay: {
                    isEnabled: false,
                },
                googlePay: {
                    isEnabled: false,
                },
            },
        );
        expect(response).toEqual({
            isSuccess: true,
            pageidentifier: "null",
            responseData: {
                id: "pmd_b8237fa45c964d8a9ef27160cd42b8c5",
                type: "PaymentMethodDomains",
                entityId: 78,
                entityType: "organization",
                domainName: "checkout.example.com",
                applePay: {
                    isEnabled: false,
                    data: undefined,
                },
                googlePay: {
                    isEnabled: false,
                    data: undefined,
                },
                ownerEntityId: 78,
                ownerEntityType: "organization",
                cascades: [
                    {
                        jobId: "1245697",
                        jobStatus: "completed",
                        jobErrorMessage: undefined,
                        createdAt: "2025-04-25T15:37:28.685Z",
                        updatedAt: "2025-04-25T15:37:33.228Z",
                    },
                ],
                createdAt: "2025-03-15T10:24:36.207Z",
                updatedAt: "2025-04-25T16:05:12.345Z",
            },
            responseText: "Success",
        });
    });

    test("UpdatePaymentMethodDomain (c31cf7e2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { applePay: undefined, googlePay: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/PaymentMethodDomain/domainId")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paymentMethodDomain.updatePaymentMethodDomain("domainId", {
                applePay: undefined,
                googlePay: undefined,
            });
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("UpdatePaymentMethodDomain (659d3cfa)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { applePay: undefined, googlePay: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/PaymentMethodDomain/domainId")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paymentMethodDomain.updatePaymentMethodDomain("domainId", {
                applePay: undefined,
                googlePay: undefined,
            });
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("UpdatePaymentMethodDomain (e0498d4e)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { applePay: undefined, googlePay: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/PaymentMethodDomain/domainId")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paymentMethodDomain.updatePaymentMethodDomain("domainId", {
                applePay: undefined,
                googlePay: undefined,
            });
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("UpdatePaymentMethodDomain (b20bba58)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { applePay: undefined, googlePay: undefined };
        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .patch("/PaymentMethodDomain/domainId")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paymentMethodDomain.updatePaymentMethodDomain("domainId", {
                applePay: undefined,
                googlePay: undefined,
            });
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("VerifyPaymentMethodDomain (VerifySuccess)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            isSuccess: true,
            pageidentifier: "null",
            responseData: {
                id: "pmd_b8237fa45c964d8a9ef27160cd42b8c5",
                type: "PaymentMethodDomains",
                entityId: 78,
                entityType: "organization",
                domainName: "checkout.example.com",
                applePay: { isEnabled: true, data: undefined },
                googlePay: { isEnabled: true, data: undefined },
                ownerEntityId: 78,
                ownerEntityType: "organization",
                cascades: [
                    {
                        jobId: "1245697",
                        jobStatus: "completed",
                        jobErrorMessage: undefined,
                        createdAt: "2025-04-25T15:37:28.685Z",
                        updatedAt: "2025-04-25T15:37:33.228Z",
                    },
                ],
                createdAt: "2025-03-15T10:24:36.207Z",
                updatedAt: "2025-04-25T15:45:21.517Z",
            },
            responseText: "Success",
        };
        server
            .mockEndpoint()
            .post("/PaymentMethodDomain/pmd_b8237fa45c964d8a9ef27160cd42b8c5/verify")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.paymentMethodDomain.verifyPaymentMethodDomain(
            "pmd_b8237fa45c964d8a9ef27160cd42b8c5",
        );
        expect(response).toEqual({
            isSuccess: true,
            pageidentifier: "null",
            responseData: {
                id: "pmd_b8237fa45c964d8a9ef27160cd42b8c5",
                type: "PaymentMethodDomains",
                entityId: 78,
                entityType: "organization",
                domainName: "checkout.example.com",
                applePay: {
                    isEnabled: true,
                    data: undefined,
                },
                googlePay: {
                    isEnabled: true,
                    data: undefined,
                },
                ownerEntityId: 78,
                ownerEntityType: "organization",
                cascades: [
                    {
                        jobId: "1245697",
                        jobStatus: "completed",
                        jobErrorMessage: undefined,
                        createdAt: "2025-04-25T15:37:28.685Z",
                        updatedAt: "2025-04-25T15:37:33.228Z",
                    },
                ],
                createdAt: "2025-03-15T10:24:36.207Z",
                updatedAt: "2025-04-25T15:45:21.517Z",
            },
            responseText: "Success",
        });
    });

    test("VerifyPaymentMethodDomain (VerifyFailure)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            isSuccess: true,
            pageidentifier: "null",
            responseData: {
                id: "pmd_b8237fa45c964d8a9ef27160cd42b8c5",
                type: "PaymentMethodDomains",
                entityId: 78,
                entityType: "organization",
                domainName: "checkout.example.com",
                applePay: {
                    isEnabled: true,
                    data: {
                        errorMessage:
                            "Unable to validate the domain. Verification file not found at https://checkout.example.com/.well-known/apple-developer-merchantid-domain-association",
                        metadata: {
                            isFileAvailable: false,
                            isFileContentValid: false,
                            statusCode: 404,
                            redirectUrl: undefined,
                            redirectDomainName: undefined,
                        },
                    },
                },
                googlePay: {
                    isEnabled: true,
                    data: {
                        errorMessage: "Unable to validate the domain. Domain not found.",
                        metadata: { statusCode: 404, redirectUrl: undefined, redirectDomainName: undefined },
                    },
                },
                ownerEntityId: 78,
                ownerEntityType: "organization",
                cascades: [
                    {
                        jobId: "1245697",
                        jobStatus: "completed",
                        jobErrorMessage: undefined,
                        createdAt: "2025-04-25T15:37:28.685Z",
                        updatedAt: "2025-04-25T15:37:33.228Z",
                    },
                ],
                createdAt: "2025-03-15T10:24:36.207Z",
                updatedAt: "2025-04-25T15:45:21.517Z",
            },
            responseText: "Success",
        };
        server
            .mockEndpoint()
            .post("/PaymentMethodDomain/pmd_b8237fa45c964d8a9ef27160cd42b8c5/verify")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.paymentMethodDomain.verifyPaymentMethodDomain(
            "pmd_b8237fa45c964d8a9ef27160cd42b8c5",
        );
        expect(response).toEqual({
            isSuccess: true,
            pageidentifier: "null",
            responseData: {
                id: "pmd_b8237fa45c964d8a9ef27160cd42b8c5",
                type: "PaymentMethodDomains",
                entityId: 78,
                entityType: "organization",
                domainName: "checkout.example.com",
                applePay: {
                    isEnabled: true,
                    data: {
                        errorMessage:
                            "Unable to validate the domain. Verification file not found at https://checkout.example.com/.well-known/apple-developer-merchantid-domain-association",
                        metadata: {
                            isFileAvailable: false,
                            isFileContentValid: false,
                            statusCode: 404,
                            redirectUrl: undefined,
                            redirectDomainName: undefined,
                        },
                    },
                },
                googlePay: {
                    isEnabled: true,
                    data: {
                        errorMessage: "Unable to validate the domain. Domain not found.",
                        metadata: {
                            statusCode: 404,
                            redirectUrl: undefined,
                            redirectDomainName: undefined,
                        },
                    },
                },
                ownerEntityId: 78,
                ownerEntityType: "organization",
                cascades: [
                    {
                        jobId: "1245697",
                        jobStatus: "completed",
                        jobErrorMessage: undefined,
                        createdAt: "2025-04-25T15:37:28.685Z",
                        updatedAt: "2025-04-25T15:37:33.228Z",
                    },
                ],
                createdAt: "2025-03-15T10:24:36.207Z",
                updatedAt: "2025-04-25T15:45:21.517Z",
            },
            responseText: "Success",
        });
    });

    test("VerifyPaymentMethodDomain (797244f5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/PaymentMethodDomain/domainId/verify")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paymentMethodDomain.verifyPaymentMethodDomain("domainId");
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("VerifyPaymentMethodDomain (85dd77e5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/PaymentMethodDomain/domainId/verify")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paymentMethodDomain.verifyPaymentMethodDomain("domainId");
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("VerifyPaymentMethodDomain (6692d8b1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/PaymentMethodDomain/domainId/verify")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paymentMethodDomain.verifyPaymentMethodDomain("domainId");
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("VerifyPaymentMethodDomain (da6a4fb)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .post("/PaymentMethodDomain/domainId/verify")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paymentMethodDomain.verifyPaymentMethodDomain("domainId");
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });
});
