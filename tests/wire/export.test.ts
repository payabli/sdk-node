/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { PayabliClient } from "../../src/Client";
import * as Payabli from "../../src/api/index";

describe("Export", () => {
    test("ExportApplications (883a9d21)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/boarding/csv/123")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.export.exportApplications("csv", 123, {
            columnsExport: "BatchDate:Batch_Date,PaypointName:Legal_name",
            fromRecord: 251,
            limitRecord: 1000,
        });
        expect(response).toEqual({
            key: "value",
        });
    });

    test("ExportApplications (2a2a4850)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/boarding/csv/1")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportApplications("csv", 1);
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("ExportApplications (143fef78)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/boarding/csv/1")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportApplications("csv", 1);
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("ExportApplications (3428000c)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/boarding/csv/1")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportApplications("csv", 1);
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("ExportApplications (979a3832)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .get("/Export/boarding/csv/1")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportApplications("csv", 1);
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("ExportBatchDetails (5597efb2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/batchDetails/csv/8cfec329267")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.export.exportBatchDetails("8cfec329267", "csv", {
            columnsExport: "BatchDate:Batch_Date,PaypointName:Legal_name",
            fromRecord: 251,
            limitRecord: 1000,
        });
        expect(response).toEqual({
            key: "value",
        });
    });

    test("ExportBatchDetails (b87ac2c)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/batchDetails/csv/entry")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportBatchDetails("entry", "csv");
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("ExportBatchDetails (ab31ec34)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/batchDetails/csv/entry")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportBatchDetails("entry", "csv");
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("ExportBatchDetails (a976a8)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/batchDetails/csv/entry")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportBatchDetails("entry", "csv");
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("ExportBatchDetails (9958759e)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .get("/Export/batchDetails/csv/entry")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportBatchDetails("entry", "csv");
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("ExportBatchDetailsOrg (883a9d21)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/batchDetails/csv/org/123")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.export.exportBatchDetailsOrg("csv", 123, {
            columnsExport: "BatchDate:Batch_Date,PaypointName:Legal_name",
            fromRecord: 251,
            limitRecord: 1000,
        });
        expect(response).toEqual({
            key: "value",
        });
    });

    test("ExportBatchDetailsOrg (2a2a4850)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/batchDetails/csv/org/1")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportBatchDetailsOrg("csv", 1);
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("ExportBatchDetailsOrg (143fef78)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/batchDetails/csv/org/1")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportBatchDetailsOrg("csv", 1);
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("ExportBatchDetailsOrg (3428000c)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/batchDetails/csv/org/1")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportBatchDetailsOrg("csv", 1);
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("ExportBatchDetailsOrg (979a3832)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .get("/Export/batchDetails/csv/org/1")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportBatchDetailsOrg("csv", 1);
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("ExportBatches (5597efb2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/batches/csv/8cfec329267")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.export.exportBatches("8cfec329267", "csv", {
            columnsExport: "BatchDate:Batch_Date,PaypointName:Legal_name",
            fromRecord: 251,
            limitRecord: 1000,
        });
        expect(response).toEqual({
            key: "value",
        });
    });

    test("ExportBatches (b87ac2c)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/batches/csv/entry")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportBatches("entry", "csv");
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("ExportBatches (ab31ec34)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/batches/csv/entry")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportBatches("entry", "csv");
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("ExportBatches (a976a8)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/batches/csv/entry")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportBatches("entry", "csv");
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("ExportBatches (9958759e)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .get("/Export/batches/csv/entry")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportBatches("entry", "csv");
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("ExportBatchesOrg (883a9d21)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/batches/csv/org/123")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.export.exportBatchesOrg("csv", 123, {
            columnsExport: "BatchDate:Batch_Date,PaypointName:Legal_name",
            fromRecord: 251,
            limitRecord: 1000,
        });
        expect(response).toEqual({
            key: "value",
        });
    });

    test("ExportBatchesOrg (2a2a4850)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/batches/csv/org/1")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportBatchesOrg("csv", 1);
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("ExportBatchesOrg (143fef78)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/batches/csv/org/1")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportBatchesOrg("csv", 1);
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("ExportBatchesOrg (3428000c)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/batches/csv/org/1")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportBatchesOrg("csv", 1);
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("ExportBatchesOrg (979a3832)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .get("/Export/batches/csv/org/1")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportBatchesOrg("csv", 1);
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("ExportBatchesOut (5597efb2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/batchesOut/csv/8cfec329267")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.export.exportBatchesOut("8cfec329267", "csv", {
            columnsExport: "BatchDate:Batch_Date,PaypointName:Legal_name",
            fromRecord: 251,
            limitRecord: 1000,
        });
        expect(response).toEqual({
            key: "value",
        });
    });

    test("ExportBatchesOut (b87ac2c)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/batchesOut/csv/entry")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportBatchesOut("entry", "csv");
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("ExportBatchesOut (ab31ec34)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/batchesOut/csv/entry")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportBatchesOut("entry", "csv");
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("ExportBatchesOut (a976a8)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/batchesOut/csv/entry")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportBatchesOut("entry", "csv");
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("ExportBatchesOut (9958759e)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .get("/Export/batchesOut/csv/entry")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportBatchesOut("entry", "csv");
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("ExportBatchesOutOrg (883a9d21)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/batchesOut/csv/org/123")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.export.exportBatchesOutOrg("csv", 123, {
            columnsExport: "BatchDate:Batch_Date,PaypointName:Legal_name",
            fromRecord: 251,
            limitRecord: 1000,
        });
        expect(response).toEqual({
            key: "value",
        });
    });

    test("ExportBatchesOutOrg (2a2a4850)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/batchesOut/csv/org/1")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportBatchesOutOrg("csv", 1);
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("ExportBatchesOutOrg (143fef78)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/batchesOut/csv/org/1")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportBatchesOutOrg("csv", 1);
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("ExportBatchesOutOrg (3428000c)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/batchesOut/csv/org/1")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportBatchesOutOrg("csv", 1);
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("ExportBatchesOutOrg (979a3832)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .get("/Export/batchesOut/csv/org/1")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportBatchesOutOrg("csv", 1);
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("ExportBills (5597efb2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/bills/csv/8cfec329267")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.export.exportBills("8cfec329267", "csv", {
            columnsExport: "BatchDate:Batch_Date,PaypointName:Legal_name",
            fromRecord: 251,
            limitRecord: 1000,
        });
        expect(response).toEqual({
            key: "value",
        });
    });

    test("ExportBills (b87ac2c)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/bills/csv/entry")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportBills("entry", "csv");
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("ExportBills (ab31ec34)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/bills/csv/entry")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportBills("entry", "csv");
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("ExportBills (a976a8)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/bills/csv/entry")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportBills("entry", "csv");
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("ExportBills (9958759e)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .get("/Export/bills/csv/entry")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportBills("entry", "csv");
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("ExportBillsOrg (883a9d21)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/bills/csv/org/123")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.export.exportBillsOrg("csv", 123, {
            columnsExport: "BatchDate:Batch_Date,PaypointName:Legal_name",
            fromRecord: 251,
            limitRecord: 1000,
        });
        expect(response).toEqual({
            key: "value",
        });
    });

    test("ExportBillsOrg (2a2a4850)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/bills/csv/org/1")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportBillsOrg("csv", 1);
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("ExportBillsOrg (143fef78)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/bills/csv/org/1")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportBillsOrg("csv", 1);
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("ExportBillsOrg (3428000c)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/bills/csv/org/1")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportBillsOrg("csv", 1);
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("ExportBillsOrg (979a3832)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .get("/Export/bills/csv/org/1")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportBillsOrg("csv", 1);
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("ExportChargebacks (5597efb2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/chargebacks/csv/8cfec329267")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.export.exportChargebacks("8cfec329267", "csv", {
            columnsExport: "BatchDate:Batch_Date,PaypointName:Legal_name",
            fromRecord: 251,
            limitRecord: 1000,
        });
        expect(response).toEqual({
            key: "value",
        });
    });

    test("ExportChargebacks (b87ac2c)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/chargebacks/csv/entry")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportChargebacks("entry", "csv");
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("ExportChargebacks (ab31ec34)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/chargebacks/csv/entry")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportChargebacks("entry", "csv");
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("ExportChargebacks (a976a8)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/chargebacks/csv/entry")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportChargebacks("entry", "csv");
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("ExportChargebacks (9958759e)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .get("/Export/chargebacks/csv/entry")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportChargebacks("entry", "csv");
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("ExportChargebacksOrg (883a9d21)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/chargebacks/csv/org/123")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.export.exportChargebacksOrg("csv", 123, {
            columnsExport: "BatchDate:Batch_Date,PaypointName:Legal_name",
            fromRecord: 251,
            limitRecord: 1000,
        });
        expect(response).toEqual({
            key: "value",
        });
    });

    test("ExportChargebacksOrg (2a2a4850)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/chargebacks/csv/org/1")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportChargebacksOrg("csv", 1);
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("ExportChargebacksOrg (143fef78)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/chargebacks/csv/org/1")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportChargebacksOrg("csv", 1);
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("ExportChargebacksOrg (3428000c)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/chargebacks/csv/org/1")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportChargebacksOrg("csv", 1);
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("ExportChargebacksOrg (979a3832)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .get("/Export/chargebacks/csv/org/1")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportChargebacksOrg("csv", 1);
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("ExportCustomers (5597efb2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/customers/csv/8cfec329267")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.export.exportCustomers("8cfec329267", "csv", {
            columnsExport: "BatchDate:Batch_Date,PaypointName:Legal_name",
            fromRecord: 251,
            limitRecord: 1000,
        });
        expect(response).toEqual({
            key: "value",
        });
    });

    test("ExportCustomers (b87ac2c)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/customers/csv/entry")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportCustomers("entry", "csv");
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("ExportCustomers (ab31ec34)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/customers/csv/entry")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportCustomers("entry", "csv");
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("ExportCustomers (a976a8)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/customers/csv/entry")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportCustomers("entry", "csv");
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("ExportCustomers (9958759e)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .get("/Export/customers/csv/entry")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportCustomers("entry", "csv");
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("ExportCustomersOrg (883a9d21)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/customers/csv/org/123")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.export.exportCustomersOrg("csv", 123, {
            columnsExport: "BatchDate:Batch_Date,PaypointName:Legal_name",
            fromRecord: 251,
            limitRecord: 1000,
        });
        expect(response).toEqual({
            key: "value",
        });
    });

    test("ExportCustomersOrg (2a2a4850)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/customers/csv/org/1")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportCustomersOrg("csv", 1);
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("ExportCustomersOrg (143fef78)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/customers/csv/org/1")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportCustomersOrg("csv", 1);
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("ExportCustomersOrg (3428000c)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/customers/csv/org/1")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportCustomersOrg("csv", 1);
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("ExportCustomersOrg (979a3832)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .get("/Export/customers/csv/org/1")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportCustomersOrg("csv", 1);
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("ExportInvoices (5597efb2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/invoices/csv/8cfec329267")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.export.exportInvoices("8cfec329267", "csv", {
            columnsExport: "BatchDate:Batch_Date,PaypointName:Legal_name",
            fromRecord: 251,
            limitRecord: 1000,
        });
        expect(response).toEqual({
            key: "value",
        });
    });

    test("ExportInvoices (b87ac2c)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/invoices/csv/entry")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportInvoices("entry", "csv");
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("ExportInvoices (ab31ec34)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/invoices/csv/entry")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportInvoices("entry", "csv");
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("ExportInvoices (a976a8)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/invoices/csv/entry")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportInvoices("entry", "csv");
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("ExportInvoices (9958759e)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .get("/Export/invoices/csv/entry")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportInvoices("entry", "csv");
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("ExportInvoicesOrg (883a9d21)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/invoices/csv/org/123")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.export.exportInvoicesOrg("csv", 123, {
            columnsExport: "BatchDate:Batch_Date,PaypointName:Legal_name",
            fromRecord: 251,
            limitRecord: 1000,
        });
        expect(response).toEqual({
            key: "value",
        });
    });

    test("ExportInvoicesOrg (2a2a4850)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/invoices/csv/org/1")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportInvoicesOrg("csv", 1);
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("ExportInvoicesOrg (143fef78)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/invoices/csv/org/1")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportInvoicesOrg("csv", 1);
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("ExportInvoicesOrg (3428000c)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/invoices/csv/org/1")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportInvoicesOrg("csv", 1);
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("ExportInvoicesOrg (979a3832)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .get("/Export/invoices/csv/org/1")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportInvoicesOrg("csv", 1);
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("ExportOrganizations (883a9d21)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/organizations/csv/org/123")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.export.exportOrganizations("csv", 123, {
            columnsExport: "BatchDate:Batch_Date,PaypointName:Legal_name",
            fromRecord: 251,
            limitRecord: 1000,
        });
        expect(response).toEqual({
            key: "value",
        });
    });

    test("ExportOrganizations (2a2a4850)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/organizations/csv/org/1")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportOrganizations("csv", 1);
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("ExportOrganizations (143fef78)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/organizations/csv/org/1")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportOrganizations("csv", 1);
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("ExportOrganizations (3428000c)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/organizations/csv/org/1")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportOrganizations("csv", 1);
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("ExportOrganizations (979a3832)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .get("/Export/organizations/csv/org/1")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportOrganizations("csv", 1);
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("ExportPayout (5597efb2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/payouts/csv/8cfec329267")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.export.exportPayout("8cfec329267", "csv", {
            columnsExport: "BatchDate:Batch_Date,PaypointName:Legal_name",
            fromRecord: 251,
            limitRecord: 1000,
        });
        expect(response).toEqual({
            key: "value",
        });
    });

    test("ExportPayout (b87ac2c)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/payouts/csv/entry")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportPayout("entry", "csv");
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("ExportPayout (ab31ec34)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/payouts/csv/entry")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportPayout("entry", "csv");
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("ExportPayout (a976a8)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/payouts/csv/entry")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportPayout("entry", "csv");
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("ExportPayout (9958759e)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .get("/Export/payouts/csv/entry")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportPayout("entry", "csv");
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("ExportPayoutOrg (883a9d21)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/payouts/csv/org/123")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.export.exportPayoutOrg("csv", 123, {
            columnsExport: "BatchDate:Batch_Date,PaypointName:Legal_name",
            fromRecord: 251,
            limitRecord: 1000,
        });
        expect(response).toEqual({
            key: "value",
        });
    });

    test("ExportPayoutOrg (2a2a4850)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/payouts/csv/org/1")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportPayoutOrg("csv", 1);
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("ExportPayoutOrg (143fef78)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/payouts/csv/org/1")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportPayoutOrg("csv", 1);
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("ExportPayoutOrg (3428000c)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/payouts/csv/org/1")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportPayoutOrg("csv", 1);
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("ExportPayoutOrg (979a3832)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .get("/Export/payouts/csv/org/1")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportPayoutOrg("csv", 1);
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("ExportPaypoints (883a9d21)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/paypoints/csv/123")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.export.exportPaypoints("csv", 123, {
            columnsExport: "BatchDate:Batch_Date,PaypointName:Legal_name",
            fromRecord: 251,
            limitRecord: 1000,
        });
        expect(response).toEqual({
            key: "value",
        });
    });

    test("ExportPaypoints (2a2a4850)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/paypoints/csv/1")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportPaypoints("csv", 1);
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("ExportPaypoints (143fef78)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/paypoints/csv/1")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportPaypoints("csv", 1);
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("ExportPaypoints (3428000c)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/paypoints/csv/1")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportPaypoints("csv", 1);
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("ExportPaypoints (979a3832)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .get("/Export/paypoints/csv/1")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportPaypoints("csv", 1);
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("ExportSettlements (5597efb2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/settlements/csv/8cfec329267")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.export.exportSettlements("8cfec329267", "csv", {
            columnsExport: "BatchDate:Batch_Date,PaypointName:Legal_name",
            fromRecord: 251,
            limitRecord: 1000,
        });
        expect(response).toEqual({
            key: "value",
        });
    });

    test("ExportSettlements (b87ac2c)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/settlements/csv/entry")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportSettlements("entry", "csv");
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("ExportSettlements (ab31ec34)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/settlements/csv/entry")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportSettlements("entry", "csv");
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("ExportSettlements (a976a8)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/settlements/csv/entry")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportSettlements("entry", "csv");
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("ExportSettlements (9958759e)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .get("/Export/settlements/csv/entry")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportSettlements("entry", "csv");
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("ExportSettlementsOrg (883a9d21)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/settlements/csv/org/123")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.export.exportSettlementsOrg("csv", 123, {
            columnsExport: "BatchDate:Batch_Date,PaypointName:Legal_name",
            fromRecord: 251,
            limitRecord: 1000,
        });
        expect(response).toEqual({
            key: "value",
        });
    });

    test("ExportSettlementsOrg (2a2a4850)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/settlements/csv/org/1")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportSettlementsOrg("csv", 1);
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("ExportSettlementsOrg (143fef78)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/settlements/csv/org/1")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportSettlementsOrg("csv", 1);
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("ExportSettlementsOrg (3428000c)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/settlements/csv/org/1")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportSettlementsOrg("csv", 1);
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("ExportSettlementsOrg (979a3832)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .get("/Export/settlements/csv/org/1")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportSettlementsOrg("csv", 1);
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("ExportSubscriptions (5597efb2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/subscriptions/csv/8cfec329267")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.export.exportSubscriptions("8cfec329267", "csv", {
            columnsExport: "BatchDate:Batch_Date,PaypointName:Legal_name",
            fromRecord: 251,
            limitRecord: 1000,
        });
        expect(response).toEqual({
            key: "value",
        });
    });

    test("ExportSubscriptions (b87ac2c)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/subscriptions/csv/entry")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportSubscriptions("entry", "csv");
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("ExportSubscriptions (ab31ec34)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/subscriptions/csv/entry")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportSubscriptions("entry", "csv");
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("ExportSubscriptions (a976a8)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/subscriptions/csv/entry")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportSubscriptions("entry", "csv");
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("ExportSubscriptions (9958759e)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .get("/Export/subscriptions/csv/entry")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportSubscriptions("entry", "csv");
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("ExportSubscriptionsOrg (883a9d21)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/subscriptions/csv/org/123")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.export.exportSubscriptionsOrg("csv", 123, {
            columnsExport: "BatchDate:Batch_Date,PaypointName:Legal_name",
            fromRecord: 251,
            limitRecord: 1000,
        });
        expect(response).toEqual({
            key: "value",
        });
    });

    test("ExportSubscriptionsOrg (2a2a4850)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/subscriptions/csv/org/1")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportSubscriptionsOrg("csv", 1);
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("ExportSubscriptionsOrg (143fef78)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/subscriptions/csv/org/1")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportSubscriptionsOrg("csv", 1);
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("ExportSubscriptionsOrg (3428000c)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/subscriptions/csv/org/1")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportSubscriptionsOrg("csv", 1);
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("ExportSubscriptionsOrg (979a3832)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .get("/Export/subscriptions/csv/org/1")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportSubscriptionsOrg("csv", 1);
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("ExportTransactions (5597efb2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/transactions/csv/8cfec329267")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.export.exportTransactions("8cfec329267", "csv", {
            columnsExport: "BatchDate:Batch_Date,PaypointName:Legal_name",
            fromRecord: 251,
            limitRecord: 1000,
        });
        expect(response).toEqual({
            key: "value",
        });
    });

    test("ExportTransactions (b87ac2c)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/transactions/csv/entry")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportTransactions("entry", "csv");
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("ExportTransactions (ab31ec34)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/transactions/csv/entry")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportTransactions("entry", "csv");
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("ExportTransactions (a976a8)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/transactions/csv/entry")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportTransactions("entry", "csv");
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("ExportTransactions (9958759e)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .get("/Export/transactions/csv/entry")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportTransactions("entry", "csv");
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("ExportTransactionsOrg (883a9d21)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/transactions/csv/org/123")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.export.exportTransactionsOrg("csv", 123, {
            columnsExport: "BatchDate:Batch_Date,PaypointName:Legal_name",
            fromRecord: 251,
            limitRecord: 1000,
        });
        expect(response).toEqual({
            key: "value",
        });
    });

    test("ExportTransactionsOrg (2a2a4850)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/transactions/csv/org/1")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportTransactionsOrg("csv", 1);
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("ExportTransactionsOrg (143fef78)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/transactions/csv/org/1")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportTransactionsOrg("csv", 1);
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("ExportTransactionsOrg (3428000c)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/transactions/csv/org/1")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportTransactionsOrg("csv", 1);
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("ExportTransactionsOrg (979a3832)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .get("/Export/transactions/csv/org/1")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportTransactionsOrg("csv", 1);
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("ExportTransferDetails (4d01cf34)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/transferDetails/csv/8cfec329267/1000000")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.export.exportTransferDetails("8cfec329267", "csv", 1000000, {
            columnsExport: "BatchDate:Batch_Date,PaypointName:Legal_name",
            fromRecord: 251,
            limitRecord: 1000,
            sortBy: "desc(field_name)",
        });
        expect(response).toEqual({
            key: "value",
        });
    });

    test("ExportTransferDetails (cbb73040)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/transferDetails/csv/entry/1000000")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportTransferDetails("entry", "csv", 1000000);
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("ExportTransferDetails (5303afa8)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/transferDetails/csv/entry/1000000")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportTransferDetails("entry", "csv", 1000000);
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("ExportTransferDetails (c8bb87bc)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/transferDetails/csv/entry/1000000")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportTransferDetails("entry", "csv", 1000000);
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("ExportTransferDetails (4544282)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .get("/Export/transferDetails/csv/entry/1000000")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportTransferDetails("entry", "csv", 1000000);
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("ExportTransfers (57c2cbb4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/transfers/8cfec329267")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.export.exportTransfers("8cfec329267", {
            columnsExport: "BatchDate:Batch_Date,PaypointName:Legal_name",
            fromRecord: 251,
            limitRecord: 1000,
            sortBy: "desc(field_name)",
        });
        expect(response).toEqual({
            key: "value",
        });
    });

    test("ExportTransfers (344ea1c4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/transfers/entry")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportTransfers("entry");
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("ExportTransfers (a17d02ec)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/transfers/entry")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportTransfers("entry");
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("ExportTransfers (93e82fa0)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/transfers/entry")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportTransfers("entry");
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("ExportTransfers (15f0f426)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .get("/Export/transfers/entry")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportTransfers("entry");
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("ExportVendors (5597efb2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/vendors/csv/8cfec329267")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.export.exportVendors("8cfec329267", "csv", {
            columnsExport: "BatchDate:Batch_Date,PaypointName:Legal_name",
            fromRecord: 251,
            limitRecord: 1000,
        });
        expect(response).toEqual({
            key: "value",
        });
    });

    test("ExportVendors (b87ac2c)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/vendors/csv/entry")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportVendors("entry", "csv");
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("ExportVendors (ab31ec34)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/vendors/csv/entry")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportVendors("entry", "csv");
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("ExportVendors (a976a8)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/vendors/csv/entry")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportVendors("entry", "csv");
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("ExportVendors (9958759e)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .get("/Export/vendors/csv/entry")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportVendors("entry", "csv");
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("ExportVendorsOrg (883a9d21)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/vendors/csv/org/123")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.export.exportVendorsOrg("csv", 123, {
            columnsExport: "BatchDate:Batch_Date,PaypointName:Legal_name",
            fromRecord: 251,
            limitRecord: 1000,
        });
        expect(response).toEqual({
            key: "value",
        });
    });

    test("ExportVendorsOrg (2a2a4850)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/vendors/csv/org/1")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportVendorsOrg("csv", 1);
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("ExportVendorsOrg (143fef78)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/vendors/csv/org/1")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportVendorsOrg("csv", 1);
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("ExportVendorsOrg (3428000c)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/vendors/csv/org/1")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportVendorsOrg("csv", 1);
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("ExportVendorsOrg (979a3832)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .get("/Export/vendors/csv/org/1")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.export.exportVendorsOrg("csv", 1);
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });
});
