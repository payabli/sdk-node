/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import * as Payabli from "../../src/api/index";
import { PayabliClient } from "../../src/Client";

describe("User", () => {
    test("AddUser (6c58c3a3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { isSuccess: true, responseText: "Success" };
        server
            .mockEndpoint()
            .post("/User")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.user.addUser({});
        expect(response).toEqual({
            isSuccess: true,
            responseText: "Success",
        });
    });

    test("AddUser (f199777)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            access: undefined,
            additionalData: undefined,
            email: undefined,
            language: undefined,
            mfaData: undefined,
            name: undefined,
            phone: undefined,
            pwd: undefined,
            scope: undefined,
            timeZone: undefined,
            usrStatus: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/User")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.user.addUser({
                access: undefined,
                additionalData: undefined,
                email: undefined,
                language: undefined,
                mfaData: undefined,
                name: undefined,
                phone: undefined,
                pwd: undefined,
                scope: undefined,
                timeZone: undefined,
                usrStatus: undefined,
            });
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("AddUser (47d479c7)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            access: undefined,
            additionalData: undefined,
            email: undefined,
            language: undefined,
            mfaData: undefined,
            name: undefined,
            phone: undefined,
            pwd: undefined,
            scope: undefined,
            timeZone: undefined,
            usrStatus: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/User")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.user.addUser({
                access: undefined,
                additionalData: undefined,
                email: undefined,
                language: undefined,
                mfaData: undefined,
                name: undefined,
                phone: undefined,
                pwd: undefined,
                scope: undefined,
                timeZone: undefined,
                usrStatus: undefined,
            });
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("AddUser (323f9843)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            access: undefined,
            additionalData: undefined,
            email: undefined,
            language: undefined,
            mfaData: undefined,
            name: undefined,
            phone: undefined,
            pwd: undefined,
            scope: undefined,
            timeZone: undefined,
            usrStatus: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/User")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.user.addUser({
                access: undefined,
                additionalData: undefined,
                email: undefined,
                language: undefined,
                mfaData: undefined,
                name: undefined,
                phone: undefined,
                pwd: undefined,
                scope: undefined,
                timeZone: undefined,
                usrStatus: undefined,
            });
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("AddUser (7355ac39)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            access: undefined,
            additionalData: undefined,
            email: undefined,
            language: undefined,
            mfaData: undefined,
            name: undefined,
            phone: undefined,
            pwd: undefined,
            scope: undefined,
            timeZone: undefined,
            usrStatus: undefined,
        };
        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .post("/User")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.user.addUser({
                access: undefined,
                additionalData: undefined,
                email: undefined,
                language: undefined,
                mfaData: undefined,
                name: undefined,
                phone: undefined,
                pwd: undefined,
                scope: undefined,
                timeZone: undefined,
                usrStatus: undefined,
            });
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("AuthRefreshUser (dcfb2e43)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            inactiveTokenTime: 31,
            isSuccess: true,
            remaining: 120,
            responseData: "u.fPLVSzFv1gZpHl......",
            responseText: "Success",
        };
        server.mockEndpoint().post("/User/authrefresh").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.user.authRefreshUser();
        expect(response).toEqual({
            inactiveTokenTime: 31,
            isSuccess: true,
            remaining: 120,
            responseData: "u.fPLVSzFv1gZpHl......",
            responseText: "Success",
        });
    });

    test("AuthRefreshUser (c60dd33b)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().post("/User/authrefresh").respondWith().statusCode(400).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.user.authRefreshUser();
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("AuthRefreshUser (1e230aeb)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().post("/User/authrefresh").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.user.authRefreshUser();
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("AuthRefreshUser (b3843b57)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().post("/User/authrefresh").respondWith().statusCode(500).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.user.authRefreshUser();
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("AuthRefreshUser (e5d1eb2d)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server.mockEndpoint().post("/User/authrefresh").respondWith().statusCode(503).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.user.authRefreshUser();
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("AuthResetUser (6c58c3a3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { isSuccess: true, responseText: "Success" };
        server
            .mockEndpoint()
            .post("/User/authreset")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.user.authResetUser();
        expect(response).toEqual({
            isSuccess: true,
            responseText: "Success",
        });
    });

    test("AuthResetUser (b66e8adb)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { email: undefined, entry: undefined, entryType: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/User/authreset")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.user.authResetUser({
                email: undefined,
                entry: undefined,
                entryType: undefined,
            });
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("AuthResetUser (945d938b)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { email: undefined, entry: undefined, entryType: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/User/authreset")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.user.authResetUser({
                email: undefined,
                entry: undefined,
                entryType: undefined,
            });
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("AuthResetUser (2f4dd777)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { email: undefined, entry: undefined, entryType: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/User/authreset")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.user.authResetUser({
                email: undefined,
                entry: undefined,
                entryType: undefined,
            });
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("AuthResetUser (b8055a0d)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { email: undefined, entry: undefined, entryType: undefined };
        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .post("/User/authreset")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.user.authResetUser({
                email: undefined,
                entry: undefined,
                entryType: undefined,
            });
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("AuthUser (3dfe2b9)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            isSuccess: true,
            mfa: false,
            mfaMode: "email",
            mfaValidationCode: "50-2E-4A-16-93-0E-41-41-07-EE-22-B6-00-99-00-99",
            responseData: "g**.com",
            responseText: "Success",
        };
        server
            .mockEndpoint()
            .post("/User/auth/provider")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.user.authUser("provider");
        expect(response).toEqual({
            isSuccess: true,
            mfa: false,
            mfaMode: "email",
            mfaValidationCode: "50-2E-4A-16-93-0E-41-41-07-EE-22-B6-00-99-00-99",
            responseData: "g**.com",
            responseText: "Success",
        });
    });

    test("AuthUser (fcc58bbb)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            email: undefined,
            entry: undefined,
            entryType: undefined,
            psw: undefined,
            userId: undefined,
            userTokenId: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/User/auth/provider")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.user.authUser("provider", {
                email: undefined,
                entry: undefined,
                entryType: undefined,
                psw: undefined,
                userId: undefined,
                userTokenId: undefined,
            });
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("AuthUser (e3f9e36b)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            email: undefined,
            entry: undefined,
            entryType: undefined,
            psw: undefined,
            userId: undefined,
            userTokenId: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/User/auth/provider")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.user.authUser("provider", {
                email: undefined,
                entry: undefined,
                entryType: undefined,
                psw: undefined,
                userId: undefined,
                userTokenId: undefined,
            });
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("AuthUser (45f8c3d7)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            email: undefined,
            entry: undefined,
            entryType: undefined,
            psw: undefined,
            userId: undefined,
            userTokenId: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/User/auth/provider")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.user.authUser("provider", {
                email: undefined,
                entry: undefined,
                entryType: undefined,
                psw: undefined,
                userId: undefined,
                userTokenId: undefined,
            });
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("AuthUser (5464f7ad)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            email: undefined,
            entry: undefined,
            entryType: undefined,
            psw: undefined,
            userId: undefined,
            userTokenId: undefined,
        };
        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .post("/User/auth/provider")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.user.authUser("provider", {
                email: undefined,
                entry: undefined,
                entryType: undefined,
                psw: undefined,
                userId: undefined,
                userTokenId: undefined,
            });
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("ChangePswUser (6c58c3a3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { isSuccess: true, responseText: "Success" };
        server
            .mockEndpoint()
            .put("/User/authpsw")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.user.changePswUser();
        expect(response).toEqual({
            isSuccess: true,
            responseText: "Success",
        });
    });

    test("ChangePswUser (422ccbfb)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { psw: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/User/authpsw")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.user.changePswUser({
                psw: undefined,
            });
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("ChangePswUser (5a7ad7ab)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { psw: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/User/authpsw")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.user.changePswUser({
                psw: undefined,
            });
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("ChangePswUser (d3eff717)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { psw: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/User/authpsw")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.user.changePswUser({
                psw: undefined,
            });
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("ChangePswUser (12b3546d)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { psw: undefined };
        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .put("/User/authpsw")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.user.changePswUser({
                psw: undefined,
            });
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("DeleteUser (268ba30)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { responseText: "Success" };
        server.mockEndpoint().delete("/User/1000000").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.user.deleteUser(1000000);
        expect(response).toEqual({
            responseText: "Success",
        });
    });

    test("DeleteUser (c707a31f)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().delete("/User/1000000").respondWith().statusCode(400).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.user.deleteUser(1000000);
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("DeleteUser (1ccf4baf)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().delete("/User/1000000").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.user.deleteUser(1000000);
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("DeleteUser (953a448b)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().delete("/User/1000000").respondWith().statusCode(500).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.user.deleteUser(1000000);
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("DeleteUser (13ec7891)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server.mockEndpoint().delete("/User/1000000").respondWith().statusCode(503).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.user.deleteUser(1000000);
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("EditMfaUser (983795de)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { isSuccess: true, responseText: "Success" };
        server
            .mockEndpoint()
            .put("/User/mfa/1000000")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.user.editMfaUser(1000000, {});
        expect(response).toEqual({
            isSuccess: true,
            responseText: "Success",
        });
    });

    test("EditMfaUser (f397f1b3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { mfa: undefined, mfaMode: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/User/mfa/1000000")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.user.editMfaUser(1000000, {
                mfa: undefined,
                mfaMode: undefined,
            });
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("EditMfaUser (ac8c8703)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { mfa: undefined, mfaMode: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/User/mfa/1000000")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.user.editMfaUser(1000000, {
                mfa: undefined,
                mfaMode: undefined,
            });
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("EditMfaUser (e48c4fcf)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { mfa: undefined, mfaMode: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/User/mfa/1000000")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.user.editMfaUser(1000000, {
                mfa: undefined,
                mfaMode: undefined,
            });
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("EditMfaUser (4bf9b035)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { mfa: undefined, mfaMode: undefined };
        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .put("/User/mfa/1000000")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.user.editMfaUser(1000000, {
                mfa: undefined,
                mfaMode: undefined,
            });
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("EditUser (983795de)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { isSuccess: true, responseText: "Success" };
        server
            .mockEndpoint()
            .put("/User/1000000")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.user.editUser(1000000, {});
        expect(response).toEqual({
            isSuccess: true,
            responseText: "Success",
        });
    });

    test("EditUser (b3905663)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            access: undefined,
            additionalData: undefined,
            email: undefined,
            language: undefined,
            mfaData: undefined,
            name: undefined,
            phone: undefined,
            pwd: undefined,
            scope: undefined,
            timeZone: undefined,
            usrStatus: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/User/1000000")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.user.editUser(1000000, {
                access: undefined,
                additionalData: undefined,
                email: undefined,
                language: undefined,
                mfaData: undefined,
                name: undefined,
                phone: undefined,
                pwd: undefined,
                scope: undefined,
                timeZone: undefined,
                usrStatus: undefined,
            });
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("EditUser (b241c573)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            access: undefined,
            additionalData: undefined,
            email: undefined,
            language: undefined,
            mfaData: undefined,
            name: undefined,
            phone: undefined,
            pwd: undefined,
            scope: undefined,
            timeZone: undefined,
            usrStatus: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/User/1000000")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.user.editUser(1000000, {
                access: undefined,
                additionalData: undefined,
                email: undefined,
                language: undefined,
                mfaData: undefined,
                name: undefined,
                phone: undefined,
                pwd: undefined,
                scope: undefined,
                timeZone: undefined,
                usrStatus: undefined,
            });
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("EditUser (ced583bf)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            access: undefined,
            additionalData: undefined,
            email: undefined,
            language: undefined,
            mfaData: undefined,
            name: undefined,
            phone: undefined,
            pwd: undefined,
            scope: undefined,
            timeZone: undefined,
            usrStatus: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/User/1000000")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.user.editUser(1000000, {
                access: undefined,
                additionalData: undefined,
                email: undefined,
                language: undefined,
                mfaData: undefined,
                name: undefined,
                phone: undefined,
                pwd: undefined,
                scope: undefined,
                timeZone: undefined,
                usrStatus: undefined,
            });
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("EditUser (eba49e45)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            access: undefined,
            additionalData: undefined,
            email: undefined,
            language: undefined,
            mfaData: undefined,
            name: undefined,
            phone: undefined,
            pwd: undefined,
            scope: undefined,
            timeZone: undefined,
            usrStatus: undefined,
        };
        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .put("/User/1000000")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.user.editUser(1000000, {
                access: undefined,
                additionalData: undefined,
                email: undefined,
                language: undefined,
                mfaData: undefined,
                name: undefined,
                phone: undefined,
                pwd: undefined,
                scope: undefined,
                timeZone: undefined,
                usrStatus: undefined,
            });
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("GetUser (8ad88319)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            Access: [{ roleLabel: "customers", roleValue: true }],
            AdditionalData: "AdditionalData",
            createdAt: "2022-07-01T15:00:01Z",
            Email: "example@email.com",
            language: "en",
            lastAccess: "2022-07-01T15:00:01Z",
            Name: "Sean Smith",
            Phone: "5555555555",
            Scope: [{ orgEntry: "pilgrim-planner", orgId: 123, orgType: 0 }],
            snData: "snData",
            snIdentifier: "snIdentifier",
            snProvider: "google",
            timeZone: -5,
            userId: 1000000,
            UsrMFA: false,
            UsrMFAMode: 0,
            UsrStatus: 1,
        };
        server.mockEndpoint().get("/User/1000000").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.user.getUser(1000000, {
            entry: "478ae1234",
        });
        expect(response).toEqual({
            Access: [
                {
                    roleLabel: "customers",
                    roleValue: true,
                },
            ],
            AdditionalData: "AdditionalData",
            createdAt: "2022-07-01T15:00:01Z",
            Email: "example@email.com",
            language: "en",
            lastAccess: "2022-07-01T15:00:01Z",
            Name: "Sean Smith",
            Phone: "5555555555",
            Scope: [
                {
                    orgEntry: "pilgrim-planner",
                    orgId: 123,
                    orgType: 0,
                },
            ],
            snData: "snData",
            snIdentifier: "snIdentifier",
            snProvider: "google",
            timeZone: -5,
            userId: 1000000,
            UsrMFA: false,
            UsrMFAMode: 0,
            UsrStatus: 1,
        });
    });

    test("GetUser (c707a31f)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/User/1000000").respondWith().statusCode(400).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.user.getUser(1000000);
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("GetUser (1ccf4baf)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/User/1000000").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.user.getUser(1000000);
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("GetUser (953a448b)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/User/1000000").respondWith().statusCode(500).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.user.getUser(1000000);
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("GetUser (13ec7891)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server.mockEndpoint().get("/User/1000000").respondWith().statusCode(503).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.user.getUser(1000000);
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("LogoutUser (43cc8154)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: true, responseText: "Success" };
        server.mockEndpoint().get("/User/authlogout").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.user.logoutUser();
        expect(response).toEqual({
            isSuccess: true,
            responseText: "Success",
        });
    });

    test("LogoutUser (c60dd33b)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/User/authlogout").respondWith().statusCode(400).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.user.logoutUser();
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("LogoutUser (1e230aeb)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/User/authlogout").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.user.logoutUser();
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("LogoutUser (b3843b57)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/User/authlogout").respondWith().statusCode(500).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.user.logoutUser();
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("LogoutUser (e5d1eb2d)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server.mockEndpoint().get("/User/authlogout").respondWith().statusCode(503).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.user.logoutUser();
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("ResendMFACode (704dc1d7)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            isSuccess: true,
            mfa: false,
            mfaMode: "email",
            mfaValidationCode: "50-2E-4A-16-93-0E-41-41-07-EE-22-B6-00-99-00-99",
            responseData: "g**.com",
            responseText: "Success",
        };
        server
            .mockEndpoint()
            .post("/User/resendmfa/usrname/Entry/1")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.user.resendMfaCode("Entry", 1, "usrname");
        expect(response).toEqual({
            isSuccess: true,
            mfa: false,
            mfaMode: "email",
            mfaValidationCode: "50-2E-4A-16-93-0E-41-41-07-EE-22-B6-00-99-00-99",
            responseData: "g**.com",
            responseText: "Success",
        });
    });

    test("ResendMFACode (c4b5161c)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/User/resendmfa/usrname/Entry/1")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.user.resendMfaCode("Entry", 1, "usrname");
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("ResendMFACode (41233f24)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/User/resendmfa/usrname/Entry/1")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.user.resendMfaCode("Entry", 1, "usrname");
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("ResendMFACode (eb8d9c18)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/User/resendmfa/usrname/Entry/1")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.user.resendMfaCode("Entry", 1, "usrname");
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("ResendMFACode (c9e81fee)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .post("/User/resendmfa/usrname/Entry/1")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.user.resendMfaCode("Entry", 1, "usrname");
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("ValidateMfaUser (e0c11ae)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            inactiveTokenTime: 31,
            isSuccess: true,
            remaining: 120,
            responseData: "u.fPLVSzFv1gZpHl......",
            responseText: "Success",
        };
        server
            .mockEndpoint()
            .post("/User/mfa")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.user.validateMfaUser();
        expect(response).toEqual({
            inactiveTokenTime: 31,
            isSuccess: true,
            remaining: 120,
            responseData: "u.fPLVSzFv1gZpHl......",
            responseText: "Success",
        });
    });

    test("ValidateMfaUser (e4222fb4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { mfaCode: undefined, mfaValidationCode: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/User/mfa")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.user.validateMfaUser({
                mfaCode: undefined,
                mfaValidationCode: undefined,
            });
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("ValidateMfaUser (e39be4dc)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { mfaCode: undefined, mfaValidationCode: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/User/mfa")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.user.validateMfaUser({
                mfaCode: undefined,
                mfaValidationCode: undefined,
            });
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("ValidateMfaUser (f76f1ed0)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { mfaCode: undefined, mfaValidationCode: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/User/mfa")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.user.validateMfaUser({
                mfaCode: undefined,
                mfaValidationCode: undefined,
            });
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("ValidateMfaUser (c18e1776)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { mfaCode: undefined, mfaValidationCode: undefined };
        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .post("/User/mfa")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.user.validateMfaUser({
                mfaCode: undefined,
                mfaValidationCode: undefined,
            });
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });
});
