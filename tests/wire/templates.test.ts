/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import * as Payabli from "../../src/api/index";
import { PayabliClient } from "../../src/Client";

describe("Templates", () => {
    test("AddTemplate (General success response example for template operations.)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { isSuccess: true, responseCode: 1, responseData: 3625, responseText: "Success" };
        server
            .mockEndpoint()
            .post("/Templates/123")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.templates.addTemplate(123, {});
        expect(response).toEqual({
            isSuccess: true,
            responseCode: 1,
            responseData: 3625,
            responseText: "Success",
        });
    });

    test("AddTemplate (f7b7828c)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            orgId: undefined,
            pricingId: undefined,
            templateCode: undefined,
            templateContent: undefined,
            templateDescription: undefined,
            templateName: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/Templates/1")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.templates.addTemplate(1, {
                orgId: undefined,
                pricingId: undefined,
                templateCode: undefined,
                templateContent: undefined,
                templateDescription: undefined,
                templateName: undefined,
            });
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("AddTemplate (9d6d7894)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            orgId: undefined,
            pricingId: undefined,
            templateCode: undefined,
            templateContent: undefined,
            templateDescription: undefined,
            templateName: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/Templates/1")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.templates.addTemplate(1, {
                orgId: undefined,
                pricingId: undefined,
                templateCode: undefined,
                templateContent: undefined,
                templateDescription: undefined,
                templateName: undefined,
            });
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("AddTemplate (ff062888)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            orgId: undefined,
            pricingId: undefined,
            templateCode: undefined,
            templateContent: undefined,
            templateDescription: undefined,
            templateName: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/Templates/1")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.templates.addTemplate(1, {
                orgId: undefined,
                pricingId: undefined,
                templateCode: undefined,
                templateContent: undefined,
                templateDescription: undefined,
                templateName: undefined,
            });
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("AddTemplate (7e4ddabe)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            orgId: undefined,
            pricingId: undefined,
            templateCode: undefined,
            templateContent: undefined,
            templateDescription: undefined,
            templateName: undefined,
        };
        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .post("/Templates/1")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.templates.addTemplate(1, {
                orgId: undefined,
                pricingId: undefined,
                templateCode: undefined,
                templateContent: undefined,
                templateDescription: undefined,
                templateName: undefined,
            });
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("DeleteTemplate (General success response example for template operations.)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: true, responseCode: 1, responseData: 3625, responseText: "Success" };
        server.mockEndpoint().delete("/Templates/80").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.templates.deleteTemplate(80);
        expect(response).toEqual({
            isSuccess: true,
            responseCode: 1,
            responseData: 3625,
            responseText: "Success",
        });
    });

    test("DeleteTemplate (6cd303aa)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().delete("/Templates/1.1").respondWith().statusCode(400).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.templates.deleteTemplate(1.1);
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("DeleteTemplate (81721102)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().delete("/Templates/1.1").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.templates.deleteTemplate(1.1);
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("DeleteTemplate (d3e8be36)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().delete("/Templates/1.1").respondWith().statusCode(500).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.templates.deleteTemplate(1.1);
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("DeleteTemplate (da2f7650)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server.mockEndpoint().delete("/Templates/1.1").respondWith().statusCode(503).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.templates.deleteTemplate(1.1);
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("getlinkTemplate (1f61c97d)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { responseData: "34", responseText: "Success" };
        server
            .mockEndpoint()
            .get("/Templates/getlink/80/true")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.templates.getlinkTemplate(true, 80);
        expect(response).toEqual({
            responseData: "34",
            responseText: "Success",
        });
    });

    test("getlinkTemplate (edcf44ed)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Templates/getlink/1.1/true")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.templates.getlinkTemplate(true, 1.1);
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("getlinkTemplate (f84e22dd)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Templates/getlink/1.1/true")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.templates.getlinkTemplate(true, 1.1);
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("getlinkTemplate (e89252c9)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Templates/getlink/1.1/true")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.templates.getlinkTemplate(true, 1.1);
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("getlinkTemplate (a45f9023)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .get("/Templates/getlink/1.1/true")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.templates.getlinkTemplate(true, 1.1);
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("getTemplate (7c4b4626)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            addPrice: true,
            boardingLinks: [
                {
                    acceptOauth: false,
                    acceptRegister: false,
                    entryAttributes: "entryAttributes",
                    id: 91,
                    lastUpdated: "2022-07-01T15:00:01Z",
                    orgParentName: "PropertyManager Pro",
                    referenceName: "payabli-00710",
                    referenceTemplateId: 1830,
                    templateCode: "templateCode",
                    templateName: "SMB",
                },
            ],
            createdAt: "2022-07-01T15:00:01Z",
            idTemplate: 1000000,
            isRoot: false,
            orgParentName: "PropertyManager Pro",
            recipientEmailNotification: true,
            resumable: false,
            templateCode: "templateCode",
            templateContent: {
                businessData: { visible: true },
                documentsData: {
                    minimumDocuments: 1,
                    subFooter: "subFooter",
                    subHeader: "subHeader",
                    uploadDocuments: true,
                    visible: true,
                },
                ownershipData: {
                    multipleContacts: true,
                    multipleOwners: true,
                    subFooter: "subFooter",
                    subHeader: "subHeader",
                    visible: true,
                },
                processingData: { subFooter: "subFooter", subHeader: "subHeader", visible: true },
                salesData: { salesCode: "salesCode", salesCRM: "salesCRM" },
                servicesData: { subFooter: "subFooter", subHeader: "subHeader", visible: true },
                underwritingData: { method: "automatic", policyId: "J-itEyD6A7y5S5yYFjxOrb" },
            },
            templateDescription: "templateDescription",
            templateTitle: "templateTitle",
            usedBy: 1,
        };
        server.mockEndpoint().get("/Templates/get/80").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.templates.getTemplate(80);
        expect(response).toEqual({
            addPrice: true,
            boardingLinks: [
                {
                    acceptOauth: false,
                    acceptRegister: false,
                    entryAttributes: "entryAttributes",
                    id: 91,
                    lastUpdated: "2022-07-01T15:00:01Z",
                    orgParentName: "PropertyManager Pro",
                    referenceName: "payabli-00710",
                    referenceTemplateId: 1830,
                    templateCode: "templateCode",
                    templateName: "SMB",
                },
            ],
            createdAt: "2022-07-01T15:00:01Z",
            idTemplate: 1000000,
            isRoot: false,
            orgParentName: "PropertyManager Pro",
            recipientEmailNotification: true,
            resumable: false,
            templateCode: "templateCode",
            templateContent: {
                businessData: {
                    visible: true,
                },
                documentsData: {
                    minimumDocuments: 1,
                    subFooter: "subFooter",
                    subHeader: "subHeader",
                    uploadDocuments: true,
                    visible: true,
                },
                ownershipData: {
                    multipleContacts: true,
                    multipleOwners: true,
                    subFooter: "subFooter",
                    subHeader: "subHeader",
                    visible: true,
                },
                processingData: {
                    subFooter: "subFooter",
                    subHeader: "subHeader",
                    visible: true,
                },
                salesData: {
                    salesCode: "salesCode",
                    salesCRM: "salesCRM",
                },
                servicesData: {
                    subFooter: "subFooter",
                    subHeader: "subHeader",
                    visible: true,
                },
                underwritingData: {
                    method: "automatic",
                    policyId: "J-itEyD6A7y5S5yYFjxOrb",
                },
            },
            templateDescription: "templateDescription",
            templateTitle: "templateTitle",
            usedBy: 1,
        });
    });

    test("getTemplate (6cd303aa)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/Templates/get/1.1").respondWith().statusCode(400).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.templates.getTemplate(1.1);
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("getTemplate (81721102)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/Templates/get/1.1").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.templates.getTemplate(1.1);
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("getTemplate (d3e8be36)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/Templates/get/1.1").respondWith().statusCode(500).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.templates.getTemplate(1.1);
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("getTemplate (da2f7650)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server.mockEndpoint().get("/Templates/get/1.1").respondWith().statusCode(503).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.templates.getTemplate(1.1);
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("ListTemplates (45b50dfb)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            records: [
                {
                    addPrice: true,
                    boardingLinks: [{ id: 91 }],
                    createdAt: "2022-07-01T15:00:01Z",
                    idTemplate: 1000000,
                    isRoot: false,
                    orgParentName: "PropertyManager Pro",
                    recipientEmailNotification: true,
                    resumable: false,
                    templateCode: "templateCode",
                    templateDescription: "templateDescription",
                    templateTitle: "templateTitle",
                    usedBy: 1,
                },
            ],
            summary: {
                pageIdentifier: "null",
                pageSize: 20,
                totalAmount: 77.22,
                totalNetAmount: 77.22,
                totalPages: 2,
                totalRecords: 2,
            },
        };
        server
            .mockEndpoint()
            .get("/Query/templates/123")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.templates.listTemplates(123, {
            fromRecord: 251,
            limitRecord: 0,
            sortBy: "desc(field_name)",
        });
        expect(response).toEqual({
            records: [
                {
                    addPrice: true,
                    boardingLinks: [
                        {
                            id: 91,
                        },
                    ],
                    createdAt: "2022-07-01T15:00:01Z",
                    idTemplate: 1000000,
                    isRoot: false,
                    orgParentName: "PropertyManager Pro",
                    recipientEmailNotification: true,
                    resumable: false,
                    templateCode: "templateCode",
                    templateDescription: "templateDescription",
                    templateTitle: "templateTitle",
                    usedBy: 1,
                },
            ],
            summary: {
                pageIdentifier: "null",
                pageSize: 20,
                totalAmount: 77.22,
                totalNetAmount: 77.22,
                totalPages: 2,
                totalRecords: 2,
            },
        });
    });

    test("ListTemplates (fdb69624)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/Query/templates/1").respondWith().statusCode(400).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.templates.listTemplates(1);
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("ListTemplates (22cda34c)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/Query/templates/1").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.templates.listTemplates(1);
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("ListTemplates (100f5d00)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/Query/templates/1").respondWith().statusCode(500).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.templates.listTemplates(1);
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("ListTemplates (d335cac6)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server.mockEndpoint().get("/Query/templates/1").respondWith().statusCode(503).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.templates.listTemplates(1);
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("UpdateTemplate (General success response example for template operations.)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { isSuccess: true, responseCode: 1, responseData: 3625, responseText: "Success" };
        server
            .mockEndpoint()
            .put("/Templates/80")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.templates.updateTemplate(80, {});
        expect(response).toEqual({
            isSuccess: true,
            responseCode: 1,
            responseData: 3625,
            responseText: "Success",
        });
    });

    test("UpdateTemplate (e6668dae)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            orgId: undefined,
            pricingId: undefined,
            templateCode: undefined,
            templateContent: undefined,
            templateDescription: undefined,
            templateName: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/Templates/1.1")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.templates.updateTemplate(1.1, {
                orgId: undefined,
                pricingId: undefined,
                templateCode: undefined,
                templateContent: undefined,
                templateDescription: undefined,
                templateName: undefined,
            });
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("UpdateTemplate (7c678936)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            orgId: undefined,
            pricingId: undefined,
            templateCode: undefined,
            templateContent: undefined,
            templateDescription: undefined,
            templateName: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/Templates/1.1")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.templates.updateTemplate(1.1, {
                orgId: undefined,
                pricingId: undefined,
                templateCode: undefined,
                templateContent: undefined,
                templateDescription: undefined,
                templateName: undefined,
            });
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("UpdateTemplate (bea5f47a)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            orgId: undefined,
            pricingId: undefined,
            templateCode: undefined,
            templateContent: undefined,
            templateDescription: undefined,
            templateName: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/Templates/1.1")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.templates.updateTemplate(1.1, {
                orgId: undefined,
                pricingId: undefined,
                templateCode: undefined,
                templateContent: undefined,
                templateDescription: undefined,
                templateName: undefined,
            });
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("UpdateTemplate (6829e834)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            orgId: undefined,
            pricingId: undefined,
            templateCode: undefined,
            templateContent: undefined,
            templateDescription: undefined,
            templateName: undefined,
        };
        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .put("/Templates/1.1")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.templates.updateTemplate(1.1, {
                orgId: undefined,
                pricingId: undefined,
                templateCode: undefined,
                templateContent: undefined,
                templateDescription: undefined,
                templateName: undefined,
            });
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });
});
