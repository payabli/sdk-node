/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { PayabliClient } from "../../src/Client";
import * as Payabli from "../../src/api/index";

describe("Boarding", () => {
    test("AddApplication (PayIn)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            services: {
                ach: {},
                card: { acceptAmex: true, acceptDiscover: true, acceptMastercard: true, acceptVisa: true },
            },
            annualRevenue: 1000,
            averageBillSize: "500",
            averageMonthlyBill: "5650",
            avgmonthly: 1000,
            baddress: "123 Walnut Street",
            baddress1: "Suite 103",
            bankData: {},
            bcity: "New Vegas",
            bcountry: "US",
            binperson: 60,
            binphone: 20,
            binweb: 20,
            bstate: "FL",
            bsummary: "Brick and mortar store that sells office supplies",
            btype: "Limited Liability Company",
            bzip: "33000",
            contacts: [
                {
                    contactEmail: "herman@hermanscoatings.com",
                    contactName: "Herman Martinez",
                    contactPhone: "3055550000",
                    contactTitle: "Owner",
                },
            ],
            creditLimit: "creditLimit",
            dbaName: "Sunshine Gutters",
            ein: "123456789",
            faxnumber: "1234567890",
            highticketamt: 1000,
            legalName: "Sunshine Services, LLC",
            license: "2222222FFG",
            licstate: "CA",
            maddress: "123 Walnut Street",
            maddress1: "STE 900",
            mcc: "7777",
            mcity: "Johnson City",
            mcountry: "US",
            mstate: "TN",
            mzip: "37615",
            orgId: 123,
            ownership: [
                {
                    oaddress: "33 North St",
                    ocity: "Any City",
                    ocountry: "US",
                    odriverstate: "CA",
                    ostate: "CA",
                    ownerdob: "01/01/1990",
                    ownerdriver: "CA6677778",
                    owneremail: "test@email.com",
                    ownername: "John Smith",
                    ownerpercent: 100,
                    ownerphone1: "555888111",
                    ownerphone2: "555888111",
                    ownerssn: "123456789",
                    ownertitle: "CEO",
                    ozip: "55555",
                },
            ],
            phonenumber: "1234567890",
            processingRegion: "US",
            recipientEmail: "josephray@example.com",
            recipientEmailNotification: true,
            resumable: true,
            signer: {
                address: "33 North St",
                address1: "STE 900",
                city: "Bristol",
                country: "US",
                dob: "01/01/1976",
                email: "test@email.com",
                name: "John Smith",
                phone: "555888111",
                ssn: "123456789",
                state: "TN",
                zip: "55555",
                pciAttestation: true,
                signedDocumentReference: "https://example.com/signed-document.pdf",
                attestationDate: "04/20/2025",
                signDate: "04/20/2025",
                additionalData:
                    '{"deviceId":"499585-389fj484-3jcj8hj3","session":"fifji4-fiu443-fn4843","timeWithCompany":"6 Years"}',
            },
            startdate: "01/01/1990",
            taxFillName: "Sunshine LLC",
            templateId: 22,
            ticketamt: 1000,
            website: "www.example.com",
            whenCharged: "When Service Provided",
            whenDelivered: "Over 30 Days",
            whenProvided: "30 Days or Less",
            whenRefunded: "30 Days or Less",
        };
        const rawResponseBody = { isSuccess: true, responseCode: 1, responseData: 3625, responseText: "Success" };
        server
            .mockEndpoint()
            .post("/Boarding/app")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.boarding.addApplication({
            services: {
                ach: {},
                card: {
                    acceptAmex: true,
                    acceptDiscover: true,
                    acceptMastercard: true,
                    acceptVisa: true,
                },
            },
            annualRevenue: 1000,
            averageBillSize: "500",
            averageMonthlyBill: "5650",
            avgmonthly: 1000,
            baddress: "123 Walnut Street",
            baddress1: "Suite 103",
            bankData: {},
            bcity: "New Vegas",
            bcountry: "US",
            binperson: 60,
            binphone: 20,
            binweb: 20,
            bstate: "FL",
            bsummary: "Brick and mortar store that sells office supplies",
            btype: "Limited Liability Company",
            bzip: "33000",
            contacts: [
                {
                    contactEmail: "herman@hermanscoatings.com",
                    contactName: "Herman Martinez",
                    contactPhone: "3055550000",
                    contactTitle: "Owner",
                },
            ],
            creditLimit: "creditLimit",
            dbaName: "Sunshine Gutters",
            ein: "123456789",
            faxnumber: "1234567890",
            highticketamt: 1000,
            legalName: "Sunshine Services, LLC",
            license: "2222222FFG",
            licstate: "CA",
            maddress: "123 Walnut Street",
            maddress1: "STE 900",
            mcc: "7777",
            mcity: "Johnson City",
            mcountry: "US",
            mstate: "TN",
            mzip: "37615",
            orgId: 123,
            ownership: [
                {
                    oaddress: "33 North St",
                    ocity: "Any City",
                    ocountry: "US",
                    odriverstate: "CA",
                    ostate: "CA",
                    ownerdob: "01/01/1990",
                    ownerdriver: "CA6677778",
                    owneremail: "test@email.com",
                    ownername: "John Smith",
                    ownerpercent: 100,
                    ownerphone1: "555888111",
                    ownerphone2: "555888111",
                    ownerssn: "123456789",
                    ownertitle: "CEO",
                    ozip: "55555",
                },
            ],
            phonenumber: "1234567890",
            processingRegion: "US",
            recipientEmail: "josephray@example.com",
            recipientEmailNotification: true,
            resumable: true,
            signer: {
                address: "33 North St",
                address1: "STE 900",
                city: "Bristol",
                country: "US",
                dob: "01/01/1976",
                email: "test@email.com",
                name: "John Smith",
                phone: "555888111",
                ssn: "123456789",
                state: "TN",
                zip: "55555",
                pciAttestation: true,
                signedDocumentReference: "https://example.com/signed-document.pdf",
                attestationDate: "04/20/2025",
                signDate: "04/20/2025",
                additionalData:
                    '{"deviceId":"499585-389fj484-3jcj8hj3","session":"fifji4-fiu443-fn4843","timeWithCompany":"6 Years"}',
            },
            startdate: "01/01/1990",
            taxFillName: "Sunshine LLC",
            templateId: 22,
            ticketamt: 1000,
            website: "www.example.com",
            whenCharged: "When Service Provided",
            whenDelivered: "Over 30 Days",
            whenProvided: "30 Days or Less",
            whenRefunded: "30 Days or Less",
        });
        expect(response).toEqual({
            isSuccess: true,
            responseCode: 1,
            responseData: 3625,
            responseText: "Success",
        });
    });

    test("AddApplication (ManagedPayout)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            annualRevenue: 750000,
            baddress: "789 Industrial Parkway",
            baddress1: "Unit 12",
            bankData: [
                {
                    accountNumber: "1XXXXXX3100",
                    bankAccountFunction: 1,
                    bankAccountHolderName: "Herman's Coatings LLC",
                    bankAccountHolderType: "Business",
                    bankName: "First Miami Bank",
                    nickname: "Withdrawal Account",
                    routingAccount: "123123123",
                    typeAccount: "Checking",
                    accountId: "123-456",
                },
                {
                    accountNumber: "1XXXXXX3200",
                    bankAccountFunction: 0,
                    bankAccountHolderName: "Herman's Coatings LLC",
                    bankAccountHolderType: "Business",
                    bankName: "First Miami Bank",
                    nickname: "Deposit Account",
                    routingAccount: "123123123",
                    typeAccount: "Checking",
                    accountId: "123-789",
                },
                {
                    accountNumber: "1XXXXXX3123",
                    bankAccountFunction: 3,
                    bankAccountHolderName: "Herman's Coatings LLC",
                    bankAccountHolderType: "Business",
                    bankName: "First Miami Bank",
                    nickname: "Remittance Account",
                    routingAccount: "123123123",
                    typeAccount: "Checking",
                    accountId: "123-100",
                },
            ],
            bcity: "Miami",
            bcountry: "US",
            bstate: "FL",
            bsummary: "Commercial and industrial coating services, including protective and decorative coatings",
            btype: "Limited Liability Company",
            bzip: "33101",
            contacts: [
                {
                    contactEmail: "herman@hermanscoatings.com",
                    contactName: "Herman Martinez",
                    contactPhone: "3055550000",
                    contactTitle: "Owner",
                },
            ],
            dbaname: "Herman's Coatings",
            ein: "123456789",
            faxnumber: "3055550001",
            legalname: "Herman's Coatings LLC",
            license: "FL123456",
            licstate: "FL",
            maddress: "789 Industrial Parkway",
            maddress1: "Unit 12",
            mcc: "1799",
            mcity: "Miami",
            mcountry: "US",
            mstate: "FL",
            mzip: "33101",
            orgId: 123,
            ownership: [
                {
                    oaddress: "123 Palm Avenue",
                    ocity: "Miami",
                    ocountry: "US",
                    odriverstate: "FL",
                    ostate: "FL",
                    ownerdob: "05/15/1980",
                    ownerdriver: "FL789456",
                    owneremail: "herman@hermanscoatings.com",
                    ownername: "Herman Martinez",
                    ownerpercent: 100,
                    ownerphone1: "3055550000",
                    ownerphone2: "3055550002",
                    ownerssn: "123456789",
                    ownertitle: "Owner",
                    ozip: "33102",
                },
            ],
            phonenumber: "3055550000",
            recipientEmail: "herman@hermanscoatings.com",
            recipientEmailNotification: true,
            resumable: true,
            signer: {
                address: "33 North St",
                address1: "STE 900",
                city: "Bristol",
                country: "US",
                dob: "01/01/1976",
                email: "test@email.com",
                name: "John Smith",
                phone: "555888111",
                ssn: "123456789",
                state: "TN",
                zip: "55555",
                pciAttestation: true,
                signedDocumentReference: "https://example.com/signed-document.pdf",
                attestationDate: "04/20/2025",
                signDate: "04/20/2025",
                additionalData:
                    '{"deviceId":"499585-389fj484-3jcj8hj3","session":"fifji4-fiu443-fn4843","timeWithCompany":"6 Years"}',
            },
            startdate: "01/01/2015",
            taxfillname: "Herman's Coatings LLC",
            templateId: 22,
            website: "www.hermanscoatings.com",
        };
        const rawResponseBody = { isSuccess: true, responseCode: 1, responseData: 3625, responseText: "Success" };
        server
            .mockEndpoint()
            .post("/Boarding/app")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.boarding.addApplication({
            annualRevenue: 750000,
            baddress: "789 Industrial Parkway",
            baddress1: "Unit 12",
            bankData: [
                {
                    accountNumber: "1XXXXXX3100",
                    bankAccountFunction: 1,
                    bankAccountHolderName: "Herman's Coatings LLC",
                    bankAccountHolderType: "Business",
                    bankName: "First Miami Bank",
                    nickname: "Withdrawal Account",
                    routingAccount: "123123123",
                    typeAccount: "Checking",
                    accountId: "123-456",
                },
                {
                    accountNumber: "1XXXXXX3200",
                    bankAccountFunction: 0,
                    bankAccountHolderName: "Herman's Coatings LLC",
                    bankAccountHolderType: "Business",
                    bankName: "First Miami Bank",
                    nickname: "Deposit Account",
                    routingAccount: "123123123",
                    typeAccount: "Checking",
                    accountId: "123-789",
                },
                {
                    accountNumber: "1XXXXXX3123",
                    bankAccountFunction: 3,
                    bankAccountHolderName: "Herman's Coatings LLC",
                    bankAccountHolderType: "Business",
                    bankName: "First Miami Bank",
                    nickname: "Remittance Account",
                    routingAccount: "123123123",
                    typeAccount: "Checking",
                    accountId: "123-100",
                },
            ],
            bcity: "Miami",
            bcountry: "US",
            bstate: "FL",
            bsummary: "Commercial and industrial coating services, including protective and decorative coatings",
            btype: "Limited Liability Company",
            bzip: "33101",
            contacts: [
                {
                    contactEmail: "herman@hermanscoatings.com",
                    contactName: "Herman Martinez",
                    contactPhone: "3055550000",
                    contactTitle: "Owner",
                },
            ],
            dbaname: "Herman's Coatings",
            ein: "123456789",
            faxnumber: "3055550001",
            legalname: "Herman's Coatings LLC",
            license: "FL123456",
            licstate: "FL",
            maddress: "789 Industrial Parkway",
            maddress1: "Unit 12",
            mcc: "1799",
            mcity: "Miami",
            mcountry: "US",
            mstate: "FL",
            mzip: "33101",
            orgId: 123,
            ownership: [
                {
                    oaddress: "123 Palm Avenue",
                    ocity: "Miami",
                    ocountry: "US",
                    odriverstate: "FL",
                    ostate: "FL",
                    ownerdob: "05/15/1980",
                    ownerdriver: "FL789456",
                    owneremail: "herman@hermanscoatings.com",
                    ownername: "Herman Martinez",
                    ownerpercent: 100,
                    ownerphone1: "3055550000",
                    ownerphone2: "3055550002",
                    ownerssn: "123456789",
                    ownertitle: "Owner",
                    ozip: "33102",
                },
            ],
            phonenumber: "3055550000",
            recipientEmail: "herman@hermanscoatings.com",
            recipientEmailNotification: true,
            resumable: true,
            signer: {
                address: "33 North St",
                address1: "STE 900",
                city: "Bristol",
                country: "US",
                dob: "01/01/1976",
                email: "test@email.com",
                name: "John Smith",
                phone: "555888111",
                ssn: "123456789",
                state: "TN",
                zip: "55555",
                pciAttestation: true,
                signedDocumentReference: "https://example.com/signed-document.pdf",
                attestationDate: "04/20/2025",
                signDate: "04/20/2025",
                additionalData:
                    '{"deviceId":"499585-389fj484-3jcj8hj3","session":"fifji4-fiu443-fn4843","timeWithCompany":"6 Years"}',
            },
            startdate: "01/01/2015",
            taxfillname: "Herman's Coatings LLC",
            templateId: 22,
            website: "www.hermanscoatings.com",
        });
        expect(response).toEqual({
            isSuccess: true,
            responseCode: 1,
            responseData: 3625,
            responseText: "Success",
        });
    });

    test("AddApplication (OnDemandPayout)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            services: {
                ach: { acceptCCD: true, acceptPPD: true, acceptWeb: true },
                card: { acceptAmex: true, acceptDiscover: true, acceptMastercard: true, acceptVisa: true },
                odp: {
                    allowAch: true,
                    allowChecks: true,
                    allowVCard: true,
                    processing_region: "US",
                    processor: "tsys",
                    issuerNetworkSettingsId: "12345678901234",
                },
            },
            annualRevenue: 750000,
            baddress: "789 Industrial Parkway",
            baddress1: "Unit 12",
            bankData: [
                {
                    accountNumber: "1XXXXXX3100",
                    bankAccountFunction: 1,
                    bankAccountHolderName: "Herman's Coatings LLC",
                    bankAccountHolderType: "Business",
                    bankName: "First Miami Bank",
                    nickname: "Withdrawal Account",
                    routingAccount: "123123123",
                    typeAccount: "Checking",
                    accountId: "333-789",
                },
                {
                    accountNumber: "1XXXXXX3200",
                    bankAccountFunction: 0,
                    bankAccountHolderName: "Herman's Coatings LLC",
                    bankAccountHolderType: "Business",
                    bankName: "First Miami Bank",
                    nickname: "Deposit Account",
                    routingAccount: "123123123",
                    typeAccount: "Checking",
                    accountId: "333-234",
                },
                {
                    accountNumber: "1XXXXXX3123",
                    bankAccountFunction: 3,
                    bankAccountHolderName: "Herman's Coatings LLC",
                    bankAccountHolderType: "Business",
                    bankName: "First Miami Bank",
                    nickname: "Remittance Account",
                    routingAccount: "123123123",
                    typeAccount: "Checking",
                    accountId: "333-567",
                },
            ],
            bcity: "Miami",
            bcountry: "US",
            bstate: "FL",
            bsummary: "Commercial and industrial coating services, including protective and decorative coatings",
            btype: "Limited Liability Company",
            bzip: "33101",
            contacts: [
                {
                    contactEmail: "herman@hermanscoatings.com",
                    contactName: "Herman Martinez",
                    contactPhone: "3055550000",
                    contactTitle: "Owner",
                },
            ],
            dbaname: "Herman's Coatings",
            ein: "123456789",
            faxnumber: "3055550001",
            highticketamt: 15000,
            legalname: "Herman's Coatings LLC",
            license: "FL123456",
            licstate: "FL",
            maddress: "789 Industrial Parkway",
            maddress1: "Unit 12",
            mcc: "1799",
            mcity: "Miami",
            mcountry: "US",
            mstate: "FL",
            mzip: "33101",
            orgId: 123,
            ownership: [
                {
                    oaddress: "123 Palm Avenue",
                    ocity: "Miami",
                    ocountry: "US",
                    odriverstate: "FL",
                    ostate: "FL",
                    ownerdob: "05/15/1980",
                    ownerdriver: "FL789456",
                    owneremail: "herman@hermanscoatings.com",
                    ownername: "Herman Martinez",
                    ownerpercent: 100,
                    ownerphone1: "3055550000",
                    ownerphone2: "3055550002",
                    ownerssn: "123456789",
                    ownertitle: "Owner",
                    ozip: "33102",
                },
            ],
            payoutAverageMonthlyVolume: 50000,
            payoutAverageTicketAmount: 3500,
            payoutCreditLimit: 25000,
            payoutHighTicketAmount: 15000,
            phonenumber: "3055550000",
            recipientEmail: "herman@hermanscoatings.com",
            recipientEmailNotification: true,
            resumable: true,
            signer: {
                address: "33 North St",
                address1: "STE 900",
                city: "Bristol",
                country: "US",
                dob: "01/01/1976",
                email: "test@email.com",
                name: "John Smith",
                phone: "555888111",
                ssn: "123456789",
                state: "TN",
                zip: "55555",
                pciAttestation: true,
                signedDocumentReference: "https://example.com/signed-document.pdf",
                attestationDate: "04/20/2025",
                signDate: "04/20/2025",
                additionalData:
                    '{"deviceId":"499585-389fj484-3jcj8hj3","session":"fifji4-fiu443-fn4843","timeWithCompany":"6 Years"}',
            },
            startdate: "01/01/2015",
            taxfillname: "Herman's Coatings LLC",
            templateId: 22,
            website: "www.hermanscoatings.com",
        };
        const rawResponseBody = { isSuccess: true, responseCode: 1, responseData: 3625, responseText: "Success" };
        server
            .mockEndpoint()
            .post("/Boarding/app")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.boarding.addApplication({
            services: {
                ach: {
                    acceptCCD: true,
                    acceptPPD: true,
                    acceptWeb: true,
                },
                card: {
                    acceptAmex: true,
                    acceptDiscover: true,
                    acceptMastercard: true,
                    acceptVisa: true,
                },
                odp: {
                    allowAch: true,
                    allowChecks: true,
                    allowVCard: true,
                    processing_region: "US",
                    processor: "tsys",
                    issuerNetworkSettingsId: "12345678901234",
                },
            },
            annualRevenue: 750000,
            baddress: "789 Industrial Parkway",
            baddress1: "Unit 12",
            bankData: [
                {
                    accountNumber: "1XXXXXX3100",
                    bankAccountFunction: 1,
                    bankAccountHolderName: "Herman's Coatings LLC",
                    bankAccountHolderType: "Business",
                    bankName: "First Miami Bank",
                    nickname: "Withdrawal Account",
                    routingAccount: "123123123",
                    typeAccount: "Checking",
                    accountId: "333-789",
                },
                {
                    accountNumber: "1XXXXXX3200",
                    bankAccountFunction: 0,
                    bankAccountHolderName: "Herman's Coatings LLC",
                    bankAccountHolderType: "Business",
                    bankName: "First Miami Bank",
                    nickname: "Deposit Account",
                    routingAccount: "123123123",
                    typeAccount: "Checking",
                    accountId: "333-234",
                },
                {
                    accountNumber: "1XXXXXX3123",
                    bankAccountFunction: 3,
                    bankAccountHolderName: "Herman's Coatings LLC",
                    bankAccountHolderType: "Business",
                    bankName: "First Miami Bank",
                    nickname: "Remittance Account",
                    routingAccount: "123123123",
                    typeAccount: "Checking",
                    accountId: "333-567",
                },
            ],
            bcity: "Miami",
            bcountry: "US",
            bstate: "FL",
            bsummary: "Commercial and industrial coating services, including protective and decorative coatings",
            btype: "Limited Liability Company",
            bzip: "33101",
            contacts: [
                {
                    contactEmail: "herman@hermanscoatings.com",
                    contactName: "Herman Martinez",
                    contactPhone: "3055550000",
                    contactTitle: "Owner",
                },
            ],
            dbaname: "Herman's Coatings",
            ein: "123456789",
            faxnumber: "3055550001",
            highticketamt: 15000,
            legalname: "Herman's Coatings LLC",
            license: "FL123456",
            licstate: "FL",
            maddress: "789 Industrial Parkway",
            maddress1: "Unit 12",
            mcc: "1799",
            mcity: "Miami",
            mcountry: "US",
            mstate: "FL",
            mzip: "33101",
            orgId: 123,
            ownership: [
                {
                    oaddress: "123 Palm Avenue",
                    ocity: "Miami",
                    ocountry: "US",
                    odriverstate: "FL",
                    ostate: "FL",
                    ownerdob: "05/15/1980",
                    ownerdriver: "FL789456",
                    owneremail: "herman@hermanscoatings.com",
                    ownername: "Herman Martinez",
                    ownerpercent: 100,
                    ownerphone1: "3055550000",
                    ownerphone2: "3055550002",
                    ownerssn: "123456789",
                    ownertitle: "Owner",
                    ozip: "33102",
                },
            ],
            payoutAverageMonthlyVolume: 50000,
            payoutAverageTicketAmount: 3500,
            payoutCreditLimit: 25000,
            payoutHighTicketAmount: 15000,
            phonenumber: "3055550000",
            recipientEmail: "herman@hermanscoatings.com",
            recipientEmailNotification: true,
            resumable: true,
            signer: {
                address: "33 North St",
                address1: "STE 900",
                city: "Bristol",
                country: "US",
                dob: "01/01/1976",
                email: "test@email.com",
                name: "John Smith",
                phone: "555888111",
                ssn: "123456789",
                state: "TN",
                zip: "55555",
                pciAttestation: true,
                signedDocumentReference: "https://example.com/signed-document.pdf",
                attestationDate: "04/20/2025",
                signDate: "04/20/2025",
                additionalData:
                    '{"deviceId":"499585-389fj484-3jcj8hj3","session":"fifji4-fiu443-fn4843","timeWithCompany":"6 Years"}',
            },
            startdate: "01/01/2015",
            taxfillname: "Herman's Coatings LLC",
            templateId: 22,
            website: "www.hermanscoatings.com",
        });
        expect(response).toEqual({
            isSuccess: true,
            responseCode: 1,
            responseData: 3625,
            responseText: "Success",
        });
    });

    test("AddApplication (AllFields)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            services: {
                ach: { acceptCCD: true, acceptPPD: true, acceptWeb: true },
                card: { acceptAmex: true, acceptDiscover: true, acceptMastercard: true, acceptVisa: true },
                odp: { allowAch: false, allowChecks: false, allowVCard: false },
            },
            annualRevenue: 750000,
            attachments: [{}, {}],
            baddress: "789 Industrial Parkway",
            baddress1: "Unit 12",
            bankData: [
                {
                    accountNumber: "1XXXXXX3100",
                    bankAccountFunction: 1,
                    bankAccountHolderName: "Herman's Coatings LLC",
                    bankAccountHolderType: "Business",
                    bankName: "First Miami Bank",
                    id: 123,
                    nickname: "Withdrawal Account",
                    routingAccount: "123123123",
                    typeAccount: "Checking",
                    accountId: "123-789",
                },
                {
                    accountNumber: "1XXXXXX3200",
                    bankAccountFunction: 0,
                    bankAccountHolderName: "Herman's Coatings LLC",
                    bankAccountHolderType: "Business",
                    bankName: "First Miami Bank",
                    id: 456,
                    nickname: "Deposit Account",
                    routingAccount: "123123123",
                    typeAccount: "Checking",
                    accountId: "123-456",
                },
                {
                    accountNumber: "1XXXXXX3123",
                    bankAccountFunction: 3,
                    bankAccountHolderName: "Herman's Coatings LLC",
                    bankAccountHolderType: "Business",
                    bankName: "First Miami Bank",
                    id: 987,
                    nickname: "Remittance Account",
                    routingAccount: "123123123",
                    typeAccount: "Checking",
                    accountId: "123-100",
                },
            ],
            bcity: "Miami",
            bcountry: "US",
            boardingLinkId: "bl_123456",
            bstate: "FL",
            bsummary: "Commercial and industrial coating services, including protective and decorative coatings",
            btype: "Limited Liability Company",
            bzip: "33101",
            contacts: [
                {
                    contactEmail: "herman@hermanscoatings.com",
                    contactName: "Herman Martinez",
                    contactPhone: "3055550000",
                    contactTitle: "Owner",
                },
            ],
            dbaname: "Herman's Coatings",
            ein: "123456789",
            faxnumber: "3055550001",
            highticketamt: 15000,
            legalname: "Herman's Coatings LLC",
            license: "FL123456",
            licstate: "FL",
            maddress: "789 Industrial Parkway",
            maddress1: "Unit 12",
            mcc: "1799",
            mcity: "Miami",
            mcountry: "US",
            mstate: "FL",
            mzip: "33101",
            orgId: 123,
            ownership: [
                {
                    oaddress: "123 Palm Avenue",
                    ocity: "Miami",
                    ocountry: "US",
                    odriverstate: "FL",
                    ostate: "FL",
                    ownerdob: "05/15/1980",
                    ownerdriver: "FL789456",
                    owneremail: "herman@hermanscoatings.com",
                    ownername: "Herman Martinez",
                    ownerpercent: 100,
                    ownerphone1: "3055550000",
                    ownerphone2: "3055550002",
                    ownerssn: "123456789",
                    ownertitle: "Owner",
                    ozip: "33102",
                },
            ],
            payoutAverageMonthlyVolume: 50000,
            payoutAverageTicketAmount: 500,
            payoutCreditLimit: 25000,
            payoutHighTicketAmount: 15000,
            phonenumber: "3055550000",
            recipientEmail: "herman@hermanscoatings.com",
            recipientEmailNotification: true,
            resumable: true,
            signer: {
                address: "33 North St",
                address1: "STE 900",
                city: "Bristol",
                country: "US",
                dob: "01/01/1976",
                email: "test@email.com",
                name: "John Smith",
                phone: "555888111",
                ssn: "123456789",
                state: "TN",
                zip: "55555",
                pciAttestation: true,
                signedDocumentReference: "https://example.com/signed-document.pdf",
                attestationDate: "04/20/2025",
                signDate: "04/20/2025",
                additionalData:
                    '{"deviceId":"499585-389fj484-3jcj8hj3","session":"fifji4-fiu443-fn4843","timeWithCompany":"6 Years"}',
            },
            startdate: "01/01/2015",
            taxfillname: "Herman's Coatings LLC",
            templateId: 22,
            website: "www.hermanscoatings.com",
        };
        const rawResponseBody = { isSuccess: true, responseCode: 1, responseData: 3625, responseText: "Success" };
        server
            .mockEndpoint()
            .post("/Boarding/app")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.boarding.addApplication({
            services: {
                ach: {
                    acceptCCD: true,
                    acceptPPD: true,
                    acceptWeb: true,
                },
                card: {
                    acceptAmex: true,
                    acceptDiscover: true,
                    acceptMastercard: true,
                    acceptVisa: true,
                },
                odp: {
                    allowAch: false,
                    allowChecks: false,
                    allowVCard: false,
                },
            },
            annualRevenue: 750000,
            attachments: [{}, {}],
            baddress: "789 Industrial Parkway",
            baddress1: "Unit 12",
            bankData: [
                {
                    accountNumber: "1XXXXXX3100",
                    bankAccountFunction: 1,
                    bankAccountHolderName: "Herman's Coatings LLC",
                    bankAccountHolderType: "Business",
                    bankName: "First Miami Bank",
                    id: 123,
                    nickname: "Withdrawal Account",
                    routingAccount: "123123123",
                    typeAccount: "Checking",
                    accountId: "123-789",
                },
                {
                    accountNumber: "1XXXXXX3200",
                    bankAccountFunction: 0,
                    bankAccountHolderName: "Herman's Coatings LLC",
                    bankAccountHolderType: "Business",
                    bankName: "First Miami Bank",
                    id: 456,
                    nickname: "Deposit Account",
                    routingAccount: "123123123",
                    typeAccount: "Checking",
                    accountId: "123-456",
                },
                {
                    accountNumber: "1XXXXXX3123",
                    bankAccountFunction: 3,
                    bankAccountHolderName: "Herman's Coatings LLC",
                    bankAccountHolderType: "Business",
                    bankName: "First Miami Bank",
                    id: 987,
                    nickname: "Remittance Account",
                    routingAccount: "123123123",
                    typeAccount: "Checking",
                    accountId: "123-100",
                },
            ],
            bcity: "Miami",
            bcountry: "US",
            boardingLinkId: "bl_123456",
            bstate: "FL",
            bsummary: "Commercial and industrial coating services, including protective and decorative coatings",
            btype: "Limited Liability Company",
            bzip: "33101",
            contacts: [
                {
                    contactEmail: "herman@hermanscoatings.com",
                    contactName: "Herman Martinez",
                    contactPhone: "3055550000",
                    contactTitle: "Owner",
                },
            ],
            dbaname: "Herman's Coatings",
            ein: "123456789",
            faxnumber: "3055550001",
            highticketamt: 15000,
            legalname: "Herman's Coatings LLC",
            license: "FL123456",
            licstate: "FL",
            maddress: "789 Industrial Parkway",
            maddress1: "Unit 12",
            mcc: "1799",
            mcity: "Miami",
            mcountry: "US",
            mstate: "FL",
            mzip: "33101",
            orgId: 123,
            ownership: [
                {
                    oaddress: "123 Palm Avenue",
                    ocity: "Miami",
                    ocountry: "US",
                    odriverstate: "FL",
                    ostate: "FL",
                    ownerdob: "05/15/1980",
                    ownerdriver: "FL789456",
                    owneremail: "herman@hermanscoatings.com",
                    ownername: "Herman Martinez",
                    ownerpercent: 100,
                    ownerphone1: "3055550000",
                    ownerphone2: "3055550002",
                    ownerssn: "123456789",
                    ownertitle: "Owner",
                    ozip: "33102",
                },
            ],
            payoutAverageMonthlyVolume: 50000,
            payoutAverageTicketAmount: 500,
            payoutCreditLimit: 25000,
            payoutHighTicketAmount: 15000,
            phonenumber: "3055550000",
            recipientEmail: "herman@hermanscoatings.com",
            recipientEmailNotification: true,
            resumable: true,
            signer: {
                address: "33 North St",
                address1: "STE 900",
                city: "Bristol",
                country: "US",
                dob: "01/01/1976",
                email: "test@email.com",
                name: "John Smith",
                phone: "555888111",
                ssn: "123456789",
                state: "TN",
                zip: "55555",
                pciAttestation: true,
                signedDocumentReference: "https://example.com/signed-document.pdf",
                attestationDate: "04/20/2025",
                signDate: "04/20/2025",
                additionalData:
                    '{"deviceId":"499585-389fj484-3jcj8hj3","session":"fifji4-fiu443-fn4843","timeWithCompany":"6 Years"}',
            },
            startdate: "01/01/2015",
            taxfillname: "Herman's Coatings LLC",
            templateId: 22,
            website: "www.hermanscoatings.com",
        });
        expect(response).toEqual({
            isSuccess: true,
            responseCode: 1,
            responseData: 3625,
            responseText: "Success",
        });
    });

    test("AddApplication (82231016)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            services: {
                ach: { acceptCCD: undefined, acceptPPD: undefined, acceptWeb: undefined },
                card: {
                    acceptAmex: undefined,
                    acceptDiscover: undefined,
                    acceptMastercard: undefined,
                    acceptVisa: undefined,
                },
                odp: undefined,
            },
            annualRevenue: undefined,
            averageBillSize: undefined,
            averageMonthlyBill: undefined,
            avgmonthly: undefined,
            baddress: undefined,
            baddress1: undefined,
            bankData: {
                id: undefined,
                accountId: undefined,
                nickname: undefined,
                bankName: undefined,
                routingAccount: undefined,
                accountNumber: undefined,
                typeAccount: undefined,
                bankAccountHolderName: undefined,
                bankAccountHolderType: undefined,
                bankAccountFunction: undefined,
                verified: undefined,
                status: undefined,
                services: undefined,
            },
            bcity: undefined,
            bcountry: undefined,
            binperson: undefined,
            binphone: undefined,
            binweb: undefined,
            boardingLinkId: undefined,
            bstate: undefined,
            bsummary: undefined,
            btype: undefined,
            bzip: undefined,
            contacts: undefined,
            creditLimit: undefined,
            dbaName: undefined,
            ein: undefined,
            externalpaypointID: undefined,
            faxnumber: undefined,
            highticketamt: undefined,
            legalName: undefined,
            license: undefined,
            licstate: undefined,
            maddress: undefined,
            maddress1: undefined,
            mcc: undefined,
            mcity: undefined,
            mcountry: undefined,
            mstate: undefined,
            mzip: undefined,
            orgId: undefined,
            ownership: undefined,
            phonenumber: "phonenumber",
            processingRegion: "processingRegion",
            recipientEmail: undefined,
            recipientEmailNotification: undefined,
            resumable: undefined,
            signer: {
                name: undefined,
                ssn: undefined,
                dob: undefined,
                phone: undefined,
                email: undefined,
                address: undefined,
                address1: undefined,
                city: undefined,
                country: undefined,
                state: undefined,
                zip: undefined,
                acceptance: undefined,
                signedDocumentReference: undefined,
                pciAttestation: undefined,
                attestationDate: undefined,
                additionalData: undefined,
                signDate: undefined,
            },
            startdate: undefined,
            taxFillName: undefined,
            templateId: undefined,
            ticketamt: undefined,
            website: undefined,
            whenCharged: "When Service Provided",
            whenDelivered: "0-7 Days",
            whenProvided: "30 Days or Less",
            whenRefunded: "Exchange Only",
            additionalData: undefined,
            RepCode: undefined,
            RepName: undefined,
            RepOffice: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/Boarding/app")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.boarding.addApplication({
                services: {
                    ach: {
                        acceptCCD: undefined,
                        acceptPPD: undefined,
                        acceptWeb: undefined,
                    },
                    card: {
                        acceptAmex: undefined,
                        acceptDiscover: undefined,
                        acceptMastercard: undefined,
                        acceptVisa: undefined,
                    },
                    odp: undefined,
                },
                annualRevenue: undefined,
                averageBillSize: undefined,
                averageMonthlyBill: undefined,
                avgmonthly: undefined,
                baddress: undefined,
                baddress1: undefined,
                bankData: {
                    id: undefined,
                    accountId: undefined,
                    nickname: undefined,
                    bankName: undefined,
                    routingAccount: undefined,
                    accountNumber: undefined,
                    typeAccount: undefined,
                    bankAccountHolderName: undefined,
                    bankAccountHolderType: undefined,
                    bankAccountFunction: undefined,
                    verified: undefined,
                    status: undefined,
                    services: undefined,
                },
                bcity: undefined,
                bcountry: undefined,
                binperson: undefined,
                binphone: undefined,
                binweb: undefined,
                boardingLinkId: undefined,
                bstate: undefined,
                bsummary: undefined,
                btype: undefined,
                bzip: undefined,
                contacts: undefined,
                creditLimit: undefined,
                dbaName: undefined,
                ein: undefined,
                externalpaypointID: undefined,
                faxnumber: undefined,
                highticketamt: undefined,
                legalName: undefined,
                license: undefined,
                licstate: undefined,
                maddress: undefined,
                maddress1: undefined,
                mcc: undefined,
                mcity: undefined,
                mcountry: undefined,
                mstate: undefined,
                mzip: undefined,
                orgId: undefined,
                ownership: undefined,
                phonenumber: "phonenumber",
                processingRegion: "processingRegion",
                recipientEmail: undefined,
                recipientEmailNotification: undefined,
                resumable: undefined,
                signer: {
                    name: undefined,
                    ssn: undefined,
                    dob: undefined,
                    phone: undefined,
                    email: undefined,
                    address: undefined,
                    address1: undefined,
                    city: undefined,
                    country: undefined,
                    state: undefined,
                    zip: undefined,
                    acceptance: undefined,
                    signedDocumentReference: undefined,
                    pciAttestation: undefined,
                    attestationDate: undefined,
                    additionalData: undefined,
                    signDate: undefined,
                },
                startdate: undefined,
                taxFillName: undefined,
                templateId: undefined,
                ticketamt: undefined,
                website: undefined,
                whenCharged: "When Service Provided",
                whenDelivered: "0-7 Days",
                whenProvided: "30 Days or Less",
                whenRefunded: "Exchange Only",
                additionalData: undefined,
                RepCode: undefined,
                RepName: undefined,
                RepOffice: undefined,
            });
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("AddApplication (1250be)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            services: {
                ach: { acceptCCD: undefined, acceptPPD: undefined, acceptWeb: undefined },
                card: {
                    acceptAmex: undefined,
                    acceptDiscover: undefined,
                    acceptMastercard: undefined,
                    acceptVisa: undefined,
                },
                odp: undefined,
            },
            annualRevenue: undefined,
            averageBillSize: undefined,
            averageMonthlyBill: undefined,
            avgmonthly: undefined,
            baddress: undefined,
            baddress1: undefined,
            bankData: {
                id: undefined,
                accountId: undefined,
                nickname: undefined,
                bankName: undefined,
                routingAccount: undefined,
                accountNumber: undefined,
                typeAccount: undefined,
                bankAccountHolderName: undefined,
                bankAccountHolderType: undefined,
                bankAccountFunction: undefined,
                verified: undefined,
                status: undefined,
                services: undefined,
            },
            bcity: undefined,
            bcountry: undefined,
            binperson: undefined,
            binphone: undefined,
            binweb: undefined,
            boardingLinkId: undefined,
            bstate: undefined,
            bsummary: undefined,
            btype: undefined,
            bzip: undefined,
            contacts: undefined,
            creditLimit: undefined,
            dbaName: undefined,
            ein: undefined,
            externalpaypointID: undefined,
            faxnumber: undefined,
            highticketamt: undefined,
            legalName: undefined,
            license: undefined,
            licstate: undefined,
            maddress: undefined,
            maddress1: undefined,
            mcc: undefined,
            mcity: undefined,
            mcountry: undefined,
            mstate: undefined,
            mzip: undefined,
            orgId: undefined,
            ownership: undefined,
            phonenumber: "phonenumber",
            processingRegion: "processingRegion",
            recipientEmail: undefined,
            recipientEmailNotification: undefined,
            resumable: undefined,
            signer: {
                name: undefined,
                ssn: undefined,
                dob: undefined,
                phone: undefined,
                email: undefined,
                address: undefined,
                address1: undefined,
                city: undefined,
                country: undefined,
                state: undefined,
                zip: undefined,
                acceptance: undefined,
                signedDocumentReference: undefined,
                pciAttestation: undefined,
                attestationDate: undefined,
                additionalData: undefined,
                signDate: undefined,
            },
            startdate: undefined,
            taxFillName: undefined,
            templateId: undefined,
            ticketamt: undefined,
            website: undefined,
            whenCharged: "When Service Provided",
            whenDelivered: "0-7 Days",
            whenProvided: "30 Days or Less",
            whenRefunded: "Exchange Only",
            additionalData: undefined,
            RepCode: undefined,
            RepName: undefined,
            RepOffice: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/Boarding/app")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.boarding.addApplication({
                services: {
                    ach: {
                        acceptCCD: undefined,
                        acceptPPD: undefined,
                        acceptWeb: undefined,
                    },
                    card: {
                        acceptAmex: undefined,
                        acceptDiscover: undefined,
                        acceptMastercard: undefined,
                        acceptVisa: undefined,
                    },
                    odp: undefined,
                },
                annualRevenue: undefined,
                averageBillSize: undefined,
                averageMonthlyBill: undefined,
                avgmonthly: undefined,
                baddress: undefined,
                baddress1: undefined,
                bankData: {
                    id: undefined,
                    accountId: undefined,
                    nickname: undefined,
                    bankName: undefined,
                    routingAccount: undefined,
                    accountNumber: undefined,
                    typeAccount: undefined,
                    bankAccountHolderName: undefined,
                    bankAccountHolderType: undefined,
                    bankAccountFunction: undefined,
                    verified: undefined,
                    status: undefined,
                    services: undefined,
                },
                bcity: undefined,
                bcountry: undefined,
                binperson: undefined,
                binphone: undefined,
                binweb: undefined,
                boardingLinkId: undefined,
                bstate: undefined,
                bsummary: undefined,
                btype: undefined,
                bzip: undefined,
                contacts: undefined,
                creditLimit: undefined,
                dbaName: undefined,
                ein: undefined,
                externalpaypointID: undefined,
                faxnumber: undefined,
                highticketamt: undefined,
                legalName: undefined,
                license: undefined,
                licstate: undefined,
                maddress: undefined,
                maddress1: undefined,
                mcc: undefined,
                mcity: undefined,
                mcountry: undefined,
                mstate: undefined,
                mzip: undefined,
                orgId: undefined,
                ownership: undefined,
                phonenumber: "phonenumber",
                processingRegion: "processingRegion",
                recipientEmail: undefined,
                recipientEmailNotification: undefined,
                resumable: undefined,
                signer: {
                    name: undefined,
                    ssn: undefined,
                    dob: undefined,
                    phone: undefined,
                    email: undefined,
                    address: undefined,
                    address1: undefined,
                    city: undefined,
                    country: undefined,
                    state: undefined,
                    zip: undefined,
                    acceptance: undefined,
                    signedDocumentReference: undefined,
                    pciAttestation: undefined,
                    attestationDate: undefined,
                    additionalData: undefined,
                    signDate: undefined,
                },
                startdate: undefined,
                taxFillName: undefined,
                templateId: undefined,
                ticketamt: undefined,
                website: undefined,
                whenCharged: "When Service Provided",
                whenDelivered: "0-7 Days",
                whenProvided: "30 Days or Less",
                whenRefunded: "Exchange Only",
                additionalData: undefined,
                RepCode: undefined,
                RepName: undefined,
                RepOffice: undefined,
            });
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("AddApplication (a50302a2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            services: {
                ach: { acceptCCD: undefined, acceptPPD: undefined, acceptWeb: undefined },
                card: {
                    acceptAmex: undefined,
                    acceptDiscover: undefined,
                    acceptMastercard: undefined,
                    acceptVisa: undefined,
                },
                odp: undefined,
            },
            annualRevenue: undefined,
            averageBillSize: undefined,
            averageMonthlyBill: undefined,
            avgmonthly: undefined,
            baddress: undefined,
            baddress1: undefined,
            bankData: {
                id: undefined,
                accountId: undefined,
                nickname: undefined,
                bankName: undefined,
                routingAccount: undefined,
                accountNumber: undefined,
                typeAccount: undefined,
                bankAccountHolderName: undefined,
                bankAccountHolderType: undefined,
                bankAccountFunction: undefined,
                verified: undefined,
                status: undefined,
                services: undefined,
            },
            bcity: undefined,
            bcountry: undefined,
            binperson: undefined,
            binphone: undefined,
            binweb: undefined,
            boardingLinkId: undefined,
            bstate: undefined,
            bsummary: undefined,
            btype: undefined,
            bzip: undefined,
            contacts: undefined,
            creditLimit: undefined,
            dbaName: undefined,
            ein: undefined,
            externalpaypointID: undefined,
            faxnumber: undefined,
            highticketamt: undefined,
            legalName: undefined,
            license: undefined,
            licstate: undefined,
            maddress: undefined,
            maddress1: undefined,
            mcc: undefined,
            mcity: undefined,
            mcountry: undefined,
            mstate: undefined,
            mzip: undefined,
            orgId: undefined,
            ownership: undefined,
            phonenumber: "phonenumber",
            processingRegion: "processingRegion",
            recipientEmail: undefined,
            recipientEmailNotification: undefined,
            resumable: undefined,
            signer: {
                name: undefined,
                ssn: undefined,
                dob: undefined,
                phone: undefined,
                email: undefined,
                address: undefined,
                address1: undefined,
                city: undefined,
                country: undefined,
                state: undefined,
                zip: undefined,
                acceptance: undefined,
                signedDocumentReference: undefined,
                pciAttestation: undefined,
                attestationDate: undefined,
                additionalData: undefined,
                signDate: undefined,
            },
            startdate: undefined,
            taxFillName: undefined,
            templateId: undefined,
            ticketamt: undefined,
            website: undefined,
            whenCharged: "When Service Provided",
            whenDelivered: "0-7 Days",
            whenProvided: "30 Days or Less",
            whenRefunded: "Exchange Only",
            additionalData: undefined,
            RepCode: undefined,
            RepName: undefined,
            RepOffice: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/Boarding/app")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.boarding.addApplication({
                services: {
                    ach: {
                        acceptCCD: undefined,
                        acceptPPD: undefined,
                        acceptWeb: undefined,
                    },
                    card: {
                        acceptAmex: undefined,
                        acceptDiscover: undefined,
                        acceptMastercard: undefined,
                        acceptVisa: undefined,
                    },
                    odp: undefined,
                },
                annualRevenue: undefined,
                averageBillSize: undefined,
                averageMonthlyBill: undefined,
                avgmonthly: undefined,
                baddress: undefined,
                baddress1: undefined,
                bankData: {
                    id: undefined,
                    accountId: undefined,
                    nickname: undefined,
                    bankName: undefined,
                    routingAccount: undefined,
                    accountNumber: undefined,
                    typeAccount: undefined,
                    bankAccountHolderName: undefined,
                    bankAccountHolderType: undefined,
                    bankAccountFunction: undefined,
                    verified: undefined,
                    status: undefined,
                    services: undefined,
                },
                bcity: undefined,
                bcountry: undefined,
                binperson: undefined,
                binphone: undefined,
                binweb: undefined,
                boardingLinkId: undefined,
                bstate: undefined,
                bsummary: undefined,
                btype: undefined,
                bzip: undefined,
                contacts: undefined,
                creditLimit: undefined,
                dbaName: undefined,
                ein: undefined,
                externalpaypointID: undefined,
                faxnumber: undefined,
                highticketamt: undefined,
                legalName: undefined,
                license: undefined,
                licstate: undefined,
                maddress: undefined,
                maddress1: undefined,
                mcc: undefined,
                mcity: undefined,
                mcountry: undefined,
                mstate: undefined,
                mzip: undefined,
                orgId: undefined,
                ownership: undefined,
                phonenumber: "phonenumber",
                processingRegion: "processingRegion",
                recipientEmail: undefined,
                recipientEmailNotification: undefined,
                resumable: undefined,
                signer: {
                    name: undefined,
                    ssn: undefined,
                    dob: undefined,
                    phone: undefined,
                    email: undefined,
                    address: undefined,
                    address1: undefined,
                    city: undefined,
                    country: undefined,
                    state: undefined,
                    zip: undefined,
                    acceptance: undefined,
                    signedDocumentReference: undefined,
                    pciAttestation: undefined,
                    attestationDate: undefined,
                    additionalData: undefined,
                    signDate: undefined,
                },
                startdate: undefined,
                taxFillName: undefined,
                templateId: undefined,
                ticketamt: undefined,
                website: undefined,
                whenCharged: "When Service Provided",
                whenDelivered: "0-7 Days",
                whenProvided: "30 Days or Less",
                whenRefunded: "Exchange Only",
                additionalData: undefined,
                RepCode: undefined,
                RepName: undefined,
                RepOffice: undefined,
            });
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("AddApplication (d969186c)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            services: {
                ach: { acceptCCD: undefined, acceptPPD: undefined, acceptWeb: undefined },
                card: {
                    acceptAmex: undefined,
                    acceptDiscover: undefined,
                    acceptMastercard: undefined,
                    acceptVisa: undefined,
                },
                odp: undefined,
            },
            annualRevenue: undefined,
            averageBillSize: undefined,
            averageMonthlyBill: undefined,
            avgmonthly: undefined,
            baddress: undefined,
            baddress1: undefined,
            bankData: {
                id: undefined,
                accountId: undefined,
                nickname: undefined,
                bankName: undefined,
                routingAccount: undefined,
                accountNumber: undefined,
                typeAccount: undefined,
                bankAccountHolderName: undefined,
                bankAccountHolderType: undefined,
                bankAccountFunction: undefined,
                verified: undefined,
                status: undefined,
                services: undefined,
            },
            bcity: undefined,
            bcountry: undefined,
            binperson: undefined,
            binphone: undefined,
            binweb: undefined,
            boardingLinkId: undefined,
            bstate: undefined,
            bsummary: undefined,
            btype: undefined,
            bzip: undefined,
            contacts: undefined,
            creditLimit: undefined,
            dbaName: undefined,
            ein: undefined,
            externalpaypointID: undefined,
            faxnumber: undefined,
            highticketamt: undefined,
            legalName: undefined,
            license: undefined,
            licstate: undefined,
            maddress: undefined,
            maddress1: undefined,
            mcc: undefined,
            mcity: undefined,
            mcountry: undefined,
            mstate: undefined,
            mzip: undefined,
            orgId: undefined,
            ownership: undefined,
            phonenumber: "phonenumber",
            processingRegion: "processingRegion",
            recipientEmail: undefined,
            recipientEmailNotification: undefined,
            resumable: undefined,
            signer: {
                name: undefined,
                ssn: undefined,
                dob: undefined,
                phone: undefined,
                email: undefined,
                address: undefined,
                address1: undefined,
                city: undefined,
                country: undefined,
                state: undefined,
                zip: undefined,
                acceptance: undefined,
                signedDocumentReference: undefined,
                pciAttestation: undefined,
                attestationDate: undefined,
                additionalData: undefined,
                signDate: undefined,
            },
            startdate: undefined,
            taxFillName: undefined,
            templateId: undefined,
            ticketamt: undefined,
            website: undefined,
            whenCharged: "When Service Provided",
            whenDelivered: "0-7 Days",
            whenProvided: "30 Days or Less",
            whenRefunded: "Exchange Only",
            additionalData: undefined,
            RepCode: undefined,
            RepName: undefined,
            RepOffice: undefined,
        };
        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .post("/Boarding/app")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.boarding.addApplication({
                services: {
                    ach: {
                        acceptCCD: undefined,
                        acceptPPD: undefined,
                        acceptWeb: undefined,
                    },
                    card: {
                        acceptAmex: undefined,
                        acceptDiscover: undefined,
                        acceptMastercard: undefined,
                        acceptVisa: undefined,
                    },
                    odp: undefined,
                },
                annualRevenue: undefined,
                averageBillSize: undefined,
                averageMonthlyBill: undefined,
                avgmonthly: undefined,
                baddress: undefined,
                baddress1: undefined,
                bankData: {
                    id: undefined,
                    accountId: undefined,
                    nickname: undefined,
                    bankName: undefined,
                    routingAccount: undefined,
                    accountNumber: undefined,
                    typeAccount: undefined,
                    bankAccountHolderName: undefined,
                    bankAccountHolderType: undefined,
                    bankAccountFunction: undefined,
                    verified: undefined,
                    status: undefined,
                    services: undefined,
                },
                bcity: undefined,
                bcountry: undefined,
                binperson: undefined,
                binphone: undefined,
                binweb: undefined,
                boardingLinkId: undefined,
                bstate: undefined,
                bsummary: undefined,
                btype: undefined,
                bzip: undefined,
                contacts: undefined,
                creditLimit: undefined,
                dbaName: undefined,
                ein: undefined,
                externalpaypointID: undefined,
                faxnumber: undefined,
                highticketamt: undefined,
                legalName: undefined,
                license: undefined,
                licstate: undefined,
                maddress: undefined,
                maddress1: undefined,
                mcc: undefined,
                mcity: undefined,
                mcountry: undefined,
                mstate: undefined,
                mzip: undefined,
                orgId: undefined,
                ownership: undefined,
                phonenumber: "phonenumber",
                processingRegion: "processingRegion",
                recipientEmail: undefined,
                recipientEmailNotification: undefined,
                resumable: undefined,
                signer: {
                    name: undefined,
                    ssn: undefined,
                    dob: undefined,
                    phone: undefined,
                    email: undefined,
                    address: undefined,
                    address1: undefined,
                    city: undefined,
                    country: undefined,
                    state: undefined,
                    zip: undefined,
                    acceptance: undefined,
                    signedDocumentReference: undefined,
                    pciAttestation: undefined,
                    attestationDate: undefined,
                    additionalData: undefined,
                    signDate: undefined,
                },
                startdate: undefined,
                taxFillName: undefined,
                templateId: undefined,
                ticketamt: undefined,
                website: undefined,
                whenCharged: "When Service Provided",
                whenDelivered: "0-7 Days",
                whenProvided: "30 Days or Less",
                whenRefunded: "Exchange Only",
                additionalData: undefined,
                RepCode: undefined,
                RepName: undefined,
                RepOffice: undefined,
            });
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("DeleteApplication (General success response example for some boarding operations.)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: true, responseCode: 1, responseData: 3625, responseText: "Success" };
        server
            .mockEndpoint()
            .delete("/Boarding/app/352")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.boarding.deleteApplication(352);
        expect(response).toEqual({
            isSuccess: true,
            responseCode: 1,
            responseData: 3625,
            responseText: "Success",
        });
    });

    test("DeleteApplication (6dc1a7c7)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().delete("/Boarding/app/1").respondWith().statusCode(400).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.boarding.deleteApplication(1);
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("DeleteApplication (d0919dd7)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().delete("/Boarding/app/1").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.boarding.deleteApplication(1);
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("DeleteApplication (735ddd3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().delete("/Boarding/app/1").respondWith().statusCode(500).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.boarding.deleteApplication(1);
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("DeleteApplication (f86ea6e9)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server.mockEndpoint().delete("/Boarding/app/1").respondWith().statusCode(503).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.boarding.deleteApplication(1);
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("GetApplication (General success response example for boarding app get.)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            annualRevenue: 1000,
            averageMonthlyVolume: 1000,
            averageTicketAmount: 1000,
            bAddress1: "123 Walnut Street",
            bAddress2: "Suite 103",
            bankData: [
                {
                    accountNumber: "123123123",
                    bankAccountFunction: 1,
                    bankAccountHolderName: "Gruzya Adventure Outfitters LLC",
                    bankAccountHolderType: "Business",
                    bankName: "Test Bank",
                    id: 123,
                    nickname: "Withdrawal Account",
                    routingAccount: "123123123",
                    typeAccount: "Checking",
                    accountId: "123-456",
                },
            ],
            bCity: "New Vegas",
            bCountry: "US",
            bFax: "5551234567",
            binPerson: 60,
            binPhone: 20,
            binWeb: 20,
            boardingLinkId: 91,
            boardingStatus: 123,
            boardingSubStatus: 123,
            bPhone: "5551234567",
            bStartdate: "01/01/1990",
            bState: "FL",
            bSummary: "Brick and mortar store that sells office supplies",
            builderData: {
                services: {
                    ach: {
                        acceptance: {
                            ccd: { ro: false, value: "<string>" },
                            ppd: { ro: false, value: "<string>" },
                            web: { ro: false, value: "<string>" },
                        },
                        fees: {
                            body: [{ columns: [{ value: "<string>" }] }],
                            header: { columns: [{ value: "<string>" }] },
                        },
                        price: {
                            body: [{ columns: [{ value: "<string>" }] }],
                            header: { columns: [{ value: "<string>" }] },
                        },
                    },
                    card: {
                        acceptance: {
                            amex: { ro: false, value: "<string>" },
                            discover: { ro: false, value: "<string>" },
                            mastercard: { ro: false, value: "<string>" },
                            visa: { ro: false, value: "<string>" },
                        },
                        fees: {
                            body: [{ columns: [{ value: "<string>" }] }],
                            header: { columns: [{ value: "<string>" }] },
                        },
                        price: {
                            body: [{ columns: [{ value: "<string>" }] }],
                            header: { columns: [{ value: "<string>" }] },
                        },
                    },
                },
                attributes: { minimumDocuments: 1, multipleContacts: true, multipleOwners: true },
                banking: {
                    depositAccount: {
                        accountNumber: { ro: false, value: "<string>" },
                        bankName: { ro: false, value: "<string>" },
                        routingAccount: { ro: false, value: "<string>" },
                        typeAccount: { ro: false, value: "<string>" },
                    },
                    withdrawalAccount: {
                        accountNumber: { ro: false, value: "<string>" },
                        bankName: { ro: false, value: "<string>" },
                        routingAccount: { ro: false, value: "<string>" },
                        typeAccount: { ro: false, value: "<string>" },
                    },
                },
                business: {
                    address: {
                        baddress: { ro: false, validator: "alphanumeric", value: "<string>" },
                        baddress1: { ro: false, validator: "alphanumeric", value: "<string>" },
                        bcity: { ro: false, validator: "alphanumeric", value: "<string>" },
                        bcountry: { ro: false, value: "<string>" },
                        bstate: { ro: false, value: "<string>" },
                        bzip: { ro: false, validator: "zipcode", value: "<string>" },
                        maddress: { ro: false, validator: "alphanumeric", value: "<string>" },
                        maddress1: { ro: false, validator: "alphanumeric", value: "<string>" },
                        mcity: { ro: false, validator: "alphanumeric", value: "<string>" },
                        mcountry: { ro: false, value: "<string>" },
                        mstate: { ro: false, value: "<string>" },
                        mzip: { ro: false, validator: "zipcode", value: "<string>" },
                    },
                    details: {
                        btype: { ro: false, value: "<string>" },
                        dbaname: { ro: false, validator: "alphanumeric", value: "<string>" },
                        ein: { ro: false, validator: "routing", value: "<string>" },
                        faxnumber: { ro: false, validator: "phone", value: "<string>" },
                        legalname: { ro: false, validator: "alphanumeric", value: "<string>" },
                        license: { ro: false, validator: "alphanumeric", value: "<string>" },
                        licstate: { ro: false, value: "<string>" },
                        phonenumber: { ro: false, validator: "phone", value: "<string>" },
                        startdate: { ro: false, value: "2021-12-13T05:00:00.000Z" },
                        taxfillname: { ro: false, validator: "alphanumeric", value: "<string>" },
                        website: { ro: false, validator: "url", value: "<string>" },
                    },
                },
                owners: {
                    contact_list: {
                        contactEmail: { ro: false, validator: "email", value: "<string>" },
                        contactName: { ro: false, validator: "alphanumeric", value: "<string>" },
                        contactPhone: { ro: false, validator: "phone", value: "<string>" },
                        contactTitle: { ro: false, validator: "alpha", value: "<string>" },
                    },
                    own_list: {
                        oaddress: { ro: false, validator: "alphanumeric", value: "<string>" },
                        ocity: { ro: false, validator: "alphanumeric", value: "<string>" },
                        ocountry: { ro: false, value: "<string>" },
                        odriverstate: { ro: false, value: "<string>" },
                        ostate: { ro: false, value: "<string>" },
                        ownerdob: { ro: false, value: "2003-06-05T04:00:00.000Z" },
                        ownerdriver: { ro: false, validator: "alphanumeric", value: "<string>" },
                        owneremail: { ro: false, validator: "email", value: "<string>" },
                        ownername: { ro: false, validator: "alphanumeric", value: "<string>" },
                        ownerpercent: { ro: false, validator: "number", value: "<string>" },
                        ownerphone1: { ro: false, validator: "phone", value: "<string>" },
                        ownerphone2: { ro: false, validator: "phone", value: "<string>" },
                        ownerssn: { ro: false, validator: "routing", value: "<string>" },
                        ownertitle: { ro: false, validator: "alpha", value: "<string>" },
                        ozip: { ro: false, validator: "zipcode", value: "<string>" },
                    },
                },
                processing: {
                    avgmonthly: { ro: false, validator: "numbers", value: "<string>" },
                    binperson: { ro: false, value: "<string>" },
                    binphone: { ro: false, value: "<string>" },
                    binweb: { ro: false, value: "<string>" },
                    bsummary: { ro: false, validator: "text", value: "<string>" },
                    highticketamt: { ro: false, validator: "numbers", value: "<string>" },
                    mcc: { ro: false, value: "<string>" },
                    ticketamt: { ro: false, validator: "numbers", value: "<string>" },
                    whenCharged: { ro: false, value: "<string>" },
                    whenDelivered: { ro: false, value: "<string>" },
                    whenProvided: { ro: false, value: "<string>" },
                    whenRefunded: { ro: false, value: "<string>" },
                },
            },
            bZip: "33000",
            contactData: [
                {
                    contactEmail: "herman@hermanscoatings.com",
                    contactName: "Herman Martinez",
                    contactPhone: "3055550000",
                    contactTitle: "Owner",
                    additionalData: undefined,
                },
            ],
            createdAt: "2022-07-01T15:00:01Z",
            dbaName: "Sunshine Gutters",
            documentsRef: { filelist: [{ originalName: "<string>", zipName: "<string>" }], zipfile: "zx45.zip" },
            ein: "XXXX6789",
            externalPaypointId: "Paypoint-100",
            generalEvents: [
                { description: "Created", eventTime: "2022-06-17T16:35:21Z" },
                { description: "Updated Status", eventTime: "2022-06-17T16:35:22Z", refData: "1" },
            ],
            highTicketAmount: 1000,
            idApplication: 325,
            lastModified: "2022-07-01T15:00:01Z",
            legalName: "Sunshine Services, LLC",
            license: "2222222FFG",
            licenseState: "CA",
            logo: {
                fContent: "TXkgdGVzdCBmaWxlHJ==...",
                filename: "my-doc.pdf",
                ftype: "pdf",
                furl: "https://mysite.com/my-doc.pdf",
            },
            mAddress1: "123 Walnut Street",
            mAddress2: "STE 900",
            mccid: "<string>",
            mCity: "TN",
            mCountry: "US",
            messages: [
                {
                    content: "Requested business license and bank statements.",
                    createdAt: "2023-10-30T19:37:20Z",
                    currentApplicationStatus: 3,
                    currentApplicationSubStatus: 2,
                    id: 261,
                    messageType: 1,
                    originalApplicationStatus: -99,
                    originalApplicationSubStatus: 0,
                    roomId: 6,
                    userId: 104,
                    userName: "admin",
                },
                {
                    content: "TIN Failed, Need to reach out to merchant",
                    createdAt: "2023-10-25T18:41:55Z",
                    currentApplicationStatus: 3,
                    currentApplicationSubStatus: 3,
                    id: 231,
                    messageType: 1,
                    originalApplicationStatus: -99,
                    originalApplicationSubStatus: 0,
                    roomId: 6,
                    userId: 104,
                    userName: "admin",
                },
                {
                    content: "Application approved, finalizing agreement.",
                    createdAt: "2023-09-09T00:00:00Z",
                    currentApplicationStatus: 7,
                    currentApplicationSubStatus: 5,
                    id: 3,
                    messageType: 1,
                    originalApplicationStatus: -99,
                    originalApplicationSubStatus: 0,
                    roomId: 6,
                    userId: 5,
                    userName: "admin",
                },
            ],
            mState: "TN",
            mZip: "37615",
            orgId: 123,
            orgParentName: "PropertyManager Pro",
            ownerData: [
                {
                    oaddress: "33 North St",
                    ocity: "Any City",
                    ocountry: "US",
                    odriverstate: "CA",
                    ostate: "CA",
                    ownerdob: "01/01/1990",
                    ownerdriver: "CA6677778",
                    owneremail: "test@email.com",
                    ownername: "John Smith",
                    ownerpercent: 25,
                    ownerphone1: "555888111",
                    ownerphone2: "555888111",
                    ownerssn: "123456789",
                    ownertitle: "CEO",
                    ozip: "55555",
                    additionalData: undefined,
                },
            ],
            ownType: "Limited Liability Company",
            pageidentifier: "<string>",
            recipientEmailNotification: true,
            resumable: true,
            salesCode: "<string>",
            serviceData: {
                ach: { acceptCCD: true, acceptPPD: true, acceptWeb: true },
                card: { acceptAmex: true, acceptDiscover: true, acceptMastercard: true, acceptVisa: true },
                odp: {
                    allowAch: true,
                    allowChecks: true,
                    allowVCard: true,
                    processing_region: "US",
                    processor: "tysys",
                    issuerNetworkSettingsId: "12345678901234",
                },
            },
            signer: {
                address: "33 North St",
                address1: "STE 900",
                city: "Bristol",
                country: "US",
                dob: "01/01/1976",
                email: "test@email.com",
                name: "John Smith",
                phone: "555888111",
                ssn: "123456789",
                state: "TN",
                zip: "55555",
                pciAttestation: true,
                signedDocumentReference: "https://example.com/signed-document.pdf",
                attestationDate: "04/20/2025",
                signDate: "04/20/2025",
                additionalData:
                    '{"deviceId":"499585-389fj484-3jcj8hj3","session":"fifji4-fiu443-fn4843","timeWithCompany":"6 Years"}',
            },
            taxfillname: "Sunshine LLC",
            templateId: 22,
            websiteAddress: "www.example.com",
            whencharged: "When Service Provided",
            whendelivered: "Over 30 Days",
            whenProvided: "30 Days or Less",
            whenrefund: "Exchange Only",
        };
        server.mockEndpoint().get("/Boarding/read/352").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.boarding.getApplication(352);
        expect(response).toEqual({
            annualRevenue: 1000,
            averageMonthlyVolume: 1000,
            averageTicketAmount: 1000,
            bAddress1: "123 Walnut Street",
            bAddress2: "Suite 103",
            bankData: [
                {
                    accountNumber: "123123123",
                    bankAccountFunction: 1,
                    bankAccountHolderName: "Gruzya Adventure Outfitters LLC",
                    bankAccountHolderType: "Business",
                    bankName: "Test Bank",
                    id: 123,
                    nickname: "Withdrawal Account",
                    routingAccount: "123123123",
                    typeAccount: "Checking",
                    accountId: "123-456",
                },
            ],
            bCity: "New Vegas",
            bCountry: "US",
            bFax: "5551234567",
            binPerson: 60,
            binPhone: 20,
            binWeb: 20,
            boardingLinkId: 91,
            boardingStatus: 123,
            boardingSubStatus: 123,
            bPhone: "5551234567",
            bStartdate: "01/01/1990",
            bState: "FL",
            bSummary: "Brick and mortar store that sells office supplies",
            builderData: {
                services: {
                    ach: {
                        acceptance: {
                            ccd: {
                                ro: false,
                                value: "<string>",
                            },
                            ppd: {
                                ro: false,
                                value: "<string>",
                            },
                            web: {
                                ro: false,
                                value: "<string>",
                            },
                        },
                        fees: {
                            body: [
                                {
                                    columns: [
                                        {
                                            value: "<string>",
                                        },
                                    ],
                                },
                            ],
                            header: {
                                columns: [
                                    {
                                        value: "<string>",
                                    },
                                ],
                            },
                        },
                        price: {
                            body: [
                                {
                                    columns: [
                                        {
                                            value: "<string>",
                                        },
                                    ],
                                },
                            ],
                            header: {
                                columns: [
                                    {
                                        value: "<string>",
                                    },
                                ],
                            },
                        },
                    },
                    card: {
                        acceptance: {
                            amex: {
                                ro: false,
                                value: "<string>",
                            },
                            discover: {
                                ro: false,
                                value: "<string>",
                            },
                            mastercard: {
                                ro: false,
                                value: "<string>",
                            },
                            visa: {
                                ro: false,
                                value: "<string>",
                            },
                        },
                        fees: {
                            body: [
                                {
                                    columns: [
                                        {
                                            value: "<string>",
                                        },
                                    ],
                                },
                            ],
                            header: {
                                columns: [
                                    {
                                        value: "<string>",
                                    },
                                ],
                            },
                        },
                        price: {
                            body: [
                                {
                                    columns: [
                                        {
                                            value: "<string>",
                                        },
                                    ],
                                },
                            ],
                            header: {
                                columns: [
                                    {
                                        value: "<string>",
                                    },
                                ],
                            },
                        },
                    },
                },
                attributes: {
                    minimumDocuments: 1,
                    multipleContacts: true,
                    multipleOwners: true,
                },
                banking: {
                    depositAccount: {
                        accountNumber: {
                            ro: false,
                            value: "<string>",
                        },
                        bankName: {
                            ro: false,
                            value: "<string>",
                        },
                        routingAccount: {
                            ro: false,
                            value: "<string>",
                        },
                        typeAccount: {
                            ro: false,
                            value: "<string>",
                        },
                    },
                    withdrawalAccount: {
                        accountNumber: {
                            ro: false,
                            value: "<string>",
                        },
                        bankName: {
                            ro: false,
                            value: "<string>",
                        },
                        routingAccount: {
                            ro: false,
                            value: "<string>",
                        },
                        typeAccount: {
                            ro: false,
                            value: "<string>",
                        },
                    },
                },
                business: {
                    address: {
                        baddress: {
                            ro: false,
                            validator: "alphanumeric",
                            value: "<string>",
                        },
                        baddress1: {
                            ro: false,
                            validator: "alphanumeric",
                            value: "<string>",
                        },
                        bcity: {
                            ro: false,
                            validator: "alphanumeric",
                            value: "<string>",
                        },
                        bcountry: {
                            ro: false,
                            value: "<string>",
                        },
                        bstate: {
                            ro: false,
                            value: "<string>",
                        },
                        bzip: {
                            ro: false,
                            validator: "zipcode",
                            value: "<string>",
                        },
                        maddress: {
                            ro: false,
                            validator: "alphanumeric",
                            value: "<string>",
                        },
                        maddress1: {
                            ro: false,
                            validator: "alphanumeric",
                            value: "<string>",
                        },
                        mcity: {
                            ro: false,
                            validator: "alphanumeric",
                            value: "<string>",
                        },
                        mcountry: {
                            ro: false,
                            value: "<string>",
                        },
                        mstate: {
                            ro: false,
                            value: "<string>",
                        },
                        mzip: {
                            ro: false,
                            validator: "zipcode",
                            value: "<string>",
                        },
                    },
                    details: {
                        btype: {
                            ro: false,
                            value: "<string>",
                        },
                        dbaname: {
                            ro: false,
                            validator: "alphanumeric",
                            value: "<string>",
                        },
                        ein: {
                            ro: false,
                            validator: "routing",
                            value: "<string>",
                        },
                        faxnumber: {
                            ro: false,
                            validator: "phone",
                            value: "<string>",
                        },
                        legalname: {
                            ro: false,
                            validator: "alphanumeric",
                            value: "<string>",
                        },
                        license: {
                            ro: false,
                            validator: "alphanumeric",
                            value: "<string>",
                        },
                        licstate: {
                            ro: false,
                            value: "<string>",
                        },
                        phonenumber: {
                            ro: false,
                            validator: "phone",
                            value: "<string>",
                        },
                        startdate: {
                            ro: false,
                            value: "2021-12-13T05:00:00.000Z",
                        },
                        taxfillname: {
                            ro: false,
                            validator: "alphanumeric",
                            value: "<string>",
                        },
                        website: {
                            ro: false,
                            validator: "url",
                            value: "<string>",
                        },
                    },
                },
                owners: {
                    contact_list: {
                        contactEmail: {
                            ro: false,
                            validator: "email",
                            value: "<string>",
                        },
                        contactName: {
                            ro: false,
                            validator: "alphanumeric",
                            value: "<string>",
                        },
                        contactPhone: {
                            ro: false,
                            validator: "phone",
                            value: "<string>",
                        },
                        contactTitle: {
                            ro: false,
                            validator: "alpha",
                            value: "<string>",
                        },
                    },
                    own_list: {
                        oaddress: {
                            ro: false,
                            validator: "alphanumeric",
                            value: "<string>",
                        },
                        ocity: {
                            ro: false,
                            validator: "alphanumeric",
                            value: "<string>",
                        },
                        ocountry: {
                            ro: false,
                            value: "<string>",
                        },
                        odriverstate: {
                            ro: false,
                            value: "<string>",
                        },
                        ostate: {
                            ro: false,
                            value: "<string>",
                        },
                        ownerdob: {
                            ro: false,
                            value: "2003-06-05T04:00:00.000Z",
                        },
                        ownerdriver: {
                            ro: false,
                            validator: "alphanumeric",
                            value: "<string>",
                        },
                        owneremail: {
                            ro: false,
                            validator: "email",
                            value: "<string>",
                        },
                        ownername: {
                            ro: false,
                            validator: "alphanumeric",
                            value: "<string>",
                        },
                        ownerpercent: {
                            ro: false,
                            validator: "number",
                            value: "<string>",
                        },
                        ownerphone1: {
                            ro: false,
                            validator: "phone",
                            value: "<string>",
                        },
                        ownerphone2: {
                            ro: false,
                            validator: "phone",
                            value: "<string>",
                        },
                        ownerssn: {
                            ro: false,
                            validator: "routing",
                            value: "<string>",
                        },
                        ownertitle: {
                            ro: false,
                            validator: "alpha",
                            value: "<string>",
                        },
                        ozip: {
                            ro: false,
                            validator: "zipcode",
                            value: "<string>",
                        },
                    },
                },
                processing: {
                    avgmonthly: {
                        ro: false,
                        validator: "numbers",
                        value: "<string>",
                    },
                    binperson: {
                        ro: false,
                        value: "<string>",
                    },
                    binphone: {
                        ro: false,
                        value: "<string>",
                    },
                    binweb: {
                        ro: false,
                        value: "<string>",
                    },
                    bsummary: {
                        ro: false,
                        validator: "text",
                        value: "<string>",
                    },
                    highticketamt: {
                        ro: false,
                        validator: "numbers",
                        value: "<string>",
                    },
                    mcc: {
                        ro: false,
                        value: "<string>",
                    },
                    ticketamt: {
                        ro: false,
                        validator: "numbers",
                        value: "<string>",
                    },
                    whenCharged: {
                        ro: false,
                        value: "<string>",
                    },
                    whenDelivered: {
                        ro: false,
                        value: "<string>",
                    },
                    whenProvided: {
                        ro: false,
                        value: "<string>",
                    },
                    whenRefunded: {
                        ro: false,
                        value: "<string>",
                    },
                },
            },
            bZip: "33000",
            contactData: [
                {
                    contactEmail: "herman@hermanscoatings.com",
                    contactName: "Herman Martinez",
                    contactPhone: "3055550000",
                    contactTitle: "Owner",
                    additionalData: undefined,
                },
            ],
            createdAt: "2022-07-01T15:00:01Z",
            dbaName: "Sunshine Gutters",
            documentsRef: {
                filelist: [
                    {
                        originalName: "<string>",
                        zipName: "<string>",
                    },
                ],
                zipfile: "zx45.zip",
            },
            ein: "XXXX6789",
            externalPaypointId: "Paypoint-100",
            generalEvents: [
                {
                    description: "Created",
                    eventTime: "2022-06-17T16:35:21Z",
                },
                {
                    description: "Updated Status",
                    eventTime: "2022-06-17T16:35:22Z",
                    refData: "1",
                },
            ],
            highTicketAmount: 1000,
            idApplication: 325,
            lastModified: "2022-07-01T15:00:01Z",
            legalName: "Sunshine Services, LLC",
            license: "2222222FFG",
            licenseState: "CA",
            logo: {
                fContent: "TXkgdGVzdCBmaWxlHJ==...",
                filename: "my-doc.pdf",
                ftype: "pdf",
                furl: "https://mysite.com/my-doc.pdf",
            },
            mAddress1: "123 Walnut Street",
            mAddress2: "STE 900",
            mccid: "<string>",
            mCity: "TN",
            mCountry: "US",
            messages: [
                {
                    content: "Requested business license and bank statements.",
                    createdAt: "2023-10-30T19:37:20Z",
                    currentApplicationStatus: 3,
                    currentApplicationSubStatus: 2,
                    id: 261,
                    messageType: 1,
                    originalApplicationStatus: -99,
                    originalApplicationSubStatus: 0,
                    roomId: 6,
                    userId: 104,
                    userName: "admin",
                },
                {
                    content: "TIN Failed, Need to reach out to merchant",
                    createdAt: "2023-10-25T18:41:55Z",
                    currentApplicationStatus: 3,
                    currentApplicationSubStatus: 3,
                    id: 231,
                    messageType: 1,
                    originalApplicationStatus: -99,
                    originalApplicationSubStatus: 0,
                    roomId: 6,
                    userId: 104,
                    userName: "admin",
                },
                {
                    content: "Application approved, finalizing agreement.",
                    createdAt: "2023-09-09T00:00:00Z",
                    currentApplicationStatus: 7,
                    currentApplicationSubStatus: 5,
                    id: 3,
                    messageType: 1,
                    originalApplicationStatus: -99,
                    originalApplicationSubStatus: 0,
                    roomId: 6,
                    userId: 5,
                    userName: "admin",
                },
            ],
            mState: "TN",
            mZip: "37615",
            orgId: 123,
            orgParentName: "PropertyManager Pro",
            ownerData: [
                {
                    oaddress: "33 North St",
                    ocity: "Any City",
                    ocountry: "US",
                    odriverstate: "CA",
                    ostate: "CA",
                    ownerdob: "01/01/1990",
                    ownerdriver: "CA6677778",
                    owneremail: "test@email.com",
                    ownername: "John Smith",
                    ownerpercent: 25,
                    ownerphone1: "555888111",
                    ownerphone2: "555888111",
                    ownerssn: "123456789",
                    ownertitle: "CEO",
                    ozip: "55555",
                    additionalData: undefined,
                },
            ],
            ownType: "Limited Liability Company",
            pageidentifier: "<string>",
            recipientEmailNotification: true,
            resumable: true,
            salesCode: "<string>",
            serviceData: {
                ach: {
                    acceptCCD: true,
                    acceptPPD: true,
                    acceptWeb: true,
                },
                card: {
                    acceptAmex: true,
                    acceptDiscover: true,
                    acceptMastercard: true,
                    acceptVisa: true,
                },
                odp: {
                    allowAch: true,
                    allowChecks: true,
                    allowVCard: true,
                    processing_region: "US",
                    processor: "tysys",
                    issuerNetworkSettingsId: "12345678901234",
                },
            },
            signer: {
                address: "33 North St",
                address1: "STE 900",
                city: "Bristol",
                country: "US",
                dob: "01/01/1976",
                email: "test@email.com",
                name: "John Smith",
                phone: "555888111",
                ssn: "123456789",
                state: "TN",
                zip: "55555",
                pciAttestation: true,
                signedDocumentReference: "https://example.com/signed-document.pdf",
                attestationDate: "04/20/2025",
                signDate: "04/20/2025",
                additionalData:
                    '{"deviceId":"499585-389fj484-3jcj8hj3","session":"fifji4-fiu443-fn4843","timeWithCompany":"6 Years"}',
            },
            taxfillname: "Sunshine LLC",
            templateId: 22,
            websiteAddress: "www.example.com",
            whencharged: "When Service Provided",
            whendelivered: "Over 30 Days",
            whenProvided: "30 Days or Less",
            whenrefund: "Exchange Only",
        });
    });

    test("GetApplication (6dc1a7c7)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/Boarding/read/1").respondWith().statusCode(400).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.boarding.getApplication(1);
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("GetApplication (d0919dd7)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/Boarding/read/1").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.boarding.getApplication(1);
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("GetApplication (735ddd3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/Boarding/read/1").respondWith().statusCode(500).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.boarding.getApplication(1);
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("GetApplication (f86ea6e9)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server.mockEndpoint().get("/Boarding/read/1").respondWith().statusCode(503).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.boarding.getApplication(1);
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("GetApplicationByAuth (Example)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { email: "admin@email.com", referenceId: "n6UCd1f1ygG7" };
        const rawResponseBody = {
            annualRevenue: 1000,
            averageMonthlyVolume: 1000,
            averageTicketAmount: 1000,
            bAddress1: "123 Walnut Street",
            bAddress2: "Suite 103",
            bankData: [
                {
                    accountNumber: "1XXXXXX3123",
                    bankAccountFunction: 0,
                    bankAccountHolderName: "Gruzya Adventure Outfitters LLC",
                    bankAccountHolderType: "Personal",
                    bankName: "Country Bank",
                    id: 1,
                    nickname: "Business Checking 1234",
                    routingAccount: "123123123",
                    typeAccount: "Checking",
                    accountId: "123-456",
                },
            ],
            bCity: "New Vegas",
            bCountry: "US",
            bFax: "5551234567",
            binPerson: 60,
            binPhone: 20,
            binWeb: 20,
            boardingLinkId: 91,
            boardingStatus: 1,
            boardingSubStatus: 1,
            bPhone: "5551234567",
            bStartdate: "01/01/1990",
            bState: "FL",
            bSummary: "Brick and mortar store that sells office supplies",
            builderData: { attributes: { minimumDocuments: 1, multipleContacts: true, multipleOwners: true } },
            bZip: "33000",
            contactData: [
                {
                    contactEmail: "example@email.com",
                    contactName: "Herman Martinez",
                    contactPhone: "3055550000",
                    contactTitle: "Owner",
                },
            ],
            createdAt: "2022-07-01T15:00:01Z",
            dbaName: "Sunshine Gutters",
            documentsRef: { filelist: [{}], zipfile: "zx45.zip" },
            ein: "123456789",
            externalPaypointId: "Paypoint-100",
            generalEvents: [
                {
                    description: "TransferCreated",
                    eventTime: "2023-07-05T22:31:06Z",
                    extraData: { key: "value" },
                    refData: "refData",
                    source: "api",
                },
            ],
            highTicketAmount: 1000,
            idApplication: 352,
            lastModified: "2022-07-01T15:00:01Z",
            legalName: "Sunshine Services, LLC",
            license: "2222222FFG",
            licenseState: "CA",
            logo: {
                fContent: "TXkgdGVzdCBmaWxlHJ==...",
                filename: "my-doc.pdf",
                ftype: "pdf",
                furl: "https://mysite.com/my-doc.pdf",
            },
            mAddress1: "123 Walnut Street",
            mAddress2: "STE 900",
            mccid: "mccid",
            mCity: "TN",
            mCountry: "US",
            mState: "TN",
            mZip: "37615",
            orgId: 123,
            orgParentName: "PropertyManager Pro",
            ownerData: [
                {
                    oaddress: "33 North St",
                    ocity: "Any City",
                    ocountry: "US",
                    odriverstate: "CA",
                    ostate: "CA",
                    ownerdob: "01/01/1990",
                    ownerdriver: "CA6677778",
                    owneremail: "example@email.com",
                    ownername: "John Smith",
                    ownerpercent: 25,
                    ownerphone1: "555888111",
                    ownerphone2: "555888111",
                    ownerssn: "123456789",
                    ownertitle: "CEO",
                    ozip: "55555",
                },
            ],
            ownType: "Limited Liability Company",
            pageidentifier: "null",
            recipientEmailNotification: true,
            resumable: false,
            salesCode: "salesCode",
            serviceData: {
                ach: { acceptCCD: false, acceptPPD: false, acceptWeb: true },
                card: { acceptAmex: true, acceptDiscover: false, acceptMastercard: true, acceptVisa: true },
                odp: {
                    allowAch: true,
                    allowChecks: true,
                    allowVCard: true,
                    processing_region: "US",
                    processor: "tysys",
                    issuerNetworkSettingsId: "12345678901234",
                },
            },
            signer: {
                acceptance: false,
                address: "33 North St",
                address1: "STE 900",
                city: "Bristol",
                country: "US",
                dob: "01/01/1990",
                email: "example@email.com",
                name: "John Smith",
                phone: "555888111",
                signedDocumentReference: "signedDocumentReference",
                signerUuid: "54455d5d-34ff-416c-91e0-5bc87199999",
                ssn: "123456789",
                state: "TN",
                zip: "55555",
            },
            taxfillname: "Sunshine LLC",
            templateId: 22,
            websiteAddress: "www.example.com",
            whencharged: "When Service Provided",
            whendelivered: "0-7 Days",
            whenProvided: "30 Days or Less",
            whenrefund: "Exchange Only",
        };
        server
            .mockEndpoint()
            .post("/Boarding/read/17E")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.boarding.getApplicationByAuth("17E", {
            email: "admin@email.com",
            referenceId: "n6UCd1f1ygG7",
        });
        expect(response).toEqual({
            annualRevenue: 1000,
            averageMonthlyVolume: 1000,
            averageTicketAmount: 1000,
            bAddress1: "123 Walnut Street",
            bAddress2: "Suite 103",
            bankData: [
                {
                    accountNumber: "1XXXXXX3123",
                    bankAccountFunction: 0,
                    bankAccountHolderName: "Gruzya Adventure Outfitters LLC",
                    bankAccountHolderType: "Personal",
                    bankName: "Country Bank",
                    id: 1,
                    nickname: "Business Checking 1234",
                    routingAccount: "123123123",
                    typeAccount: "Checking",
                    accountId: "123-456",
                },
            ],
            bCity: "New Vegas",
            bCountry: "US",
            bFax: "5551234567",
            binPerson: 60,
            binPhone: 20,
            binWeb: 20,
            boardingLinkId: 91,
            boardingStatus: 1,
            boardingSubStatus: 1,
            bPhone: "5551234567",
            bStartdate: "01/01/1990",
            bState: "FL",
            bSummary: "Brick and mortar store that sells office supplies",
            builderData: {
                attributes: {
                    minimumDocuments: 1,
                    multipleContacts: true,
                    multipleOwners: true,
                },
            },
            bZip: "33000",
            contactData: [
                {
                    contactEmail: "example@email.com",
                    contactName: "Herman Martinez",
                    contactPhone: "3055550000",
                    contactTitle: "Owner",
                },
            ],
            createdAt: "2022-07-01T15:00:01Z",
            dbaName: "Sunshine Gutters",
            documentsRef: {
                filelist: [{}],
                zipfile: "zx45.zip",
            },
            ein: "123456789",
            externalPaypointId: "Paypoint-100",
            generalEvents: [
                {
                    description: "TransferCreated",
                    eventTime: "2023-07-05T22:31:06Z",
                    extraData: {
                        key: "value",
                    },
                    refData: "refData",
                    source: "api",
                },
            ],
            highTicketAmount: 1000,
            idApplication: 352,
            lastModified: "2022-07-01T15:00:01Z",
            legalName: "Sunshine Services, LLC",
            license: "2222222FFG",
            licenseState: "CA",
            logo: {
                fContent: "TXkgdGVzdCBmaWxlHJ==...",
                filename: "my-doc.pdf",
                ftype: "pdf",
                furl: "https://mysite.com/my-doc.pdf",
            },
            mAddress1: "123 Walnut Street",
            mAddress2: "STE 900",
            mccid: "mccid",
            mCity: "TN",
            mCountry: "US",
            mState: "TN",
            mZip: "37615",
            orgId: 123,
            orgParentName: "PropertyManager Pro",
            ownerData: [
                {
                    oaddress: "33 North St",
                    ocity: "Any City",
                    ocountry: "US",
                    odriverstate: "CA",
                    ostate: "CA",
                    ownerdob: "01/01/1990",
                    ownerdriver: "CA6677778",
                    owneremail: "example@email.com",
                    ownername: "John Smith",
                    ownerpercent: 25,
                    ownerphone1: "555888111",
                    ownerphone2: "555888111",
                    ownerssn: "123456789",
                    ownertitle: "CEO",
                    ozip: "55555",
                },
            ],
            ownType: "Limited Liability Company",
            pageidentifier: "null",
            recipientEmailNotification: true,
            resumable: false,
            salesCode: "salesCode",
            serviceData: {
                ach: {
                    acceptCCD: false,
                    acceptPPD: false,
                    acceptWeb: true,
                },
                card: {
                    acceptAmex: true,
                    acceptDiscover: false,
                    acceptMastercard: true,
                    acceptVisa: true,
                },
                odp: {
                    allowAch: true,
                    allowChecks: true,
                    allowVCard: true,
                    processing_region: "US",
                    processor: "tysys",
                    issuerNetworkSettingsId: "12345678901234",
                },
            },
            signer: {
                acceptance: false,
                address: "33 North St",
                address1: "STE 900",
                city: "Bristol",
                country: "US",
                dob: "01/01/1990",
                email: "example@email.com",
                name: "John Smith",
                phone: "555888111",
                signedDocumentReference: "signedDocumentReference",
                signerUuid: "54455d5d-34ff-416c-91e0-5bc87199999",
                ssn: "123456789",
                state: "TN",
                zip: "55555",
            },
            taxfillname: "Sunshine LLC",
            templateId: 22,
            websiteAddress: "www.example.com",
            whencharged: "When Service Provided",
            whendelivered: "0-7 Days",
            whenProvided: "30 Days or Less",
            whenrefund: "Exchange Only",
        });
    });

    test("GetApplicationByAuth (99afdcaf)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { email: undefined, referenceId: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/Boarding/read/xId")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.boarding.getApplicationByAuth("xId", {
                email: undefined,
                referenceId: undefined,
            });
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("GetApplicationByAuth (c17ae8bf)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { email: undefined, referenceId: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/Boarding/read/xId")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.boarding.getApplicationByAuth("xId", {
                email: undefined,
                referenceId: undefined,
            });
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("GetApplicationByAuth (bb651b9b)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { email: undefined, referenceId: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/Boarding/read/xId")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.boarding.getApplicationByAuth("xId", {
                email: undefined,
                referenceId: undefined,
            });
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("GetApplicationByAuth (761b3dc1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { email: undefined, referenceId: undefined };
        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .post("/Boarding/read/xId")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.boarding.getApplicationByAuth("xId", {
                email: undefined,
                referenceId: undefined,
            });
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("GetByIdLinkApplication (c0832a82)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            acceptOauth: false,
            acceptRegister: false,
            builderData: { attributes: { minimumDocuments: 1, multipleContacts: true, multipleOwners: true } },
            entryAttributes: "entryAttributes",
            id: 1000000,
            logo: {
                fContent: "TXkgdGVzdCBmaWxlHJ==...",
                filename: "my-doc.pdf",
                ftype: "pdf",
                furl: "https://mysite.com/my-doc.pdf",
            },
            orgId: 123,
            "pageIdentifier:": "null",
            recipientEmailNotification: true,
            referenceName: "payabli-00710",
            referenceTemplateId: 1830,
            resumable: false,
        };
        server
            .mockEndpoint()
            .get("/Boarding/linkbyId/91")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.boarding.getByIdLinkApplication(91);
        expect(response).toEqual({
            acceptOauth: false,
            acceptRegister: false,
            builderData: {
                attributes: {
                    minimumDocuments: 1,
                    multipleContacts: true,
                    multipleOwners: true,
                },
            },
            entryAttributes: "entryAttributes",
            id: 1000000,
            logo: {
                fContent: "TXkgdGVzdCBmaWxlHJ==...",
                filename: "my-doc.pdf",
                ftype: "pdf",
                furl: "https://mysite.com/my-doc.pdf",
            },
            orgId: 123,
            "pageIdentifier:": "null",
            recipientEmailNotification: true,
            referenceName: "payabli-00710",
            referenceTemplateId: 1830,
            resumable: false,
        });
    });

    test("GetByIdLinkApplication (cb25223c)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Boarding/linkbyId/1")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.boarding.getByIdLinkApplication(1);
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("GetByIdLinkApplication (e5ed95c4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Boarding/linkbyId/1")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.boarding.getByIdLinkApplication(1);
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("GetByIdLinkApplication (d54f0e38)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Boarding/linkbyId/1")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.boarding.getByIdLinkApplication(1);
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("GetByIdLinkApplication (c7f2424e)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .get("/Boarding/linkbyId/1")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.boarding.getByIdLinkApplication(1);
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("GetByTemplateIdLinkApplication (56d93c82)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            acceptOauth: false,
            acceptRegister: false,
            builderData: { attributes: { minimumDocuments: 1, multipleContacts: true, multipleOwners: true } },
            entryAttributes: "entryAttributes",
            id: 1000000,
            logo: {
                fContent: "TXkgdGVzdCBmaWxlHJ==...",
                filename: "my-doc.pdf",
                ftype: "pdf",
                furl: "https://mysite.com/my-doc.pdf",
            },
            orgId: 123,
            "pageIdentifier:": "null",
            recipientEmailNotification: true,
            referenceName: "payabli-00710",
            referenceTemplateId: 1830,
            resumable: false,
        };
        server
            .mockEndpoint()
            .get("/Boarding/linkbyTemplate/80")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.boarding.getByTemplateIdLinkApplication(80);
        expect(response).toEqual({
            acceptOauth: false,
            acceptRegister: false,
            builderData: {
                attributes: {
                    minimumDocuments: 1,
                    multipleContacts: true,
                    multipleOwners: true,
                },
            },
            entryAttributes: "entryAttributes",
            id: 1000000,
            logo: {
                fContent: "TXkgdGVzdCBmaWxlHJ==...",
                filename: "my-doc.pdf",
                ftype: "pdf",
                furl: "https://mysite.com/my-doc.pdf",
            },
            orgId: 123,
            "pageIdentifier:": "null",
            recipientEmailNotification: true,
            referenceName: "payabli-00710",
            referenceTemplateId: 1830,
            resumable: false,
        });
    });

    test("GetByTemplateIdLinkApplication (6cd303aa)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Boarding/linkbyTemplate/1.1")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.boarding.getByTemplateIdLinkApplication(1.1);
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("GetByTemplateIdLinkApplication (81721102)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Boarding/linkbyTemplate/1.1")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.boarding.getByTemplateIdLinkApplication(1.1);
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("GetByTemplateIdLinkApplication (d3e8be36)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Boarding/linkbyTemplate/1.1")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.boarding.getByTemplateIdLinkApplication(1.1);
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("GetByTemplateIdLinkApplication (da2f7650)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .get("/Boarding/linkbyTemplate/1.1")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.boarding.getByTemplateIdLinkApplication(1.1);
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("getExternalApplication (Example Response)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            isSuccess: true,
            responseCode: 1,
            responseData: {
                appLink: "https://boarding-sandbox.payabli.com/boarding/externalapp/load/17E",
                referenceId: "n6UCd1f1ygG7",
            },
            responseText: "Success",
        };
        server
            .mockEndpoint()
            .put("/Boarding/applink/352/mail2")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.boarding.getExternalApplication(352, "mail2");
        expect(response).toEqual({
            isSuccess: true,
            responseCode: 1,
            responseData: {
                appLink: "https://boarding-sandbox.payabli.com/boarding/externalapp/load/17E",
                referenceId: "n6UCd1f1ygG7",
            },
            responseText: "Success",
        });
    });

    test("getExternalApplication (2e21392b)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/Boarding/applink/1/mail2")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.boarding.getExternalApplication(1, "mail2");
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("getExternalApplication (381d079b)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/Boarding/applink/1/mail2")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.boarding.getExternalApplication(1, "mail2");
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("getExternalApplication (7f05ca47)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/Boarding/applink/1/mail2")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.boarding.getExternalApplication(1, "mail2");
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("getExternalApplication (e2cb1dfd)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .put("/Boarding/applink/1/mail2")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.boarding.getExternalApplication(1, "mail2");
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("GetLinkApplication (e0f2d6a7)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            acceptOauth: false,
            acceptRegister: false,
            builderData: { attributes: { minimumDocuments: 1, multipleContacts: true, multipleOwners: true } },
            entryAttributes: "entryAttributes",
            id: 1000000,
            logo: {
                fContent: "TXkgdGVzdCBmaWxlHJ==...",
                filename: "my-doc.pdf",
                ftype: "pdf",
                furl: "https://mysite.com/my-doc.pdf",
            },
            orgId: 123,
            "pageIdentifier:": "null",
            recipientEmailNotification: true,
            referenceName: "payabli-00710",
            referenceTemplateId: 1830,
            resumable: false,
        };
        server
            .mockEndpoint()
            .get("/Boarding/link/myorgaccountname-00091")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.boarding.getLinkApplication("myorgaccountname-00091");
        expect(response).toEqual({
            acceptOauth: false,
            acceptRegister: false,
            builderData: {
                attributes: {
                    minimumDocuments: 1,
                    multipleContacts: true,
                    multipleOwners: true,
                },
            },
            entryAttributes: "entryAttributes",
            id: 1000000,
            logo: {
                fContent: "TXkgdGVzdCBmaWxlHJ==...",
                filename: "my-doc.pdf",
                ftype: "pdf",
                furl: "https://mysite.com/my-doc.pdf",
            },
            orgId: 123,
            "pageIdentifier:": "null",
            recipientEmailNotification: true,
            referenceName: "payabli-00710",
            referenceTemplateId: 1830,
            resumable: false,
        });
    });

    test("GetLinkApplication (3e696ca3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Boarding/link/boardingLinkReference")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.boarding.getLinkApplication("boardingLinkReference");
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("GetLinkApplication (f6b04eb3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Boarding/link/boardingLinkReference")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.boarding.getLinkApplication("boardingLinkReference");
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("GetLinkApplication (d966b7ff)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Boarding/link/boardingLinkReference")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.boarding.getLinkApplication("boardingLinkReference");
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("GetLinkApplication (ba60305)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .get("/Boarding/link/boardingLinkReference")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.boarding.getLinkApplication("boardingLinkReference");
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("ListApplications (23e7e7f1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            Records: [
                {
                    annualRevenue: 1000,
                    averageMonthlyVolume: 1000,
                    averageTicketAmount: 1000,
                    bAddress1: "123 Walnut Street",
                    bAddress2: "Suite 103",
                    bankData: [
                        {
                            bankAccountFunction: 0,
                            bankAccountHolderName: "Gruzya Adventure Outfitters LLC",
                            nickname: "Business Checking 1234",
                        },
                    ],
                    bCity: "New Vegas",
                    bCountry: "US",
                    bFax: "5551234567",
                    binPerson: 60,
                    binPhone: 20,
                    binWeb: 20,
                    boardingLinkId: 91,
                    boardingStatus: 1,
                    boardingSubStatus: 1,
                    bPhone: "5551234567",
                    bStartdate: "01/01/1990",
                    bState: "FL",
                    bSummary: "Brick and mortar store that sells office supplies",
                    bZip: "33000",
                    contactData: [{}],
                    createdAt: "2022-07-01T15:00:01Z",
                    dbaName: "Sunshine Gutters",
                    ein: "123456789",
                    externalPaypointId: "Paypoint-100",
                    generalEvents: [{ description: "TransferCreated", eventTime: "2023-07-05T22:31:06Z" }],
                    highTicketAmount: 1000,
                    idApplication: 352,
                    lastModified: "2022-07-01T15:00:01Z",
                    legalName: "Sunshine Services, LLC",
                    license: "2222222FFG",
                    licenseState: "CA",
                    mAddress1: "123 Walnut Street",
                    mAddress2: "STE 900",
                    mccid: "mccid",
                    mCity: "TN",
                    mCountry: "US",
                    mState: "TN",
                    mZip: "37615",
                    orgId: 123,
                    orgParentName: "PropertyManager Pro",
                    ownerData: [{}],
                    ownType: "Limited Liability Company",
                    pageidentifier: "null",
                    recipientEmailNotification: true,
                    resumable: false,
                    salesCode: "salesCode",
                    taxfillname: "Sunshine LLC",
                    templateId: 22,
                    websiteAddress: "www.example.com",
                    whencharged: "When Service Provided",
                    whendelivered: "0-7 Days",
                    whenProvided: "30 Days or Less",
                    whenrefund: "Exchange Only",
                },
            ],
            Summary: {
                pageIdentifier: "null",
                pageSize: 20,
                totalAmount: 77.22,
                totalNetAmount: 77.22,
                totalPages: 2,
                totalRecords: 2,
            },
        };
        server
            .mockEndpoint()
            .get("/Query/boarding/123")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.boarding.listApplications(123, {
            fromRecord: 251,
            limitRecord: 0,
            sortBy: "desc(field_name)",
        });
        expect(response).toEqual({
            Records: [
                {
                    annualRevenue: 1000,
                    averageMonthlyVolume: 1000,
                    averageTicketAmount: 1000,
                    bAddress1: "123 Walnut Street",
                    bAddress2: "Suite 103",
                    bankData: [
                        {
                            bankAccountFunction: 0,
                            bankAccountHolderName: "Gruzya Adventure Outfitters LLC",
                            nickname: "Business Checking 1234",
                        },
                    ],
                    bCity: "New Vegas",
                    bCountry: "US",
                    bFax: "5551234567",
                    binPerson: 60,
                    binPhone: 20,
                    binWeb: 20,
                    boardingLinkId: 91,
                    boardingStatus: 1,
                    boardingSubStatus: 1,
                    bPhone: "5551234567",
                    bStartdate: "01/01/1990",
                    bState: "FL",
                    bSummary: "Brick and mortar store that sells office supplies",
                    bZip: "33000",
                    contactData: [{}],
                    createdAt: "2022-07-01T15:00:01Z",
                    dbaName: "Sunshine Gutters",
                    ein: "123456789",
                    externalPaypointId: "Paypoint-100",
                    generalEvents: [
                        {
                            description: "TransferCreated",
                            eventTime: "2023-07-05T22:31:06Z",
                        },
                    ],
                    highTicketAmount: 1000,
                    idApplication: 352,
                    lastModified: "2022-07-01T15:00:01Z",
                    legalName: "Sunshine Services, LLC",
                    license: "2222222FFG",
                    licenseState: "CA",
                    mAddress1: "123 Walnut Street",
                    mAddress2: "STE 900",
                    mccid: "mccid",
                    mCity: "TN",
                    mCountry: "US",
                    mState: "TN",
                    mZip: "37615",
                    orgId: 123,
                    orgParentName: "PropertyManager Pro",
                    ownerData: [{}],
                    ownType: "Limited Liability Company",
                    pageidentifier: "null",
                    recipientEmailNotification: true,
                    resumable: false,
                    salesCode: "salesCode",
                    taxfillname: "Sunshine LLC",
                    templateId: 22,
                    websiteAddress: "www.example.com",
                    whencharged: "When Service Provided",
                    whendelivered: "0-7 Days",
                    whenProvided: "30 Days or Less",
                    whenrefund: "Exchange Only",
                },
            ],
            Summary: {
                pageIdentifier: "null",
                pageSize: 20,
                totalAmount: 77.22,
                totalNetAmount: 77.22,
                totalPages: 2,
                totalRecords: 2,
            },
        });
    });

    test("ListApplications (fdb69624)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/Query/boarding/1").respondWith().statusCode(400).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.boarding.listApplications(1);
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("ListApplications (22cda34c)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/Query/boarding/1").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.boarding.listApplications(1);
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("ListApplications (100f5d00)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/Query/boarding/1").respondWith().statusCode(500).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.boarding.listApplications(1);
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("ListApplications (d335cac6)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server.mockEndpoint().get("/Query/boarding/1").respondWith().statusCode(503).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.boarding.listApplications(1);
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("ListBoardingLinks (3549aa5e)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            Records: [
                {
                    AcceptOauth: false,
                    AcceptRegister: false,
                    EntryAttributes: "EntryAttributes",
                    Id: 1,
                    LastUpdated: "2022-07-01T15:00:01Z",
                    OrgParentName: "PropertyManager Pro",
                    ReferenceName: "payabli-00710",
                    ReferenceTemplateId: 1830,
                    TemplateCode: "TemplateCode",
                    TemplateName: "SMB",
                },
            ],
            Summary: {
                pageIdentifier: "null",
                pageSize: 20,
                totalAmount: 77.22,
                totalNetAmount: 77.22,
                totalPages: 2,
                totalRecords: 2,
            },
        };
        server
            .mockEndpoint()
            .get("/Query/boardinglinks/123")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.boarding.listBoardingLinks(123, {
            fromRecord: 251,
            limitRecord: 0,
            sortBy: "desc(field_name)",
        });
        expect(response).toEqual({
            Records: [
                {
                    AcceptOauth: false,
                    AcceptRegister: false,
                    EntryAttributes: "EntryAttributes",
                    Id: 1,
                    LastUpdated: "2022-07-01T15:00:01Z",
                    OrgParentName: "PropertyManager Pro",
                    ReferenceName: "payabli-00710",
                    ReferenceTemplateId: 1830,
                    TemplateCode: "TemplateCode",
                    TemplateName: "SMB",
                },
            ],
            Summary: {
                pageIdentifier: "null",
                pageSize: 20,
                totalAmount: 77.22,
                totalNetAmount: 77.22,
                totalPages: 2,
                totalRecords: 2,
            },
        });
    });

    test("ListBoardingLinks (fdb69624)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/boardinglinks/1")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.boarding.listBoardingLinks(1);
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("ListBoardingLinks (22cda34c)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/boardinglinks/1")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.boarding.listBoardingLinks(1);
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("ListBoardingLinks (100f5d00)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/boardinglinks/1")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.boarding.listBoardingLinks(1);
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("ListBoardingLinks (d335cac6)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .get("/Query/boardinglinks/1")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.boarding.listBoardingLinks(1);
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("UpdateApplication (General success response example for some boarding operations.)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { isSuccess: true, responseCode: 1, responseData: 3625, responseText: "Success" };
        server
            .mockEndpoint()
            .put("/Boarding/app/352")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.boarding.updateApplication(352, {});
        expect(response).toEqual({
            isSuccess: true,
            responseCode: 1,
            responseData: 3625,
            responseText: "Success",
        });
    });

    test("UpdateApplication (bdf59af3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            services: undefined,
            annualRevenue: undefined,
            attachments: undefined,
            avgmonthly: undefined,
            baddress: undefined,
            baddress1: undefined,
            bankData: undefined,
            bcity: undefined,
            bcountry: undefined,
            binperson: undefined,
            binphone: undefined,
            binweb: undefined,
            bstate: undefined,
            bsummary: undefined,
            btype: undefined,
            bzip: undefined,
            contacts: undefined,
            dbaname: undefined,
            ein: undefined,
            externalPaypointId: undefined,
            faxnumber: undefined,
            highticketamt: undefined,
            legalname: undefined,
            license: undefined,
            licstate: undefined,
            maddress: undefined,
            maddress1: undefined,
            mcc: undefined,
            mcity: undefined,
            mcountry: undefined,
            mstate: undefined,
            mzip: undefined,
            orgId: undefined,
            ownership: undefined,
            payoutAverageMonthlyVolume: undefined,
            payoutAverageTicketLimit: undefined,
            payoutCreditLimit: undefined,
            payoutHighTicketAmount: undefined,
            phonenumber: undefined,
            recipientEmail: undefined,
            recipientEmailNotification: undefined,
            resumable: undefined,
            signer: undefined,
            startdate: undefined,
            taxfillname: undefined,
            templateId: undefined,
            ticketamt: undefined,
            website: undefined,
            whenCharged: undefined,
            whenDelivered: undefined,
            whenProvided: undefined,
            whenRefunded: undefined,
            RepCode: undefined,
            RepName: undefined,
            RepOffice: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/Boarding/app/1")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.boarding.updateApplication(1, {
                services: undefined,
                annualRevenue: undefined,
                attachments: undefined,
                avgmonthly: undefined,
                baddress: undefined,
                baddress1: undefined,
                bankData: undefined,
                bcity: undefined,
                bcountry: undefined,
                binperson: undefined,
                binphone: undefined,
                binweb: undefined,
                bstate: undefined,
                bsummary: undefined,
                btype: undefined,
                bzip: undefined,
                contacts: undefined,
                dbaname: undefined,
                ein: undefined,
                externalPaypointId: undefined,
                faxnumber: undefined,
                highticketamt: undefined,
                legalname: undefined,
                license: undefined,
                licstate: undefined,
                maddress: undefined,
                maddress1: undefined,
                mcc: undefined,
                mcity: undefined,
                mcountry: undefined,
                mstate: undefined,
                mzip: undefined,
                orgId: undefined,
                ownership: undefined,
                payoutAverageMonthlyVolume: undefined,
                payoutAverageTicketLimit: undefined,
                payoutCreditLimit: undefined,
                payoutHighTicketAmount: undefined,
                phonenumber: undefined,
                recipientEmail: undefined,
                recipientEmailNotification: undefined,
                resumable: undefined,
                signer: undefined,
                startdate: undefined,
                taxfillname: undefined,
                templateId: undefined,
                ticketamt: undefined,
                website: undefined,
                whenCharged: undefined,
                whenDelivered: undefined,
                whenProvided: undefined,
                whenRefunded: undefined,
                RepCode: undefined,
                RepName: undefined,
                RepOffice: undefined,
            });
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("UpdateApplication (58d3b343)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            services: undefined,
            annualRevenue: undefined,
            attachments: undefined,
            avgmonthly: undefined,
            baddress: undefined,
            baddress1: undefined,
            bankData: undefined,
            bcity: undefined,
            bcountry: undefined,
            binperson: undefined,
            binphone: undefined,
            binweb: undefined,
            bstate: undefined,
            bsummary: undefined,
            btype: undefined,
            bzip: undefined,
            contacts: undefined,
            dbaname: undefined,
            ein: undefined,
            externalPaypointId: undefined,
            faxnumber: undefined,
            highticketamt: undefined,
            legalname: undefined,
            license: undefined,
            licstate: undefined,
            maddress: undefined,
            maddress1: undefined,
            mcc: undefined,
            mcity: undefined,
            mcountry: undefined,
            mstate: undefined,
            mzip: undefined,
            orgId: undefined,
            ownership: undefined,
            payoutAverageMonthlyVolume: undefined,
            payoutAverageTicketLimit: undefined,
            payoutCreditLimit: undefined,
            payoutHighTicketAmount: undefined,
            phonenumber: undefined,
            recipientEmail: undefined,
            recipientEmailNotification: undefined,
            resumable: undefined,
            signer: undefined,
            startdate: undefined,
            taxfillname: undefined,
            templateId: undefined,
            ticketamt: undefined,
            website: undefined,
            whenCharged: undefined,
            whenDelivered: undefined,
            whenProvided: undefined,
            whenRefunded: undefined,
            RepCode: undefined,
            RepName: undefined,
            RepOffice: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/Boarding/app/1")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.boarding.updateApplication(1, {
                services: undefined,
                annualRevenue: undefined,
                attachments: undefined,
                avgmonthly: undefined,
                baddress: undefined,
                baddress1: undefined,
                bankData: undefined,
                bcity: undefined,
                bcountry: undefined,
                binperson: undefined,
                binphone: undefined,
                binweb: undefined,
                bstate: undefined,
                bsummary: undefined,
                btype: undefined,
                bzip: undefined,
                contacts: undefined,
                dbaname: undefined,
                ein: undefined,
                externalPaypointId: undefined,
                faxnumber: undefined,
                highticketamt: undefined,
                legalname: undefined,
                license: undefined,
                licstate: undefined,
                maddress: undefined,
                maddress1: undefined,
                mcc: undefined,
                mcity: undefined,
                mcountry: undefined,
                mstate: undefined,
                mzip: undefined,
                orgId: undefined,
                ownership: undefined,
                payoutAverageMonthlyVolume: undefined,
                payoutAverageTicketLimit: undefined,
                payoutCreditLimit: undefined,
                payoutHighTicketAmount: undefined,
                phonenumber: undefined,
                recipientEmail: undefined,
                recipientEmailNotification: undefined,
                resumable: undefined,
                signer: undefined,
                startdate: undefined,
                taxfillname: undefined,
                templateId: undefined,
                ticketamt: undefined,
                website: undefined,
                whenCharged: undefined,
                whenDelivered: undefined,
                whenProvided: undefined,
                whenRefunded: undefined,
                RepCode: undefined,
                RepName: undefined,
                RepOffice: undefined,
            });
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("UpdateApplication (9dc70e0f)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            services: undefined,
            annualRevenue: undefined,
            attachments: undefined,
            avgmonthly: undefined,
            baddress: undefined,
            baddress1: undefined,
            bankData: undefined,
            bcity: undefined,
            bcountry: undefined,
            binperson: undefined,
            binphone: undefined,
            binweb: undefined,
            bstate: undefined,
            bsummary: undefined,
            btype: undefined,
            bzip: undefined,
            contacts: undefined,
            dbaname: undefined,
            ein: undefined,
            externalPaypointId: undefined,
            faxnumber: undefined,
            highticketamt: undefined,
            legalname: undefined,
            license: undefined,
            licstate: undefined,
            maddress: undefined,
            maddress1: undefined,
            mcc: undefined,
            mcity: undefined,
            mcountry: undefined,
            mstate: undefined,
            mzip: undefined,
            orgId: undefined,
            ownership: undefined,
            payoutAverageMonthlyVolume: undefined,
            payoutAverageTicketLimit: undefined,
            payoutCreditLimit: undefined,
            payoutHighTicketAmount: undefined,
            phonenumber: undefined,
            recipientEmail: undefined,
            recipientEmailNotification: undefined,
            resumable: undefined,
            signer: undefined,
            startdate: undefined,
            taxfillname: undefined,
            templateId: undefined,
            ticketamt: undefined,
            website: undefined,
            whenCharged: undefined,
            whenDelivered: undefined,
            whenProvided: undefined,
            whenRefunded: undefined,
            RepCode: undefined,
            RepName: undefined,
            RepOffice: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/Boarding/app/1")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.boarding.updateApplication(1, {
                services: undefined,
                annualRevenue: undefined,
                attachments: undefined,
                avgmonthly: undefined,
                baddress: undefined,
                baddress1: undefined,
                bankData: undefined,
                bcity: undefined,
                bcountry: undefined,
                binperson: undefined,
                binphone: undefined,
                binweb: undefined,
                bstate: undefined,
                bsummary: undefined,
                btype: undefined,
                bzip: undefined,
                contacts: undefined,
                dbaname: undefined,
                ein: undefined,
                externalPaypointId: undefined,
                faxnumber: undefined,
                highticketamt: undefined,
                legalname: undefined,
                license: undefined,
                licstate: undefined,
                maddress: undefined,
                maddress1: undefined,
                mcc: undefined,
                mcity: undefined,
                mcountry: undefined,
                mstate: undefined,
                mzip: undefined,
                orgId: undefined,
                ownership: undefined,
                payoutAverageMonthlyVolume: undefined,
                payoutAverageTicketLimit: undefined,
                payoutCreditLimit: undefined,
                payoutHighTicketAmount: undefined,
                phonenumber: undefined,
                recipientEmail: undefined,
                recipientEmailNotification: undefined,
                resumable: undefined,
                signer: undefined,
                startdate: undefined,
                taxfillname: undefined,
                templateId: undefined,
                ticketamt: undefined,
                website: undefined,
                whenCharged: undefined,
                whenDelivered: undefined,
                whenProvided: undefined,
                whenRefunded: undefined,
                RepCode: undefined,
                RepName: undefined,
                RepOffice: undefined,
            });
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("UpdateApplication (f9d3d1f5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            services: undefined,
            annualRevenue: undefined,
            attachments: undefined,
            avgmonthly: undefined,
            baddress: undefined,
            baddress1: undefined,
            bankData: undefined,
            bcity: undefined,
            bcountry: undefined,
            binperson: undefined,
            binphone: undefined,
            binweb: undefined,
            bstate: undefined,
            bsummary: undefined,
            btype: undefined,
            bzip: undefined,
            contacts: undefined,
            dbaname: undefined,
            ein: undefined,
            externalPaypointId: undefined,
            faxnumber: undefined,
            highticketamt: undefined,
            legalname: undefined,
            license: undefined,
            licstate: undefined,
            maddress: undefined,
            maddress1: undefined,
            mcc: undefined,
            mcity: undefined,
            mcountry: undefined,
            mstate: undefined,
            mzip: undefined,
            orgId: undefined,
            ownership: undefined,
            payoutAverageMonthlyVolume: undefined,
            payoutAverageTicketLimit: undefined,
            payoutCreditLimit: undefined,
            payoutHighTicketAmount: undefined,
            phonenumber: undefined,
            recipientEmail: undefined,
            recipientEmailNotification: undefined,
            resumable: undefined,
            signer: undefined,
            startdate: undefined,
            taxfillname: undefined,
            templateId: undefined,
            ticketamt: undefined,
            website: undefined,
            whenCharged: undefined,
            whenDelivered: undefined,
            whenProvided: undefined,
            whenRefunded: undefined,
            RepCode: undefined,
            RepName: undefined,
            RepOffice: undefined,
        };
        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .put("/Boarding/app/1")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.boarding.updateApplication(1, {
                services: undefined,
                annualRevenue: undefined,
                attachments: undefined,
                avgmonthly: undefined,
                baddress: undefined,
                baddress1: undefined,
                bankData: undefined,
                bcity: undefined,
                bcountry: undefined,
                binperson: undefined,
                binphone: undefined,
                binweb: undefined,
                bstate: undefined,
                bsummary: undefined,
                btype: undefined,
                bzip: undefined,
                contacts: undefined,
                dbaname: undefined,
                ein: undefined,
                externalPaypointId: undefined,
                faxnumber: undefined,
                highticketamt: undefined,
                legalname: undefined,
                license: undefined,
                licstate: undefined,
                maddress: undefined,
                maddress1: undefined,
                mcc: undefined,
                mcity: undefined,
                mcountry: undefined,
                mstate: undefined,
                mzip: undefined,
                orgId: undefined,
                ownership: undefined,
                payoutAverageMonthlyVolume: undefined,
                payoutAverageTicketLimit: undefined,
                payoutCreditLimit: undefined,
                payoutHighTicketAmount: undefined,
                phonenumber: undefined,
                recipientEmail: undefined,
                recipientEmailNotification: undefined,
                resumable: undefined,
                signer: undefined,
                startdate: undefined,
                taxfillname: undefined,
                templateId: undefined,
                ticketamt: undefined,
                website: undefined,
                whenCharged: undefined,
                whenDelivered: undefined,
                whenProvided: undefined,
                whenRefunded: undefined,
                RepCode: undefined,
                RepName: undefined,
                RepOffice: undefined,
            });
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });
});
