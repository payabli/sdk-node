/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { PayabliClient } from "../../src/Client";
import * as Payabli from "../../src/api/index";

describe("Notification", () => {
    test("AddNotification (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            content: { eventType: "CreatedApplication" },
            frequency: "untilcancelled",
            method: "web",
            ownerId: "236",
            ownerType: 0,
            status: 1,
            target: "https://webhook.site/2871b8f8-edc7-441a-b376-98d8c8e33275",
        };
        const rawResponseBody = { isSuccess: true, responseCode: 1, responseData: 1717, responseText: "Success" };
        server
            .mockEndpoint()
            .post("/Notification")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.notification.addNotification({
            content: {
                eventType: "CreatedApplication",
            },
            frequency: "untilcancelled",
            method: "web",
            ownerId: "236",
            ownerType: 0,
            status: 1,
            target: "https://webhook.site/2871b8f8-edc7-441a-b376-98d8c8e33275",
        });
        expect(response).toEqual({
            isSuccess: true,
            responseCode: 1,
            responseData: 1717,
            responseText: "Success",
        });
    });

    test("AddNotification (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            content: {
                eventType: "Report",
                fileFormat: "json",
                reportName: "Transaction",
                timeZone: -5,
                transactionId: "0",
            },
            frequency: "biweekly",
            method: "report-email",
            ownerId: "236",
            ownerType: 0,
            status: 1,
            target: "admin@example.com",
        };
        const rawResponseBody = { isSuccess: true, responseCode: 1, responseData: 1717, responseText: "Success" };
        server
            .mockEndpoint()
            .post("/Notification")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.notification.addNotification({
            content: {
                eventType: "Report",
                fileFormat: "json",
                reportName: "Transaction",
                timeZone: -5,
                transactionId: "0",
            },
            frequency: "biweekly",
            method: "report-email",
            ownerId: "236",
            ownerType: 0,
            status: 1,
            target: "admin@example.com",
        });
        expect(response).toEqual({
            isSuccess: true,
            responseCode: 1,
            responseData: 1717,
            responseText: "Success",
        });
    });

    test("AddNotification (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            content: undefined,
            frequency: "one-time",
            method: "email",
            ownerId: undefined,
            ownerType: 1,
            status: undefined,
            target: "target",
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/Notification")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.notification.addNotification({
                content: undefined,
                frequency: "one-time",
                method: "email",
                ownerId: undefined,
                ownerType: 1,
                status: undefined,
                target: "target",
            });
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("AddNotification (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            content: undefined,
            frequency: "one-time",
            method: "email",
            ownerId: undefined,
            ownerType: 1,
            status: undefined,
            target: "target",
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/Notification")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.notification.addNotification({
                content: undefined,
                frequency: "one-time",
                method: "email",
                ownerId: undefined,
                ownerType: 1,
                status: undefined,
                target: "target",
            });
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("AddNotification (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            content: undefined,
            frequency: "one-time",
            method: "email",
            ownerId: undefined,
            ownerType: 1,
            status: undefined,
            target: "target",
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/Notification")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.notification.addNotification({
                content: undefined,
                frequency: "one-time",
                method: "email",
                ownerId: undefined,
                ownerType: 1,
                status: undefined,
                target: "target",
            });
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("AddNotification (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            content: undefined,
            frequency: "one-time",
            method: "email",
            ownerId: undefined,
            ownerType: 1,
            status: undefined,
            target: "target",
        };
        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: "responseText" };
        server
            .mockEndpoint()
            .post("/Notification")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.notification.addNotification({
                content: undefined,
                frequency: "one-time",
                method: "email",
                ownerId: undefined,
                ownerType: 1,
                status: undefined,
                target: "target",
            });
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: "responseText",
            }),
        );
    });

    test("DeleteNotification (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: true, responseCode: 1, responseData: 1717, responseText: "Success" };
        server
            .mockEndpoint()
            .delete("/Notification/1717")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.notification.deleteNotification("1717");
        expect(response).toEqual({
            isSuccess: true,
            responseCode: 1,
            responseData: 1717,
            responseText: "Success",
        });
    });

    test("DeleteNotification (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/Notification/nId")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.notification.deleteNotification("nId");
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("DeleteNotification (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/Notification/nId")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.notification.deleteNotification("nId");
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("DeleteNotification (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/Notification/nId")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.notification.deleteNotification("nId");
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("DeleteNotification (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: "responseText" };
        server
            .mockEndpoint()
            .delete("/Notification/nId")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.notification.deleteNotification("nId");
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: "responseText",
            }),
        );
    });

    test("GetNotification (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            content: { fileFormat: "csv", reportName: "Returned" },
            createdAt: "2024-02-21T09:16:31Z",
            frequency: "weekly",
            lastUpdated: "2024-02-21T09:16:31Z",
            method: "report-email",
            notificationId: 1717,
            ownerId: "123",
            ownerName: "The Pilgrim Planner",
            ownerType: 0,
            status: 1,
            target: "admin@business.com",
        };
        server.mockEndpoint().get("/Notification/1717").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.notification.getNotification("1717");
        expect(response).toEqual({
            content: {
                fileFormat: "csv",
                reportName: "Returned",
            },
            createdAt: "2024-02-21T09:16:31Z",
            frequency: "weekly",
            lastUpdated: "2024-02-21T09:16:31Z",
            method: "report-email",
            notificationId: 1717,
            ownerId: "123",
            ownerName: "The Pilgrim Planner",
            ownerType: 0,
            status: 1,
            target: "admin@business.com",
        });
    });

    test("GetNotification (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/Notification/nId").respondWith().statusCode(400).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.notification.getNotification("nId");
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("GetNotification (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/Notification/nId").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.notification.getNotification("nId");
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("GetNotification (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/Notification/nId").respondWith().statusCode(500).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.notification.getNotification("nId");
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("GetNotification (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: "responseText" };
        server.mockEndpoint().get("/Notification/nId").respondWith().statusCode(503).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.notification.getNotification("nId");
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: "responseText",
            }),
        );
    });

    test("UpdateNotification (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            content: { eventType: "ApprovedPayment" },
            frequency: "untilcancelled",
            method: "email",
            ownerId: "136",
            ownerType: 0,
            status: 1,
            target: "newemail@email.com",
        };
        const rawResponseBody = { isSuccess: true, responseCode: 1, responseData: 1717, responseText: "Success" };
        server
            .mockEndpoint()
            .put("/Notification/1717")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.notification.updateNotification("1717", {
            content: {
                eventType: "ApprovedPayment",
            },
            frequency: "untilcancelled",
            method: "email",
            ownerId: "136",
            ownerType: 0,
            status: 1,
            target: "newemail@email.com",
        });
        expect(response).toEqual({
            isSuccess: true,
            responseCode: 1,
            responseData: 1717,
            responseText: "Success",
        });
    });

    test("UpdateNotification (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            content: undefined,
            frequency: "one-time",
            method: "email",
            ownerId: undefined,
            ownerType: 1,
            status: undefined,
            target: "target",
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/Notification/nId")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.notification.updateNotification("nId", {
                content: undefined,
                frequency: "one-time",
                method: "email",
                ownerId: undefined,
                ownerType: 1,
                status: undefined,
                target: "target",
            });
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("UpdateNotification (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            content: undefined,
            frequency: "one-time",
            method: "email",
            ownerId: undefined,
            ownerType: 1,
            status: undefined,
            target: "target",
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/Notification/nId")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.notification.updateNotification("nId", {
                content: undefined,
                frequency: "one-time",
                method: "email",
                ownerId: undefined,
                ownerType: 1,
                status: undefined,
                target: "target",
            });
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("UpdateNotification (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            content: undefined,
            frequency: "one-time",
            method: "email",
            ownerId: undefined,
            ownerType: 1,
            status: undefined,
            target: "target",
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/Notification/nId")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.notification.updateNotification("nId", {
                content: undefined,
                frequency: "one-time",
                method: "email",
                ownerId: undefined,
                ownerType: 1,
                status: undefined,
                target: "target",
            });
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("UpdateNotification (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            content: undefined,
            frequency: "one-time",
            method: "email",
            ownerId: undefined,
            ownerType: 1,
            status: undefined,
            target: "target",
        };
        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: "responseText" };
        server
            .mockEndpoint()
            .put("/Notification/nId")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.notification.updateNotification("nId", {
                content: undefined,
                frequency: "one-time",
                method: "email",
                ownerId: undefined,
                ownerType: 1,
                status: undefined,
                target: "target",
            });
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: "responseText",
            }),
        );
    });

    test("GetReportFile (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/notificationReport/1000000")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.notification.getReportFile(1000000);
        expect(response).toEqual({
            key: "value",
        });
    });

    test("GetReportFile (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/notificationReport/1000000")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.notification.getReportFile(1000000);
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("GetReportFile (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/notificationReport/1000000")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.notification.getReportFile(1000000);
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("GetReportFile (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Export/notificationReport/1000000")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.notification.getReportFile(1000000);
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("GetReportFile (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: "responseText" };
        server
            .mockEndpoint()
            .get("/Export/notificationReport/1000000")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.notification.getReportFile(1000000);
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: "responseText",
            }),
        );
    });
});
