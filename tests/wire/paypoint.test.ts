/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { PayabliClient } from "../../src/Client";
import * as Payabli from "../../src/api/index";

describe("Paypoint", () => {
    test("getBasicEntry (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            isSuccess: true,
            responseCode: 1,
            responseData: {
                EntryName: "abc123def",
                EntryPages: [
                    { AdditionalData: { key1: { key: "value" }, key2: { key: "value" }, key3: { key: "value" } } },
                ],
                IdEntry: 11111,
                Paypoint: {
                    address1: "123 Ocean Drive",
                    address2: "Suite 400",
                    bankData: [
                        {
                            bankAccountFunction: 0,
                            bankAccountHolderName: "Gruzya Adventure Outfitters LLC",
                            nickname: "Business Checking 1234",
                        },
                    ],
                    boardingId: 340,
                    city: "Bristol",
                    contacts: [{}],
                    country: "US",
                    credentials: [{}],
                    dbaName: "Sunshine Gutters",
                    externalPaypointID: "",
                    fax: "5555555555",
                    idPaypoint: 1000000,
                    legalName: "Sunshine Services, LLC",
                    parentOrg: { orgName: "Pilgrim Planner", orgStatus: 1, orgType: 0 },
                    paypointStatus: 1,
                    phone: "5555555555",
                    state: "GA",
                    summary: { amountSubs: 0, amountTx: 0, countSubs: 0, countTx: 0, customers: 1 },
                    timeZone: -5,
                    websiteAddress: "www.example.com",
                    zip: "31113",
                },
            },
            responseText: "Success",
        };
        server
            .mockEndpoint()
            .get("/Paypoint/basic/8cfec329267")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.paypoint.getBasicEntry("8cfec329267");
        expect(response).toEqual({
            isSuccess: true,
            responseCode: 1,
            responseData: {
                EntryName: "abc123def",
                EntryPages: [
                    {
                        AdditionalData: {
                            key1: {
                                key: "value",
                            },
                            key2: {
                                key: "value",
                            },
                            key3: {
                                key: "value",
                            },
                        },
                    },
                ],
                IdEntry: 11111,
                Paypoint: {
                    address1: "123 Ocean Drive",
                    address2: "Suite 400",
                    bankData: [
                        {
                            bankAccountFunction: 0,
                            bankAccountHolderName: "Gruzya Adventure Outfitters LLC",
                            nickname: "Business Checking 1234",
                        },
                    ],
                    boardingId: 340,
                    city: "Bristol",
                    contacts: [{}],
                    country: "US",
                    credentials: [{}],
                    dbaName: "Sunshine Gutters",
                    externalPaypointID: "",
                    fax: "5555555555",
                    idPaypoint: 1000000,
                    legalName: "Sunshine Services, LLC",
                    parentOrg: {
                        orgName: "Pilgrim Planner",
                        orgStatus: 1,
                        orgType: 0,
                    },
                    paypointStatus: 1,
                    phone: "5555555555",
                    state: "GA",
                    summary: {
                        amountSubs: 0,
                        amountTx: 0,
                        countSubs: 0,
                        countTx: 0,
                        customers: 1,
                    },
                    timeZone: -5,
                    websiteAddress: "www.example.com",
                    zip: "31113",
                },
            },
            responseText: "Success",
        });
    });

    test("getBasicEntry (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Paypoint/basic/entry")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paypoint.getBasicEntry("entry");
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("getBasicEntry (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Paypoint/basic/entry")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paypoint.getBasicEntry("entry");
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("getBasicEntry (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Paypoint/basic/entry")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paypoint.getBasicEntry("entry");
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("getBasicEntry (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: "responseText" };
        server
            .mockEndpoint()
            .get("/Paypoint/basic/entry")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paypoint.getBasicEntry("entry");
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: "responseText",
            }),
        );
    });

    test("getBasicEntryById (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            isSuccess: true,
            responseCode: 1,
            responseData: {
                EntryName: "abc123def",
                EntryPages: [
                    { AdditionalData: { key1: { key: "value" }, key2: { key: "value" }, key3: { key: "value" } } },
                ],
                IdEntry: 11111,
                Paypoint: {
                    address1: "123 Ocean Drive",
                    address2: "Suite 400",
                    bankData: [
                        {
                            bankAccountFunction: 0,
                            bankAccountHolderName: "Gruzya Adventure Outfitters LLC",
                            nickname: "Business Checking 1234",
                        },
                    ],
                    boardingId: 340,
                    city: "Bristol",
                    contacts: [{}],
                    country: "US",
                    credentials: [{}],
                    dbaName: "Sunshine Gutters",
                    externalPaypointID: "",
                    fax: "5555555555",
                    idPaypoint: 1000000,
                    legalName: "Sunshine Services, LLC",
                    parentOrg: { orgName: "Pilgrim Planner", orgStatus: 1, orgType: 0 },
                    paypointStatus: 1,
                    phone: "5555555555",
                    state: "GA",
                    summary: { amountSubs: 0, amountTx: 0, countSubs: 0, countTx: 0, customers: 1 },
                    timeZone: -5,
                    websiteAddress: "www.example.com",
                    zip: "31113",
                },
            },
            responseText: "Success",
        };
        server
            .mockEndpoint()
            .get("/Paypoint/basicById/198")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.paypoint.getBasicEntryById("198");
        expect(response).toEqual({
            isSuccess: true,
            responseCode: 1,
            responseData: {
                EntryName: "abc123def",
                EntryPages: [
                    {
                        AdditionalData: {
                            key1: {
                                key: "value",
                            },
                            key2: {
                                key: "value",
                            },
                            key3: {
                                key: "value",
                            },
                        },
                    },
                ],
                IdEntry: 11111,
                Paypoint: {
                    address1: "123 Ocean Drive",
                    address2: "Suite 400",
                    bankData: [
                        {
                            bankAccountFunction: 0,
                            bankAccountHolderName: "Gruzya Adventure Outfitters LLC",
                            nickname: "Business Checking 1234",
                        },
                    ],
                    boardingId: 340,
                    city: "Bristol",
                    contacts: [{}],
                    country: "US",
                    credentials: [{}],
                    dbaName: "Sunshine Gutters",
                    externalPaypointID: "",
                    fax: "5555555555",
                    idPaypoint: 1000000,
                    legalName: "Sunshine Services, LLC",
                    parentOrg: {
                        orgName: "Pilgrim Planner",
                        orgStatus: 1,
                        orgType: 0,
                    },
                    paypointStatus: 1,
                    phone: "5555555555",
                    state: "GA",
                    summary: {
                        amountSubs: 0,
                        amountTx: 0,
                        countSubs: 0,
                        countTx: 0,
                        customers: 1,
                    },
                    timeZone: -5,
                    websiteAddress: "www.example.com",
                    zip: "31113",
                },
            },
            responseText: "Success",
        });
    });

    test("getBasicEntryById (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Paypoint/basicById/IdPaypoint")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paypoint.getBasicEntryById("IdPaypoint");
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("getBasicEntryById (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Paypoint/basicById/IdPaypoint")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paypoint.getBasicEntryById("IdPaypoint");
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("getBasicEntryById (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Paypoint/basicById/IdPaypoint")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paypoint.getBasicEntryById("IdPaypoint");
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("getBasicEntryById (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: "responseText" };
        server
            .mockEndpoint()
            .get("/Paypoint/basicById/IdPaypoint")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paypoint.getBasicEntryById("IdPaypoint");
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: "responseText",
            }),
        );
    });

    test("getEntryConfig (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            isSuccess: true,
            responseCode: 1,
            responseData: {
                EntryName: "abc123def",
                EntryPages: [
                    { AdditionalData: { key1: { key: "value" }, key2: { key: "value" }, key3: { key: "value" } } },
                ],
                IdEntry: 11111,
                Paypoint: {
                    address1: "123 Ocean Drive",
                    address2: "Suite 400",
                    bankData: [
                        {
                            bankAccountFunction: 0,
                            bankAccountHolderName: "Gruzya Adventure Outfitters LLC",
                            nickname: "Business Checking 1234",
                        },
                    ],
                    boardingId: 340,
                    city: "Bristol",
                    contacts: [{}],
                    country: "US",
                    credentials: [{}],
                    dbaName: "Sunshine Gutters",
                    externalPaypointID: "",
                    fax: "5555555555",
                    idPaypoint: 1000000,
                    legalName: "Sunshine Services, LLC",
                    parentOrg: { orgName: "Pilgrim Planner", orgStatus: 1, orgType: 0 },
                    paypointStatus: 1,
                    phone: "5555555555",
                    state: "GA",
                    summary: { amountSubs: 0, amountTx: 0, countSubs: 0, countTx: 0, customers: 1 },
                    timeZone: -5,
                    websiteAddress: "www.example.com",
                    zip: "31113",
                },
            },
            responseText: "Success",
        };
        server
            .mockEndpoint()
            .get("/Paypoint/8cfec329267")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.paypoint.getEntryConfig("8cfec329267");
        expect(response).toEqual({
            isSuccess: true,
            responseCode: 1,
            responseData: {
                EntryName: "abc123def",
                EntryPages: [
                    {
                        AdditionalData: {
                            key1: {
                                key: "value",
                            },
                            key2: {
                                key: "value",
                            },
                            key3: {
                                key: "value",
                            },
                        },
                    },
                ],
                IdEntry: 11111,
                Paypoint: {
                    address1: "123 Ocean Drive",
                    address2: "Suite 400",
                    bankData: [
                        {
                            bankAccountFunction: 0,
                            bankAccountHolderName: "Gruzya Adventure Outfitters LLC",
                            nickname: "Business Checking 1234",
                        },
                    ],
                    boardingId: 340,
                    city: "Bristol",
                    contacts: [{}],
                    country: "US",
                    credentials: [{}],
                    dbaName: "Sunshine Gutters",
                    externalPaypointID: "",
                    fax: "5555555555",
                    idPaypoint: 1000000,
                    legalName: "Sunshine Services, LLC",
                    parentOrg: {
                        orgName: "Pilgrim Planner",
                        orgStatus: 1,
                        orgType: 0,
                    },
                    paypointStatus: 1,
                    phone: "5555555555",
                    state: "GA",
                    summary: {
                        amountSubs: 0,
                        amountTx: 0,
                        countSubs: 0,
                        countTx: 0,
                        customers: 1,
                    },
                    timeZone: -5,
                    websiteAddress: "www.example.com",
                    zip: "31113",
                },
            },
            responseText: "Success",
        });
    });

    test("getEntryConfig (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/Paypoint/entry").respondWith().statusCode(400).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.paypoint.getEntryConfig("entry");
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("getEntryConfig (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/Paypoint/entry").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.paypoint.getEntryConfig("entry");
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("getEntryConfig (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/Paypoint/entry").respondWith().statusCode(500).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.paypoint.getEntryConfig("entry");
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("getEntryConfig (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: "responseText" };
        server.mockEndpoint().get("/Paypoint/entry").respondWith().statusCode(503).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.paypoint.getEntryConfig("entry");
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: "responseText",
            }),
        );
    });

    test("getPage (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            AdditionalData: { key1: { key: "value" }, key2: { key: "value" }, key3: { key: "value" } },
            credentials: [
                {
                    accountId: "accountId",
                    cfeeFix: 1.1,
                    cfeeFloat: 1.1,
                    cfeeMax: 1.1,
                    cfeeMin: 1.1,
                    maxticket: 1.1,
                    minticket: 1.1,
                    mode: 1,
                    referenceId: 1000000,
                    service: "service",
                },
            ],
            lastAccess: "2022-06-30T15:01:00Z",
            pageContent: {
                amount: { categories: [{}], enabled: true, order: 1 },
                autopay: {
                    enabled: true,
                    frequencySelected: "frequencySelected",
                    header: "header",
                    order: 1,
                    startDate: "1, 5-10",
                },
                contactUs: {
                    emailLabel: "emailLabel",
                    enabled: true,
                    header: "header",
                    order: 1,
                    paymentIcons: true,
                    phoneLabel: "phoneLabel",
                },
                entry: "entry",
                invoices: {
                    enabled: true,
                    invoiceLink: { enabled: true },
                    order: 1,
                    viewInvoiceDetails: { enabled: true },
                },
                logo: { enabled: true, order: 1 },
                messageBeforePaying: { enabled: true, label: "label", order: 1 },
                name: "name",
                notes: { enabled: true, header: "header", order: 1, placeholder: "placeholder", value: "value" },
                page: { description: "description", enabled: true, header: "header", order: 1 },
                paymentButton: { enabled: true, label: "label", order: 1 },
                paymentMethods: {
                    allMethodsChecked: true,
                    enabled: true,
                    header: "header",
                    methods: {
                        amex: true,
                        applePay: true,
                        discover: false,
                        eCheck: false,
                        mastercard: true,
                        visa: true,
                    },
                    order: 1,
                },
                payor: { enabled: true, fields: [{}], header: "header", order: 1 },
                review: { enabled: true, header: "header", order: 1 },
                subdomain: "mypage-1",
            },
            pageIdentifier: "null",
            pageSettings: {
                color: "color",
                customCssUrl: "customCssUrl",
                language: "language",
                pageLogo: {
                    fContent: "TXkgdGVzdCBmaWxlHJ==...",
                    filename: "my-doc.pdf",
                    ftype: "pdf",
                    furl: "https://mysite.com/my-doc.pdf",
                },
                paymentButton: { label: "label", size: "sm" },
                redirectAfterApprove: true,
                redirectAfterApproveUrl: "redirectAfterApproveUrl",
            },
            published: 1,
            receiptContent: {
                amount: { enabled: true, order: 1 },
                contactUs: { enabled: true, order: 1 },
                details: { enabled: true, order: 1 },
                logo: { enabled: true, order: 1 },
                messageBeforeButton: { enabled: true, label: "label", order: 1 },
                page: { description: "description", enabled: true, header: "header", order: 1 },
                paymentButton: { enabled: true, label: "label", order: 1 },
                paymentInformation: { enabled: true, order: 1 },
                settings: { enabled: true, fields: [{}], order: 1, sendAuto: true, sendManual: true },
            },
            subdomain: "mypage-1",
            totalAmount: 1.1,
            validationCode: "validationCode",
        };
        server
            .mockEndpoint()
            .get("/Paypoint/8cfec329267/pay-your-fees-1")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.paypoint.getPage("8cfec329267", "pay-your-fees-1");
        expect(response).toEqual({
            AdditionalData: {
                key1: {
                    key: "value",
                },
                key2: {
                    key: "value",
                },
                key3: {
                    key: "value",
                },
            },
            credentials: [
                {
                    accountId: "accountId",
                    cfeeFix: 1.1,
                    cfeeFloat: 1.1,
                    cfeeMax: 1.1,
                    cfeeMin: 1.1,
                    maxticket: 1.1,
                    minticket: 1.1,
                    mode: 1,
                    referenceId: 1000000,
                    service: "service",
                },
            ],
            lastAccess: "2022-06-30T15:01:00Z",
            pageContent: {
                amount: {
                    categories: [{}],
                    enabled: true,
                    order: 1,
                },
                autopay: {
                    enabled: true,
                    frequencySelected: "frequencySelected",
                    header: "header",
                    order: 1,
                    startDate: "1, 5-10",
                },
                contactUs: {
                    emailLabel: "emailLabel",
                    enabled: true,
                    header: "header",
                    order: 1,
                    paymentIcons: true,
                    phoneLabel: "phoneLabel",
                },
                entry: "entry",
                invoices: {
                    enabled: true,
                    invoiceLink: {
                        enabled: true,
                    },
                    order: 1,
                    viewInvoiceDetails: {
                        enabled: true,
                    },
                },
                logo: {
                    enabled: true,
                    order: 1,
                },
                messageBeforePaying: {
                    enabled: true,
                    label: "label",
                    order: 1,
                },
                name: "name",
                notes: {
                    enabled: true,
                    header: "header",
                    order: 1,
                    placeholder: "placeholder",
                    value: "value",
                },
                page: {
                    description: "description",
                    enabled: true,
                    header: "header",
                    order: 1,
                },
                paymentButton: {
                    enabled: true,
                    label: "label",
                    order: 1,
                },
                paymentMethods: {
                    allMethodsChecked: true,
                    enabled: true,
                    header: "header",
                    methods: {
                        amex: true,
                        applePay: true,
                        discover: false,
                        eCheck: false,
                        mastercard: true,
                        visa: true,
                    },
                    order: 1,
                },
                payor: {
                    enabled: true,
                    fields: [{}],
                    header: "header",
                    order: 1,
                },
                review: {
                    enabled: true,
                    header: "header",
                    order: 1,
                },
                subdomain: "mypage-1",
            },
            pageIdentifier: "null",
            pageSettings: {
                color: "color",
                customCssUrl: "customCssUrl",
                language: "language",
                pageLogo: {
                    fContent: "TXkgdGVzdCBmaWxlHJ==...",
                    filename: "my-doc.pdf",
                    ftype: "pdf",
                    furl: "https://mysite.com/my-doc.pdf",
                },
                paymentButton: {
                    label: "label",
                    size: "sm",
                },
                redirectAfterApprove: true,
                redirectAfterApproveUrl: "redirectAfterApproveUrl",
            },
            published: 1,
            receiptContent: {
                amount: {
                    enabled: true,
                    order: 1,
                },
                contactUs: {
                    enabled: true,
                    order: 1,
                },
                details: {
                    enabled: true,
                    order: 1,
                },
                logo: {
                    enabled: true,
                    order: 1,
                },
                messageBeforeButton: {
                    enabled: true,
                    label: "label",
                    order: 1,
                },
                page: {
                    description: "description",
                    enabled: true,
                    header: "header",
                    order: 1,
                },
                paymentButton: {
                    enabled: true,
                    label: "label",
                    order: 1,
                },
                paymentInformation: {
                    enabled: true,
                    order: 1,
                },
                settings: {
                    enabled: true,
                    fields: [{}],
                    order: 1,
                    sendAuto: true,
                    sendManual: true,
                },
            },
            subdomain: "mypage-1",
            totalAmount: 1.1,
            validationCode: "validationCode",
        });
    });

    test("getPage (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Paypoint/entry/subdomain")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paypoint.getPage("entry", "subdomain");
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("getPage (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Paypoint/entry/subdomain")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paypoint.getPage("entry", "subdomain");
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("getPage (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Paypoint/entry/subdomain")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paypoint.getPage("entry", "subdomain");
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("getPage (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: "responseText" };
        server
            .mockEndpoint()
            .get("/Paypoint/entry/subdomain")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paypoint.getPage("entry", "subdomain");
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: "responseText",
            }),
        );
    });

    test("removePage (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: true, responseText: "Success" };
        server
            .mockEndpoint()
            .delete("/Paypoint/8cfec329267/pay-your-fees-1")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.paypoint.removePage("8cfec329267", "pay-your-fees-1");
        expect(response).toEqual({
            isSuccess: true,
            responseText: "Success",
        });
    });

    test("removePage (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/Paypoint/entry/subdomain")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paypoint.removePage("entry", "subdomain");
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("removePage (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/Paypoint/entry/subdomain")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paypoint.removePage("entry", "subdomain");
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("removePage (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/Paypoint/entry/subdomain")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paypoint.removePage("entry", "subdomain");
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("removePage (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: "responseText" };
        server
            .mockEndpoint()
            .delete("/Paypoint/entry/subdomain")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paypoint.removePage("entry", "subdomain");
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: "responseText",
            }),
        );
    });

    test("saveLogo (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            isSuccess: true,
            pageIdentifier: "null",
            responseCode: 1,
            responseData: "responseData",
            responseText: "Success",
        };
        server
            .mockEndpoint()
            .put("/Paypoint/logo/8cfec329267")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.paypoint.saveLogo("8cfec329267", {});
        expect(response).toEqual({
            isSuccess: true,
            pageIdentifier: "null",
            responseCode: 1,
            responseData: "responseData",
            responseText: "Success",
        });
    });

    test("saveLogo (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { fContent: undefined, filename: undefined, ftype: undefined, furl: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/Paypoint/logo/entry")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paypoint.saveLogo("entry", {
                fContent: undefined,
                filename: undefined,
                ftype: undefined,
                furl: undefined,
            });
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("saveLogo (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { fContent: undefined, filename: undefined, ftype: undefined, furl: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/Paypoint/logo/entry")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paypoint.saveLogo("entry", {
                fContent: undefined,
                filename: undefined,
                ftype: undefined,
                furl: undefined,
            });
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("saveLogo (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { fContent: undefined, filename: undefined, ftype: undefined, furl: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/Paypoint/logo/entry")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paypoint.saveLogo("entry", {
                fContent: undefined,
                filename: undefined,
                ftype: undefined,
                furl: undefined,
            });
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("saveLogo (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { fContent: undefined, filename: undefined, ftype: undefined, furl: undefined };
        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: "responseText" };
        server
            .mockEndpoint()
            .put("/Paypoint/logo/entry")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paypoint.saveLogo("entry", {
                fContent: undefined,
                filename: undefined,
                ftype: undefined,
                furl: undefined,
            });
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: "responseText",
            }),
        );
    });

    test("settingsPage (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            customFields: [
                { key: "customerID", readOnly: false, value: "" },
                { key: "test", readOnly: false, value: "" },
                { key: "newfield", readOnly: false, value: "" },
                { key: "testfield", readOnly: false, value: "" },
            ],
            forInvoices: [
                { key: "brandColor", value: "#0594fad1" },
                { key: "requiredInvoiceNumber", value: "true" },
                { key: "invoicePrefix", value: "INV-" },
                { key: "invoiceNumber", value: "1" },
                { key: "dueDate", value: "NET30" },
                { key: "dueDateCustom", value: "Invalid Date" },
                { key: "memoNote", value: "Thank you for your business!" },
                { key: "footerNote", value: "default footer testing" },
                { key: "includePaymentLink", value: "true" },
                { key: "paylinkHeader", value: "Gruzya Adventure Outfitters" },
                { key: "paylinkDescription", value: "Pay Invoice" },
                { key: "contactUsText", value: "Contact Us" },
                { key: "contactUsEmail", value: "support@gruzyaadventureoutfitters.com" },
                { key: "contactUsPhone", value: "5551234567" },
                { key: "invoiceNumbering", value: "autoapply" },
                { key: "paymentVisa", value: "true" },
                { key: "paymentMastercard", value: "true" },
                { key: "paymentDiscover", value: "true" },
                { key: "paymentAmex", value: "true" },
                { key: "paymentAch", value: "true" },
                { key: "paymentApplePay", value: "false" },
                { key: "paymentGooglePay", value: "false" },
                { key: "requireInvoiceNumber", value: "false" },
                { key: "autoCreateInvoice", value: "true" },
                { key: "", value: "" },
            ],
            forPayOuts: [
                { key: "autoCapture", readOnly: false, value: "true" },
                { key: "autoPay", readOnly: false, value: "true" },
                { key: "autoDownloadCheckImage", readOnly: false, value: "false" },
            ],
            forWallets: [{ key: "isApplePayEnabled", readOnly: false, value: "false" }],
            general: [
                { key: "currency", readOnly: true, value: "USD" },
                { key: "disableAutoReceipt", readOnly: true, value: "true" },
                { key: "sendApprovedReceipt", readOnly: false, value: "true" },
                { key: "sendDeclinedReceipt", readOnly: false, value: "true" },
                { key: "", readOnly: true, value: "" },
            ],
            identifiers: [{ key: "key", readOnly: false, value: "value" }],
        };
        server
            .mockEndpoint()
            .get("/Paypoint/settings/8cfec329267")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.paypoint.settingsPage("8cfec329267");
        expect(response).toEqual({
            customFields: [
                {
                    key: "customerID",
                    readOnly: false,
                    value: "",
                },
                {
                    key: "test",
                    readOnly: false,
                    value: "",
                },
                {
                    key: "newfield",
                    readOnly: false,
                    value: "",
                },
                {
                    key: "testfield",
                    readOnly: false,
                    value: "",
                },
            ],
            forInvoices: [
                {
                    key: "brandColor",
                    value: "#0594fad1",
                },
                {
                    key: "requiredInvoiceNumber",
                    value: "true",
                },
                {
                    key: "invoicePrefix",
                    value: "INV-",
                },
                {
                    key: "invoiceNumber",
                    value: "1",
                },
                {
                    key: "dueDate",
                    value: "NET30",
                },
                {
                    key: "dueDateCustom",
                    value: "Invalid Date",
                },
                {
                    key: "memoNote",
                    value: "Thank you for your business!",
                },
                {
                    key: "footerNote",
                    value: "default footer testing",
                },
                {
                    key: "includePaymentLink",
                    value: "true",
                },
                {
                    key: "paylinkHeader",
                    value: "Gruzya Adventure Outfitters",
                },
                {
                    key: "paylinkDescription",
                    value: "Pay Invoice",
                },
                {
                    key: "contactUsText",
                    value: "Contact Us",
                },
                {
                    key: "contactUsEmail",
                    value: "support@gruzyaadventureoutfitters.com",
                },
                {
                    key: "contactUsPhone",
                    value: "5551234567",
                },
                {
                    key: "invoiceNumbering",
                    value: "autoapply",
                },
                {
                    key: "paymentVisa",
                    value: "true",
                },
                {
                    key: "paymentMastercard",
                    value: "true",
                },
                {
                    key: "paymentDiscover",
                    value: "true",
                },
                {
                    key: "paymentAmex",
                    value: "true",
                },
                {
                    key: "paymentAch",
                    value: "true",
                },
                {
                    key: "paymentApplePay",
                    value: "false",
                },
                {
                    key: "paymentGooglePay",
                    value: "false",
                },
                {
                    key: "requireInvoiceNumber",
                    value: "false",
                },
                {
                    key: "autoCreateInvoice",
                    value: "true",
                },
                {
                    key: "",
                    value: "",
                },
            ],
            forPayOuts: [
                {
                    key: "autoCapture",
                    readOnly: false,
                    value: "true",
                },
                {
                    key: "autoPay",
                    readOnly: false,
                    value: "true",
                },
                {
                    key: "autoDownloadCheckImage",
                    readOnly: false,
                    value: "false",
                },
            ],
            forWallets: [
                {
                    key: "isApplePayEnabled",
                    readOnly: false,
                    value: "false",
                },
            ],
            general: [
                {
                    key: "currency",
                    readOnly: true,
                    value: "USD",
                },
                {
                    key: "disableAutoReceipt",
                    readOnly: true,
                    value: "true",
                },
                {
                    key: "sendApprovedReceipt",
                    readOnly: false,
                    value: "true",
                },
                {
                    key: "sendDeclinedReceipt",
                    readOnly: false,
                    value: "true",
                },
                {
                    key: "",
                    readOnly: true,
                    value: "",
                },
            ],
            identifiers: [
                {
                    key: "key",
                    readOnly: false,
                    value: "value",
                },
            ],
        });
    });

    test("settingsPage (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Paypoint/settings/entry")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paypoint.settingsPage("entry");
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("settingsPage (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Paypoint/settings/entry")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paypoint.settingsPage("entry");
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("settingsPage (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Paypoint/settings/entry")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paypoint.settingsPage("entry");
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("settingsPage (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: "responseText" };
        server
            .mockEndpoint()
            .get("/Paypoint/settings/entry")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paypoint.settingsPage("entry");
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: "responseText",
            }),
        );
    });

    test("migrate (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            entryPoint: "473abc123def",
            newParentOrganizationId: 123,
            notificationRequest: {
                notificationUrl: "https://webhook-test.yoursie.com",
                webHeaderParameters: [{ key: "testheader", value: "1234567890" }],
            },
        };
        const rawResponseBody = { isSuccess: true, responseCode: 1, responseText: "Success" };
        server
            .mockEndpoint()
            .post("/Paypoint/migrate")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.paypoint.migrate({
            entryPoint: "473abc123def",
            newParentOrganizationId: 123,
            notificationRequest: {
                notificationUrl: "https://webhook-test.yoursie.com",
                webHeaderParameters: [
                    {
                        key: "testheader",
                        value: "1234567890",
                    },
                ],
            },
        });
        expect(response).toEqual({
            isSuccess: true,
            responseCode: 1,
            responseText: "Success",
        });
    });

    test("migrate (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { entryPoint: "entryPoint", newParentOrganizationId: 1, notificationRequest: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/Paypoint/migrate")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paypoint.migrate({
                entryPoint: "entryPoint",
                newParentOrganizationId: 1,
                notificationRequest: undefined,
            });
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("migrate (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { entryPoint: "entryPoint", newParentOrganizationId: 1, notificationRequest: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/Paypoint/migrate")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paypoint.migrate({
                entryPoint: "entryPoint",
                newParentOrganizationId: 1,
                notificationRequest: undefined,
            });
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("migrate (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { entryPoint: "entryPoint", newParentOrganizationId: 1, notificationRequest: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/Paypoint/migrate")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paypoint.migrate({
                entryPoint: "entryPoint",
                newParentOrganizationId: 1,
                notificationRequest: undefined,
            });
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("migrate (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { entryPoint: "entryPoint", newParentOrganizationId: 1, notificationRequest: undefined };
        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: "responseText" };
        server
            .mockEndpoint()
            .post("/Paypoint/migrate")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paypoint.migrate({
                entryPoint: "entryPoint",
                newParentOrganizationId: 1,
                notificationRequest: undefined,
            });
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: "responseText",
            }),
        );
    });
});
