/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { PayabliClient } from "../../src/Client";
import * as Payabli from "../../src/api/index";

describe("Customer", () => {
    test("AddCustomer (CreateCustomer)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            customerNumber: "12356ACB",
            firstname: "Irene",
            lastname: "Canizales",
            address1: "123 Bishop's Trail",
            city: "Mountain City",
            state: "TN",
            zip: "37612",
            country: "US",
            email: "irene@canizalesconcrete.com",
            identifierFields: ["email"],
            timeZone: -5,
        };
        const rawResponseBody = {
            isSuccess: true,
            responseData: {
                customerId: 17264,
                customerNumber: "12356ACB",
                customerUsername: undefined,
                customerStatus: 0,
                Company: undefined,
                Firstname: "Irene",
                Lastname: "Canizales",
                Phone: undefined,
                Email: "irene@canizalesconcrete.com",
                Address: undefined,
                Address1: "123 Bishop's Trail",
                City: "Mountain City",
                State: "TN",
                Zip: "37612",
                Country: "US",
                ShippingAddress: undefined,
                ShippingAddress1: undefined,
                ShippingCity: undefined,
                ShippingState: undefined,
                ShippingZip: undefined,
                ShippingCountry: undefined,
                Balance: 0,
                TimeZone: -5,
                MFA: false,
                MFAMode: 0,
                snProvider: undefined,
                snIdentifier: undefined,
                snData: undefined,
                LastUpdated: "2024-03-13T12:49:56Z",
                Created: "2024-03-13T12:49:56Z",
                AdditionalFields: { key: "value" },
                IdentifierFields: ["email"],
                Subscriptions: undefined,
                StoredMethods: undefined,
                customerSummary: {
                    numberofTransactions: 30,
                    recentTransactions: [
                        {
                            EntrypageId: 0,
                            FeeAmount: 1,
                            PayorId: 1551,
                            PaypointId: 226,
                            SettlementStatus: 2,
                            TotalAmount: 30.22,
                            TransStatus: 1,
                        },
                    ],
                    totalAmountTransactions: 1500,
                    totalNetAmountTransactions: 1500,
                },
                PaypointLegalname: "Gruzya Adventure Outfitters, LLC",
                PaypointDbaname: "Gruzya Adventure Outfitters",
                ParentOrgName: "The Pilgrim Planner",
                ParentOrgId: 123,
                PaypointEntryname: "41035afaa7",
                pageidentifier: "null",
                externalPaypointID: undefined,
                customerConsent: undefined,
            },
            responseText: "Success",
        };
        server
            .mockEndpoint()
            .post("/Customer/single/8cfec329267")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.customer.addCustomer("8cfec329267", {
            body: {
                customerNumber: "12356ACB",
                firstname: "Irene",
                lastname: "Canizales",
                address1: "123 Bishop's Trail",
                city: "Mountain City",
                state: "TN",
                zip: "37612",
                country: "US",
                email: "irene@canizalesconcrete.com",
                identifierFields: ["email"],
                timeZone: -5,
            },
        });
        expect(response).toEqual({
            isSuccess: true,
            responseData: {
                customerId: 17264,
                customerNumber: "12356ACB",
                customerUsername: undefined,
                customerStatus: 0,
                Company: undefined,
                Firstname: "Irene",
                Lastname: "Canizales",
                Phone: undefined,
                Email: "irene@canizalesconcrete.com",
                Address: undefined,
                Address1: "123 Bishop's Trail",
                City: "Mountain City",
                State: "TN",
                Zip: "37612",
                Country: "US",
                ShippingAddress: undefined,
                ShippingAddress1: undefined,
                ShippingCity: undefined,
                ShippingState: undefined,
                ShippingZip: undefined,
                ShippingCountry: undefined,
                Balance: 0,
                TimeZone: -5,
                MFA: false,
                MFAMode: 0,
                snProvider: undefined,
                snIdentifier: undefined,
                snData: undefined,
                LastUpdated: "2024-03-13T12:49:56Z",
                Created: "2024-03-13T12:49:56Z",
                AdditionalFields: {
                    key: "value",
                },
                IdentifierFields: ["email"],
                Subscriptions: undefined,
                StoredMethods: undefined,
                customerSummary: {
                    numberofTransactions: 30,
                    recentTransactions: [
                        {
                            EntrypageId: 0,
                            FeeAmount: 1,
                            PayorId: 1551,
                            PaypointId: 226,
                            SettlementStatus: 2,
                            TotalAmount: 30.22,
                            TransStatus: 1,
                        },
                    ],
                    totalAmountTransactions: 1500,
                    totalNetAmountTransactions: 1500,
                },
                PaypointLegalname: "Gruzya Adventure Outfitters, LLC",
                PaypointDbaname: "Gruzya Adventure Outfitters",
                ParentOrgName: "The Pilgrim Planner",
                ParentOrgId: 123,
                PaypointEntryname: "41035afaa7",
                pageidentifier: "null",
                externalPaypointID: undefined,
                customerConsent: undefined,
            },
            responseText: "Success",
        });
    });

    test("AddCustomer (4190cb10)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            customerNumber: undefined,
            customerUsername: undefined,
            customerPsw: undefined,
            customerStatus: undefined,
            company: undefined,
            firstname: undefined,
            lastname: undefined,
            phone: undefined,
            email: undefined,
            address: undefined,
            address1: undefined,
            city: undefined,
            state: undefined,
            zip: undefined,
            country: undefined,
            shippingAddress: undefined,
            shippingAddress1: undefined,
            shippingCity: undefined,
            shippingState: undefined,
            shippingZip: undefined,
            shippingCountry: undefined,
            balance: undefined,
            timeZone: undefined,
            additionalFields: undefined,
            identifierFields: undefined,
            createdAt: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/Customer/single/entry")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.customer.addCustomer("entry", {
                body: {
                    customerNumber: undefined,
                    customerUsername: undefined,
                    customerPsw: undefined,
                    customerStatus: undefined,
                    company: undefined,
                    firstname: undefined,
                    lastname: undefined,
                    phone: undefined,
                    email: undefined,
                    address: undefined,
                    address1: undefined,
                    city: undefined,
                    state: undefined,
                    zip: undefined,
                    country: undefined,
                    shippingAddress: undefined,
                    shippingAddress1: undefined,
                    shippingCity: undefined,
                    shippingState: undefined,
                    shippingZip: undefined,
                    shippingCountry: undefined,
                    balance: undefined,
                    timeZone: undefined,
                    additionalFields: undefined,
                    identifierFields: undefined,
                    createdAt: undefined,
                },
            });
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("AddCustomer (886fc638)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            customerNumber: undefined,
            customerUsername: undefined,
            customerPsw: undefined,
            customerStatus: undefined,
            company: undefined,
            firstname: undefined,
            lastname: undefined,
            phone: undefined,
            email: undefined,
            address: undefined,
            address1: undefined,
            city: undefined,
            state: undefined,
            zip: undefined,
            country: undefined,
            shippingAddress: undefined,
            shippingAddress1: undefined,
            shippingCity: undefined,
            shippingState: undefined,
            shippingZip: undefined,
            shippingCountry: undefined,
            balance: undefined,
            timeZone: undefined,
            additionalFields: undefined,
            identifierFields: undefined,
            createdAt: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/Customer/single/entry")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.customer.addCustomer("entry", {
                body: {
                    customerNumber: undefined,
                    customerUsername: undefined,
                    customerPsw: undefined,
                    customerStatus: undefined,
                    company: undefined,
                    firstname: undefined,
                    lastname: undefined,
                    phone: undefined,
                    email: undefined,
                    address: undefined,
                    address1: undefined,
                    city: undefined,
                    state: undefined,
                    zip: undefined,
                    country: undefined,
                    shippingAddress: undefined,
                    shippingAddress1: undefined,
                    shippingCity: undefined,
                    shippingState: undefined,
                    shippingZip: undefined,
                    shippingCountry: undefined,
                    balance: undefined,
                    timeZone: undefined,
                    additionalFields: undefined,
                    identifierFields: undefined,
                    createdAt: undefined,
                },
            });
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("AddCustomer (220f2dcc)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            customerNumber: undefined,
            customerUsername: undefined,
            customerPsw: undefined,
            customerStatus: undefined,
            company: undefined,
            firstname: undefined,
            lastname: undefined,
            phone: undefined,
            email: undefined,
            address: undefined,
            address1: undefined,
            city: undefined,
            state: undefined,
            zip: undefined,
            country: undefined,
            shippingAddress: undefined,
            shippingAddress1: undefined,
            shippingCity: undefined,
            shippingState: undefined,
            shippingZip: undefined,
            shippingCountry: undefined,
            balance: undefined,
            timeZone: undefined,
            additionalFields: undefined,
            identifierFields: undefined,
            createdAt: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/Customer/single/entry")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.customer.addCustomer("entry", {
                body: {
                    customerNumber: undefined,
                    customerUsername: undefined,
                    customerPsw: undefined,
                    customerStatus: undefined,
                    company: undefined,
                    firstname: undefined,
                    lastname: undefined,
                    phone: undefined,
                    email: undefined,
                    address: undefined,
                    address1: undefined,
                    city: undefined,
                    state: undefined,
                    zip: undefined,
                    country: undefined,
                    shippingAddress: undefined,
                    shippingAddress1: undefined,
                    shippingCity: undefined,
                    shippingState: undefined,
                    shippingZip: undefined,
                    shippingCountry: undefined,
                    balance: undefined,
                    timeZone: undefined,
                    additionalFields: undefined,
                    identifierFields: undefined,
                    createdAt: undefined,
                },
            });
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("AddCustomer (26443e33)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            customerNumber: undefined,
            customerUsername: undefined,
            customerPsw: undefined,
            customerStatus: undefined,
            company: undefined,
            firstname: undefined,
            lastname: undefined,
            phone: undefined,
            email: undefined,
            address: undefined,
            address1: undefined,
            city: undefined,
            state: undefined,
            zip: undefined,
            country: undefined,
            shippingAddress: undefined,
            shippingAddress1: undefined,
            shippingCity: undefined,
            shippingState: undefined,
            shippingZip: undefined,
            shippingCountry: undefined,
            balance: undefined,
            timeZone: undefined,
            additionalFields: undefined,
            identifierFields: undefined,
            createdAt: undefined,
        };
        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .post("/Customer/single/entry")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.customer.addCustomer("entry", {
                body: {
                    customerNumber: undefined,
                    customerUsername: undefined,
                    customerPsw: undefined,
                    customerStatus: undefined,
                    company: undefined,
                    firstname: undefined,
                    lastname: undefined,
                    phone: undefined,
                    email: undefined,
                    address: undefined,
                    address1: undefined,
                    city: undefined,
                    state: undefined,
                    zip: undefined,
                    country: undefined,
                    shippingAddress: undefined,
                    shippingAddress1: undefined,
                    shippingCity: undefined,
                    shippingState: undefined,
                    shippingZip: undefined,
                    shippingCountry: undefined,
                    balance: undefined,
                    timeZone: undefined,
                    additionalFields: undefined,
                    identifierFields: undefined,
                    createdAt: undefined,
                },
            });
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("DeleteCustomer (DeleteCustomer)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            responseCode: 1,
            isSuccess: true,
            pageIdentifier: "null",
            roomId: 0,
            responseData: " ",
            responseText: "Success",
        };
        server.mockEndpoint().delete("/Customer/998").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.customer.deleteCustomer(998);
        expect(response).toEqual({
            responseCode: 1,
            isSuccess: true,
            pageIdentifier: "null",
            roomId: 0,
            responseData: " ",
            responseText: "Success",
        });
    });

    test("DeleteCustomer (41c19bd4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().delete("/Customer/1").respondWith().statusCode(400).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.customer.deleteCustomer(1);
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("DeleteCustomer (1d7011fc)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().delete("/Customer/1").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.customer.deleteCustomer(1);
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("DeleteCustomer (fb96f2f0)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().delete("/Customer/1").respondWith().statusCode(500).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.customer.deleteCustomer(1);
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("DeleteCustomer (805d71c7)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server.mockEndpoint().delete("/Customer/1").respondWith().statusCode(503).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.customer.deleteCustomer(1);
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("GetCustomer (GetCustomer)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            customerId: 4440,
            customerNumber: "3456-7645A",
            customerUsername: "myusername",
            customerStatus: 1,
            Company: "AA LLC",
            Firstname: "John",
            Lastname: "Smith",
            Phone: "1234567890",
            Email: "example@email.com",
            Address: "3245 Main St",
            Address1: "STE 900",
            City: "Miami",
            State: "FL",
            Zip: "77777",
            Country: "US",
            ShippingAddress: "123 Walnut St",
            ShippingAddress1: "STE 900",
            ShippingCity: "Johnson City",
            ShippingState: "TN",
            ShippingZip: "37619",
            ShippingCountry: "US",
            Balance: 1.1,
            TimeZone: -5,
            MFA: false,
            MFAMode: 0,
            snProvider: "facebook",
            snIdentifier: "6677fgttyudd999",
            snData: "",
            LastUpdated: "2021-06-16T05:00:00Z",
            Created: "2021-06-10T05:00:00Z",
            AdditionalFields: { property1: "string", property2: "string" },
            IdentifierFields: ["email"],
            Subscriptions: [
                {
                    CreatedAt: "2022-07-01T15:00:01Z",
                    EndDate: "2025-10-19T00:00:00Z",
                    EntrypageId: 0,
                    ExternalPaypointID: "Paypoint-100",
                    FeeAmount: 3,
                    Frequency: "monthly",
                    IdSub: 396,
                    LastRun: "2025-10-19T00:00:00Z",
                    LastUpdated: "2022-07-01T15:00:01Z",
                    LeftCycles: 15,
                    Method: "card",
                    NetAmount: 3762.87,
                    NextDate: "2025-10-19T00:00:00Z",
                    ParentOrgName: "PropertyManager Pro",
                    PaymentData: { paymentDetails: { totalAmount: 100 } },
                    PaypointDbaname: "Sunshine Gutters",
                    PaypointEntryname: "d193cf9a46",
                    PaypointId: 255,
                    PaypointLegalname: "Sunshine Services, LLC",
                    PlanId: 0,
                    Source: "api",
                    StartDate: "2025-10-19T00:00:00Z",
                    SubEvents: [{ description: "TransferCreated", eventTime: "2023-07-05T22:31:06Z" }],
                    SubStatus: 1,
                    TotalAmount: 103,
                    TotalCycles: 24,
                    UntilCancelled: true,
                },
            ],
            StoredMethods: [
                {
                    bin: "411111",
                    binData: {
                        binMatchedLength: "6",
                        binCardBrand: "Visa",
                        binCardType: "Credit",
                        binCardCategory: "PLATINUM",
                        binCardIssuer: "Bank of Example",
                        binCardIssuerCountry: "United States",
                        binCardIssuerCountryCodeA2: "US",
                        binCardIssuerCountryNumber: "840",
                        binCardIsRegulated: "false",
                        binCardUseCategory: "Consumer",
                        binCardIssuerCountryCodeA3: "USA",
                    },
                    descriptor: "visa",
                    expDate: "1227",
                    holderName: "Chad Mercia",
                    idPmethod: "6edcbb56-9c0e-4003-b3d1-99abf149ba0e",
                    lastUpdated: "2022-07-01T15:00:01Z",
                    maskedAccount: "4XXXXXXXX1111",
                    method: "card",
                },
            ],
            customerSummary: {
                numberofTransactions: 30,
                recentTransactions: [
                    {
                        EntrypageId: 0,
                        FeeAmount: 1,
                        PayorId: 1551,
                        PaypointId: 226,
                        SettlementStatus: 2,
                        TotalAmount: 30.22,
                        TransStatus: 1,
                    },
                ],
                totalAmountTransactions: 1500,
                totalNetAmountTransactions: 1500,
            },
            PaypointLegalname: "Sunshine Services, LLC",
            PaypointDbaname: "Sunshine Gutters",
            ParentOrgName: "PropertyManager Pro",
            ParentOrgId: 123,
            PaypointEntryname: "d193cf9a46",
            pageidentifier: "null",
            externalPaypointID: "Paypoint-100",
            customerConsent: {
                eCommunication: { status: 1, updatedAt: "2022-07-01T15:00:01Z" },
                sms: { status: 1, updatedAt: "2022-07-01T15:00:01Z" },
            },
        };
        server.mockEndpoint().get("/Customer/998").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.customer.getCustomer(998);
        expect(response).toEqual({
            customerId: 4440,
            customerNumber: "3456-7645A",
            customerUsername: "myusername",
            customerStatus: 1,
            Company: "AA LLC",
            Firstname: "John",
            Lastname: "Smith",
            Phone: "1234567890",
            Email: "example@email.com",
            Address: "3245 Main St",
            Address1: "STE 900",
            City: "Miami",
            State: "FL",
            Zip: "77777",
            Country: "US",
            ShippingAddress: "123 Walnut St",
            ShippingAddress1: "STE 900",
            ShippingCity: "Johnson City",
            ShippingState: "TN",
            ShippingZip: "37619",
            ShippingCountry: "US",
            Balance: 1.1,
            TimeZone: -5,
            MFA: false,
            MFAMode: 0,
            snProvider: "facebook",
            snIdentifier: "6677fgttyudd999",
            snData: "",
            LastUpdated: "2021-06-16T05:00:00Z",
            Created: "2021-06-10T05:00:00Z",
            AdditionalFields: {
                property1: "string",
                property2: "string",
            },
            IdentifierFields: ["email"],
            Subscriptions: [
                {
                    CreatedAt: "2022-07-01T15:00:01Z",
                    EndDate: "2025-10-19T00:00:00Z",
                    EntrypageId: 0,
                    ExternalPaypointID: "Paypoint-100",
                    FeeAmount: 3,
                    Frequency: "monthly",
                    IdSub: 396,
                    LastRun: "2025-10-19T00:00:00Z",
                    LastUpdated: "2022-07-01T15:00:01Z",
                    LeftCycles: 15,
                    Method: "card",
                    NetAmount: 3762.87,
                    NextDate: "2025-10-19T00:00:00Z",
                    ParentOrgName: "PropertyManager Pro",
                    PaymentData: {
                        paymentDetails: {
                            totalAmount: 100,
                        },
                    },
                    PaypointDbaname: "Sunshine Gutters",
                    PaypointEntryname: "d193cf9a46",
                    PaypointId: 255,
                    PaypointLegalname: "Sunshine Services, LLC",
                    PlanId: 0,
                    Source: "api",
                    StartDate: "2025-10-19T00:00:00Z",
                    SubEvents: [
                        {
                            description: "TransferCreated",
                            eventTime: "2023-07-05T22:31:06Z",
                        },
                    ],
                    SubStatus: 1,
                    TotalAmount: 103,
                    TotalCycles: 24,
                    UntilCancelled: true,
                },
            ],
            StoredMethods: [
                {
                    bin: "411111",
                    binData: {
                        binMatchedLength: "6",
                        binCardBrand: "Visa",
                        binCardType: "Credit",
                        binCardCategory: "PLATINUM",
                        binCardIssuer: "Bank of Example",
                        binCardIssuerCountry: "United States",
                        binCardIssuerCountryCodeA2: "US",
                        binCardIssuerCountryNumber: "840",
                        binCardIsRegulated: "false",
                        binCardUseCategory: "Consumer",
                        binCardIssuerCountryCodeA3: "USA",
                    },
                    descriptor: "visa",
                    expDate: "1227",
                    holderName: "Chad Mercia",
                    idPmethod: "6edcbb56-9c0e-4003-b3d1-99abf149ba0e",
                    lastUpdated: "2022-07-01T15:00:01Z",
                    maskedAccount: "4XXXXXXXX1111",
                    method: "card",
                },
            ],
            customerSummary: {
                numberofTransactions: 30,
                recentTransactions: [
                    {
                        EntrypageId: 0,
                        FeeAmount: 1,
                        PayorId: 1551,
                        PaypointId: 226,
                        SettlementStatus: 2,
                        TotalAmount: 30.22,
                        TransStatus: 1,
                    },
                ],
                totalAmountTransactions: 1500,
                totalNetAmountTransactions: 1500,
            },
            PaypointLegalname: "Sunshine Services, LLC",
            PaypointDbaname: "Sunshine Gutters",
            ParentOrgName: "PropertyManager Pro",
            ParentOrgId: 123,
            PaypointEntryname: "d193cf9a46",
            pageidentifier: "null",
            externalPaypointID: "Paypoint-100",
            customerConsent: {
                eCommunication: {
                    status: 1,
                    updatedAt: "2022-07-01T15:00:01Z",
                },
                sms: {
                    status: 1,
                    updatedAt: "2022-07-01T15:00:01Z",
                },
            },
        });
    });

    test("GetCustomer (41c19bd4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/Customer/1").respondWith().statusCode(400).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.customer.getCustomer(1);
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("GetCustomer (1d7011fc)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/Customer/1").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.customer.getCustomer(1);
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("GetCustomer (fb96f2f0)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/Customer/1").respondWith().statusCode(500).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.customer.getCustomer(1);
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("GetCustomer (805d71c7)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server.mockEndpoint().get("/Customer/1").respondWith().statusCode(503).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.customer.getCustomer(1);
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("LinkCustomerTransaction (LinkCustomerTransaction)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            responseCode: 1,
            pageIdentifier: "null",
            roomId: 0,
            isSuccess: true,
            responseText: "Success",
            responseData: " ",
        };
        server
            .mockEndpoint()
            .get("/Customer/link/998/45-as456777hhhhhhhhhh77777777-324")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.customer.linkCustomerTransaction(998, "45-as456777hhhhhhhhhh77777777-324");
        expect(response).toEqual({
            responseCode: 1,
            pageIdentifier: "null",
            roomId: 0,
            isSuccess: true,
            responseText: "Success",
            responseData: " ",
        });
    });

    test("LinkCustomerTransaction (b14a3ede)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Customer/link/1/transId")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.customer.linkCustomerTransaction(1, "transId");
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("LinkCustomerTransaction (7748ece6)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Customer/link/1/transId")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.customer.linkCustomerTransaction(1, "transId");
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("LinkCustomerTransaction (915c27ea)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Customer/link/1/transId")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.customer.linkCustomerTransaction(1, "transId");
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("LinkCustomerTransaction (a38432a5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .get("/Customer/link/1/transId")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.customer.linkCustomerTransaction(1, "transId");
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("RequestConsent (Success example)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            isSuccess: true,
            pageIdentifier: "null",
            responseCode: 1,
            responseData: " ",
            responseText: "Success",
        };
        server
            .mockEndpoint()
            .post("/Customer/998/consent")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.customer.requestConsent(998);
        expect(response).toEqual({
            isSuccess: true,
            pageIdentifier: "null",
            responseCode: 1,
            responseData: " ",
            responseText: "Success",
        });
    });

    test("RequestConsent (41c19bd4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/Customer/1/consent")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.customer.requestConsent(1);
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("RequestConsent (1d7011fc)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/Customer/1/consent")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.customer.requestConsent(1);
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("RequestConsent (fb96f2f0)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/Customer/1/consent")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.customer.requestConsent(1);
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("RequestConsent (805d71c7)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .post("/Customer/1/consent")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.customer.requestConsent(1);
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("UpdateCustomer (UpdateCustomer)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            firstname: "Irene",
            lastname: "Canizales",
            address1: "145 Bishop's Trail",
            city: "Mountain City",
            state: "TN",
            zip: "37612",
            country: "US",
        };
        const rawResponseBody = { isSuccess: true, responseCode: 1, responseData: " ", responseText: "Success" };
        server
            .mockEndpoint()
            .put("/Customer/998")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.customer.updateCustomer(998, {
            firstname: "Irene",
            lastname: "Canizales",
            address1: "145 Bishop's Trail",
            city: "Mountain City",
            state: "TN",
            zip: "37612",
            country: "US",
        });
        expect(response).toEqual({
            isSuccess: true,
            responseCode: 1,
            responseData: " ",
            responseText: "Success",
        });
    });

    test("UpdateCustomer (cfed4e5b)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            customerNumber: undefined,
            customerUsername: undefined,
            customerPsw: undefined,
            customerStatus: undefined,
            company: undefined,
            firstname: undefined,
            lastname: undefined,
            phone: undefined,
            email: undefined,
            address: undefined,
            address1: undefined,
            city: undefined,
            state: undefined,
            zip: undefined,
            country: undefined,
            shippingAddress: undefined,
            shippingAddress1: undefined,
            shippingCity: undefined,
            shippingState: undefined,
            shippingZip: undefined,
            shippingCountry: undefined,
            balance: undefined,
            timeZone: undefined,
            additionalFields: undefined,
            identifierFields: undefined,
            createdAt: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/Customer/1")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.customer.updateCustomer(1, {
                customerNumber: undefined,
                customerUsername: undefined,
                customerPsw: undefined,
                customerStatus: undefined,
                company: undefined,
                firstname: undefined,
                lastname: undefined,
                phone: undefined,
                email: undefined,
                address: undefined,
                address1: undefined,
                city: undefined,
                state: undefined,
                zip: undefined,
                country: undefined,
                shippingAddress: undefined,
                shippingAddress1: undefined,
                shippingCity: undefined,
                shippingState: undefined,
                shippingZip: undefined,
                shippingCountry: undefined,
                balance: undefined,
                timeZone: undefined,
                additionalFields: undefined,
                identifierFields: undefined,
                createdAt: undefined,
            });
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("UpdateCustomer (eb54370b)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            customerNumber: undefined,
            customerUsername: undefined,
            customerPsw: undefined,
            customerStatus: undefined,
            company: undefined,
            firstname: undefined,
            lastname: undefined,
            phone: undefined,
            email: undefined,
            address: undefined,
            address1: undefined,
            city: undefined,
            state: undefined,
            zip: undefined,
            country: undefined,
            shippingAddress: undefined,
            shippingAddress1: undefined,
            shippingCity: undefined,
            shippingState: undefined,
            shippingZip: undefined,
            shippingCountry: undefined,
            balance: undefined,
            timeZone: undefined,
            additionalFields: undefined,
            identifierFields: undefined,
            createdAt: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/Customer/1")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.customer.updateCustomer(1, {
                customerNumber: undefined,
                customerUsername: undefined,
                customerPsw: undefined,
                customerStatus: undefined,
                company: undefined,
                firstname: undefined,
                lastname: undefined,
                phone: undefined,
                email: undefined,
                address: undefined,
                address1: undefined,
                city: undefined,
                state: undefined,
                zip: undefined,
                country: undefined,
                shippingAddress: undefined,
                shippingAddress1: undefined,
                shippingCity: undefined,
                shippingState: undefined,
                shippingZip: undefined,
                shippingCountry: undefined,
                balance: undefined,
                timeZone: undefined,
                additionalFields: undefined,
                identifierFields: undefined,
                createdAt: undefined,
            });
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("UpdateCustomer (84914af7)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            customerNumber: undefined,
            customerUsername: undefined,
            customerPsw: undefined,
            customerStatus: undefined,
            company: undefined,
            firstname: undefined,
            lastname: undefined,
            phone: undefined,
            email: undefined,
            address: undefined,
            address1: undefined,
            city: undefined,
            state: undefined,
            zip: undefined,
            country: undefined,
            shippingAddress: undefined,
            shippingAddress1: undefined,
            shippingCity: undefined,
            shippingState: undefined,
            shippingZip: undefined,
            shippingCountry: undefined,
            balance: undefined,
            timeZone: undefined,
            additionalFields: undefined,
            identifierFields: undefined,
            createdAt: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/Customer/1")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.customer.updateCustomer(1, {
                customerNumber: undefined,
                customerUsername: undefined,
                customerPsw: undefined,
                customerStatus: undefined,
                company: undefined,
                firstname: undefined,
                lastname: undefined,
                phone: undefined,
                email: undefined,
                address: undefined,
                address1: undefined,
                city: undefined,
                state: undefined,
                zip: undefined,
                country: undefined,
                shippingAddress: undefined,
                shippingAddress1: undefined,
                shippingCity: undefined,
                shippingState: undefined,
                shippingZip: undefined,
                shippingCountry: undefined,
                balance: undefined,
                timeZone: undefined,
                additionalFields: undefined,
                identifierFields: undefined,
                createdAt: undefined,
            });
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("UpdateCustomer (f923dc9a)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            customerNumber: undefined,
            customerUsername: undefined,
            customerPsw: undefined,
            customerStatus: undefined,
            company: undefined,
            firstname: undefined,
            lastname: undefined,
            phone: undefined,
            email: undefined,
            address: undefined,
            address1: undefined,
            city: undefined,
            state: undefined,
            zip: undefined,
            country: undefined,
            shippingAddress: undefined,
            shippingAddress1: undefined,
            shippingCity: undefined,
            shippingState: undefined,
            shippingZip: undefined,
            shippingCountry: undefined,
            balance: undefined,
            timeZone: undefined,
            additionalFields: undefined,
            identifierFields: undefined,
            createdAt: undefined,
        };
        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .put("/Customer/1")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.customer.updateCustomer(1, {
                customerNumber: undefined,
                customerUsername: undefined,
                customerPsw: undefined,
                customerStatus: undefined,
                company: undefined,
                firstname: undefined,
                lastname: undefined,
                phone: undefined,
                email: undefined,
                address: undefined,
                address1: undefined,
                city: undefined,
                state: undefined,
                zip: undefined,
                country: undefined,
                shippingAddress: undefined,
                shippingAddress1: undefined,
                shippingCity: undefined,
                shippingState: undefined,
                shippingZip: undefined,
                shippingCountry: undefined,
                balance: undefined,
                timeZone: undefined,
                additionalFields: undefined,
                identifierFields: undefined,
                createdAt: undefined,
            });
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });
});
