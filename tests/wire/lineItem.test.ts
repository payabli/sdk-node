/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { PayabliClient } from "../../src/Client";
import * as Payabli from "../../src/api/index";

describe("LineItem", () => {
    test("AddItem (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            itemProductCode: "M-DEPOSIT",
            itemProductName: "Materials deposit",
            itemDescription: "Deposit for materials",
            itemCommodityCode: "010",
            itemUnitOfMeasure: "SqFt",
            itemCost: 12.45,
            itemQty: 1,
            itemMode: 0,
        };
        const rawResponseBody = { isSuccess: true, responseData: 700, responseText: "Success" };
        server
            .mockEndpoint()
            .post("/LineItem/47cae3d74")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.lineItem.addItem("47cae3d74", {
            body: {
                itemProductCode: "M-DEPOSIT",
                itemProductName: "Materials deposit",
                itemDescription: "Deposit for materials",
                itemCommodityCode: "010",
                itemUnitOfMeasure: "SqFt",
                itemCost: 12.45,
                itemQty: 1,
                itemMode: 0,
            },
        });
        expect(response).toEqual({
            isSuccess: true,
            responseData: 700,
            responseText: "Success",
        });
    });

    test("AddItem (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            itemCategories: undefined,
            itemCommodityCode: undefined,
            itemCost: 1.1,
            itemDescription: undefined,
            itemMode: undefined,
            itemProductCode: undefined,
            itemProductName: undefined,
            itemQty: 1,
            itemUnitOfMeasure: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/LineItem/entry")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.lineItem.addItem("entry", {
                body: {
                    itemCategories: undefined,
                    itemCommodityCode: undefined,
                    itemCost: 1.1,
                    itemDescription: undefined,
                    itemMode: undefined,
                    itemProductCode: undefined,
                    itemProductName: undefined,
                    itemQty: 1,
                    itemUnitOfMeasure: undefined,
                },
            });
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("AddItem (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            itemCategories: undefined,
            itemCommodityCode: undefined,
            itemCost: 1.1,
            itemDescription: undefined,
            itemMode: undefined,
            itemProductCode: undefined,
            itemProductName: undefined,
            itemQty: 1,
            itemUnitOfMeasure: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/LineItem/entry")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.lineItem.addItem("entry", {
                body: {
                    itemCategories: undefined,
                    itemCommodityCode: undefined,
                    itemCost: 1.1,
                    itemDescription: undefined,
                    itemMode: undefined,
                    itemProductCode: undefined,
                    itemProductName: undefined,
                    itemQty: 1,
                    itemUnitOfMeasure: undefined,
                },
            });
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("AddItem (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            itemCategories: undefined,
            itemCommodityCode: undefined,
            itemCost: 1.1,
            itemDescription: undefined,
            itemMode: undefined,
            itemProductCode: undefined,
            itemProductName: undefined,
            itemQty: 1,
            itemUnitOfMeasure: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/LineItem/entry")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.lineItem.addItem("entry", {
                body: {
                    itemCategories: undefined,
                    itemCommodityCode: undefined,
                    itemCost: 1.1,
                    itemDescription: undefined,
                    itemMode: undefined,
                    itemProductCode: undefined,
                    itemProductName: undefined,
                    itemQty: 1,
                    itemUnitOfMeasure: undefined,
                },
            });
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("AddItem (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            itemCategories: undefined,
            itemCommodityCode: undefined,
            itemCost: 1.1,
            itemDescription: undefined,
            itemMode: undefined,
            itemProductCode: undefined,
            itemProductName: undefined,
            itemQty: 1,
            itemUnitOfMeasure: undefined,
        };
        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: "responseText" };
        server
            .mockEndpoint()
            .post("/LineItem/entry")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.lineItem.addItem("entry", {
                body: {
                    itemCategories: undefined,
                    itemCommodityCode: undefined,
                    itemCost: 1.1,
                    itemDescription: undefined,
                    itemMode: undefined,
                    itemProductCode: undefined,
                    itemProductName: undefined,
                    itemQty: 1,
                    itemUnitOfMeasure: undefined,
                },
            });
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: "responseText",
            }),
        );
    });

    test("DeleteItem (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: true, responseText: "Success" };
        server.mockEndpoint().delete("/LineItem/700").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.lineItem.deleteItem(700);
        expect(response).toEqual({
            isSuccess: true,
            responseText: "Success",
        });
    });

    test("DeleteItem (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().delete("/LineItem/1").respondWith().statusCode(400).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.lineItem.deleteItem(1);
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("DeleteItem (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().delete("/LineItem/1").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.lineItem.deleteItem(1);
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("DeleteItem (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().delete("/LineItem/1").respondWith().statusCode(500).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.lineItem.deleteItem(1);
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("DeleteItem (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: "responseText" };
        server.mockEndpoint().delete("/LineItem/1").respondWith().statusCode(503).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.lineItem.deleteItem(1);
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: "responseText",
            }),
        );
    });

    test("GetItem (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            createdAt: "2022-07-01T15:00:01Z",
            id: 45,
            itemCategories: ["itemCategories"],
            itemCommodityCode: "010",
            itemCost: 5,
            itemDescription: "Deposit for materials.",
            itemMode: 0,
            itemProductCode: "M-DEPOSIT",
            itemProductName: "Materials deposit",
            itemQty: 1,
            itemUnitOfMeasure: "SqFt",
            lastUpdated: "2022-07-01T15:00:01Z",
            pageidentifier: "null",
            ParentOrgName: "PropertyManager Pro",
            PaypointDbaname: "Sunshine Gutters",
            PaypointEntryname: "d193cf9a46",
            PaypointLegalname: "Sunshine Services, LLC",
        };
        server.mockEndpoint().get("/LineItem/700").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.lineItem.getItem(700);
        expect(response).toEqual({
            createdAt: "2022-07-01T15:00:01Z",
            id: 45,
            itemCategories: ["itemCategories"],
            itemCommodityCode: "010",
            itemCost: 5,
            itemDescription: "Deposit for materials.",
            itemMode: 0,
            itemProductCode: "M-DEPOSIT",
            itemProductName: "Materials deposit",
            itemQty: 1,
            itemUnitOfMeasure: "SqFt",
            lastUpdated: "2022-07-01T15:00:01Z",
            pageidentifier: "null",
            ParentOrgName: "PropertyManager Pro",
            PaypointDbaname: "Sunshine Gutters",
            PaypointEntryname: "d193cf9a46",
            PaypointLegalname: "Sunshine Services, LLC",
        });
    });

    test("GetItem (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/LineItem/1").respondWith().statusCode(400).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.lineItem.getItem(1);
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("GetItem (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/LineItem/1").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.lineItem.getItem(1);
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("GetItem (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/LineItem/1").respondWith().statusCode(500).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.lineItem.getItem(1);
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("GetItem (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: "responseText" };
        server.mockEndpoint().get("/LineItem/1").respondWith().statusCode(503).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.lineItem.getItem(1);
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: "responseText",
            }),
        );
    });

    test("ListLineItems (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            Records: [
                {
                    LineItem: { itemCost: 12.45, itemProductName: "Materials deposit", itemQty: 1 },
                    ParentOrgName: "PropertyManager Pro",
                    PaypointDbaname: "Sunshine Gutters",
                    PaypointEntryname: "d193cf9a46",
                    PaypointLegalname: "Sunshine Services, LLC",
                },
            ],
            Summary: {
                pageIdentifier: "null",
                pageSize: 20,
                totalAmount: 77.22,
                totalNetAmount: 77.22,
                totalPages: 2,
                totalRecords: 2,
            },
        };
        server
            .mockEndpoint()
            .get("/Query/lineitems/8cfec329267")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.lineItem.listLineItems("8cfec329267", {
            fromRecord: 251,
            limitRecord: 0,
            sortBy: "desc(field_name)",
        });
        expect(response).toEqual({
            Records: [
                {
                    LineItem: {
                        itemCost: 12.45,
                        itemProductName: "Materials deposit",
                        itemQty: 1,
                    },
                    ParentOrgName: "PropertyManager Pro",
                    PaypointDbaname: "Sunshine Gutters",
                    PaypointEntryname: "d193cf9a46",
                    PaypointLegalname: "Sunshine Services, LLC",
                },
            ],
            Summary: {
                pageIdentifier: "null",
                pageSize: 20,
                totalAmount: 77.22,
                totalNetAmount: 77.22,
                totalPages: 2,
                totalRecords: 2,
            },
        });
    });

    test("ListLineItems (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/lineitems/entry")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.lineItem.listLineItems("entry");
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("ListLineItems (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/lineitems/entry")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.lineItem.listLineItems("entry");
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("ListLineItems (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/lineitems/entry")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.lineItem.listLineItems("entry");
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("ListLineItems (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: "responseText" };
        server
            .mockEndpoint()
            .get("/Query/lineitems/entry")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.lineItem.listLineItems("entry");
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: "responseText",
            }),
        );
    });

    test("UpdateItem (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { itemCost: 12.45, itemQty: 1 };
        const rawResponseBody = { isSuccess: true, responseData: 700, responseText: "Success" };
        server
            .mockEndpoint()
            .put("/LineItem/700")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.lineItem.updateItem(700, {
            itemCost: 12.45,
            itemQty: 1,
        });
        expect(response).toEqual({
            isSuccess: true,
            responseData: 700,
            responseText: "Success",
        });
    });

    test("UpdateItem (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            itemCategories: undefined,
            itemCommodityCode: undefined,
            itemCost: 1.1,
            itemDescription: undefined,
            itemMode: undefined,
            itemProductCode: undefined,
            itemProductName: undefined,
            itemQty: 1,
            itemUnitOfMeasure: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/LineItem/1")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.lineItem.updateItem(1, {
                itemCategories: undefined,
                itemCommodityCode: undefined,
                itemCost: 1.1,
                itemDescription: undefined,
                itemMode: undefined,
                itemProductCode: undefined,
                itemProductName: undefined,
                itemQty: 1,
                itemUnitOfMeasure: undefined,
            });
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("UpdateItem (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            itemCategories: undefined,
            itemCommodityCode: undefined,
            itemCost: 1.1,
            itemDescription: undefined,
            itemMode: undefined,
            itemProductCode: undefined,
            itemProductName: undefined,
            itemQty: 1,
            itemUnitOfMeasure: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/LineItem/1")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.lineItem.updateItem(1, {
                itemCategories: undefined,
                itemCommodityCode: undefined,
                itemCost: 1.1,
                itemDescription: undefined,
                itemMode: undefined,
                itemProductCode: undefined,
                itemProductName: undefined,
                itemQty: 1,
                itemUnitOfMeasure: undefined,
            });
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("UpdateItem (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            itemCategories: undefined,
            itemCommodityCode: undefined,
            itemCost: 1.1,
            itemDescription: undefined,
            itemMode: undefined,
            itemProductCode: undefined,
            itemProductName: undefined,
            itemQty: 1,
            itemUnitOfMeasure: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/LineItem/1")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.lineItem.updateItem(1, {
                itemCategories: undefined,
                itemCommodityCode: undefined,
                itemCost: 1.1,
                itemDescription: undefined,
                itemMode: undefined,
                itemProductCode: undefined,
                itemProductName: undefined,
                itemQty: 1,
                itemUnitOfMeasure: undefined,
            });
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("UpdateItem (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            itemCategories: undefined,
            itemCommodityCode: undefined,
            itemCost: 1.1,
            itemDescription: undefined,
            itemMode: undefined,
            itemProductCode: undefined,
            itemProductName: undefined,
            itemQty: 1,
            itemUnitOfMeasure: undefined,
        };
        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: "responseText" };
        server
            .mockEndpoint()
            .put("/LineItem/1")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.lineItem.updateItem(1, {
                itemCategories: undefined,
                itemCommodityCode: undefined,
                itemCost: 1.1,
                itemDescription: undefined,
                itemMode: undefined,
                itemProductCode: undefined,
                itemProductName: undefined,
                itemQty: 1,
                itemUnitOfMeasure: undefined,
            });
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: "responseText",
            }),
        );
    });
});
