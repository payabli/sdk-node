/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { PayabliClient } from "../../src/Client";
import * as Payabli from "../../src/api/index";

describe("Wallet", () => {
    test("ConfigureApplePayOrganization (e1f7e21a)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { cascade: true, isEnabled: true, orgId: 901 };
        const rawResponseBody = {
            isSuccess: true,
            pageIdentifier: "null",
            responseCode: 1,
            responseData: {
                createdAt: "2022-07-01T15:00:01Z",
                id: "id",
                jobId: "445865",
                jobStatus: "completed",
                organizationId: 901,
                type: "type",
                updatedAt: "2022-07-01T15:00:01Z",
                updates: { cascade: true, isEnabled: true },
            },
            responseText: "Success",
        };
        server
            .mockEndpoint()
            .post("/Wallet/applepay/configure-organization")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.wallet.configureApplePayOrganization({
            cascade: true,
            isEnabled: true,
            orgId: 901,
        });
        expect(response).toEqual({
            isSuccess: true,
            pageIdentifier: "null",
            responseCode: 1,
            responseData: {
                createdAt: "2022-07-01T15:00:01Z",
                id: "id",
                jobId: "445865",
                jobStatus: "completed",
                organizationId: 901,
                type: "type",
                updatedAt: "2022-07-01T15:00:01Z",
                updates: {
                    cascade: true,
                    isEnabled: true,
                },
            },
            responseText: "Success",
        });
    });

    test("ConfigureApplePayOrganization (b6b09d6b)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { cascade: undefined, isEnabled: undefined, orgId: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/Wallet/applepay/configure-organization")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.wallet.configureApplePayOrganization({
                cascade: undefined,
                isEnabled: undefined,
                orgId: undefined,
            });
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("ConfigureApplePayOrganization (89e9a7db)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { cascade: undefined, isEnabled: undefined, orgId: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/Wallet/applepay/configure-organization")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.wallet.configureApplePayOrganization({
                cascade: undefined,
                isEnabled: undefined,
                orgId: undefined,
            });
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("ConfigureApplePayOrganization (de170387)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { cascade: undefined, isEnabled: undefined, orgId: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/Wallet/applepay/configure-organization")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.wallet.configureApplePayOrganization({
                cascade: undefined,
                isEnabled: undefined,
                orgId: undefined,
            });
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("ConfigureApplePayOrganization (448de3aa)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { cascade: undefined, isEnabled: undefined, orgId: undefined };
        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .post("/Wallet/applepay/configure-organization")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.wallet.configureApplePayOrganization({
                cascade: undefined,
                isEnabled: undefined,
                orgId: undefined,
            });
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("ConfigureApplePayPaypoint (Paypoint)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { entry: "8cfec329267", isEnabled: true };
        const rawResponseBody = {
            isSuccess: true,
            pageIdentifier: "null",
            responseCode: 1,
            responseData: {
                entry: "8cfec329267",
                isEnabled: true,
                walletType: "applepay",
                walletData: {
                    entry: "8cfec329267",
                    applePayMerchantId: "applePayMerchantId",
                    domainNames: ["subdomain.domain.com"],
                    paypointName: "Alaskan Domes",
                    paypointUrl: undefined,
                    markedForDeletionAt: "2022-07-01T15:00:01Z",
                    createdAt: "2022-07-01T15:00:01Z",
                    updatedAt: "2022-07-01T15:00:01Z",
                    id: "id",
                    type: "ApplePayRegistration",
                },
            },
            responseText: "Success",
            roomId: undefined,
        };
        server
            .mockEndpoint()
            .post("/Wallet/applepay/configure-paypoint")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.wallet.configureApplePayPaypoint({
            entry: "8cfec329267",
            isEnabled: true,
        });
        expect(response).toEqual({
            isSuccess: true,
            pageIdentifier: "null",
            responseCode: 1,
            responseData: {
                entry: "8cfec329267",
                isEnabled: true,
                walletType: "applepay",
                walletData: {
                    entry: "8cfec329267",
                    applePayMerchantId: "applePayMerchantId",
                    domainNames: ["subdomain.domain.com"],
                    paypointName: "Alaskan Domes",
                    paypointUrl: undefined,
                    markedForDeletionAt: "2022-07-01T15:00:01Z",
                    createdAt: "2022-07-01T15:00:01Z",
                    updatedAt: "2022-07-01T15:00:01Z",
                    id: "id",
                    type: "ApplePayRegistration",
                },
            },
            responseText: "Success",
            roomId: undefined,
        });
    });

    test("ConfigureApplePayPaypoint (26278ba4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { entry: undefined, isEnabled: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/Wallet/applepay/configure-paypoint")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.wallet.configureApplePayPaypoint({
                entry: undefined,
                isEnabled: undefined,
            });
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("ConfigureApplePayPaypoint (8a6f8cc)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { entry: undefined, isEnabled: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/Wallet/applepay/configure-paypoint")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.wallet.configureApplePayPaypoint({
                entry: undefined,
                isEnabled: undefined,
            });
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("ConfigureApplePayPaypoint (c13a4280)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { entry: undefined, isEnabled: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/Wallet/applepay/configure-paypoint")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.wallet.configureApplePayPaypoint({
                entry: undefined,
                isEnabled: undefined,
            });
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("ConfigureApplePayPaypoint (17b5ae17)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { entry: undefined, isEnabled: undefined };
        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .post("/Wallet/applepay/configure-paypoint")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.wallet.configureApplePayPaypoint({
                entry: undefined,
                isEnabled: undefined,
            });
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("ConfigureGooglePayOrganization (ConfigureOrganization)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { cascade: true, isEnabled: true, orgId: 901 };
        const rawResponseBody = {
            isSuccess: true,
            pageIdentifier: "null",
            responseCode: 1,
            responseData: {
                createdAt: "2022-07-01T15:00:01Z",
                id: "id",
                jobId: "445865",
                jobStatus: "completed",
                organizationId: 901,
                type: "type",
                updatedAt: "2022-07-01T15:00:01Z",
                updates: { cascade: true, isEnabled: true },
            },
            responseText: "Success",
        };
        server
            .mockEndpoint()
            .post("/Wallet/googlepay/configure-organization")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.wallet.configureGooglePayOrganization({
            cascade: true,
            isEnabled: true,
            orgId: 901,
        });
        expect(response).toEqual({
            isSuccess: true,
            pageIdentifier: "null",
            responseCode: 1,
            responseData: {
                createdAt: "2022-07-01T15:00:01Z",
                id: "id",
                jobId: "445865",
                jobStatus: "completed",
                organizationId: 901,
                type: "type",
                updatedAt: "2022-07-01T15:00:01Z",
                updates: {
                    cascade: true,
                    isEnabled: true,
                },
            },
            responseText: "Success",
        });
    });

    test("ConfigureGooglePayOrganization (b6b09d6b)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { cascade: undefined, isEnabled: undefined, orgId: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/Wallet/googlepay/configure-organization")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.wallet.configureGooglePayOrganization({
                cascade: undefined,
                isEnabled: undefined,
                orgId: undefined,
            });
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("ConfigureGooglePayOrganization (89e9a7db)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { cascade: undefined, isEnabled: undefined, orgId: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/Wallet/googlepay/configure-organization")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.wallet.configureGooglePayOrganization({
                cascade: undefined,
                isEnabled: undefined,
                orgId: undefined,
            });
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("ConfigureGooglePayOrganization (de170387)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { cascade: undefined, isEnabled: undefined, orgId: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/Wallet/googlepay/configure-organization")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.wallet.configureGooglePayOrganization({
                cascade: undefined,
                isEnabled: undefined,
                orgId: undefined,
            });
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("ConfigureGooglePayOrganization (448de3aa)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { cascade: undefined, isEnabled: undefined, orgId: undefined };
        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .post("/Wallet/googlepay/configure-organization")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.wallet.configureGooglePayOrganization({
                cascade: undefined,
                isEnabled: undefined,
                orgId: undefined,
            });
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("ConfigureGooglePayPaypoint (ConfigurePaypoint)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { entry: "8cfec329267", isEnabled: true };
        const rawResponseBody = {
            isSuccess: true,
            pageIdentifier: "null",
            responseCode: 1,
            responseData: {
                entry: "8cfec329267",
                isEnabled: true,
                walletType: "googlepay",
                walletData: { gatewayMerchantId: "123ID", gatewayId: "123ID" },
            },
            responseText: "Success",
            roomId: undefined,
        };
        server
            .mockEndpoint()
            .post("/Wallet/googlepay/configure-paypoint")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.wallet.configureGooglePayPaypoint({
            entry: "8cfec329267",
            isEnabled: true,
        });
        expect(response).toEqual({
            isSuccess: true,
            pageIdentifier: "null",
            responseCode: 1,
            responseData: {
                entry: "8cfec329267",
                isEnabled: true,
                walletType: "googlepay",
                walletData: {
                    gatewayMerchantId: "123ID",
                    gatewayId: "123ID",
                },
            },
            responseText: "Success",
            roomId: undefined,
        });
    });

    test("ConfigureGooglePayPaypoint (26278ba4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { entry: undefined, isEnabled: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/Wallet/googlepay/configure-paypoint")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.wallet.configureGooglePayPaypoint({
                entry: undefined,
                isEnabled: undefined,
            });
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("ConfigureGooglePayPaypoint (8a6f8cc)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { entry: undefined, isEnabled: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/Wallet/googlepay/configure-paypoint")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.wallet.configureGooglePayPaypoint({
                entry: undefined,
                isEnabled: undefined,
            });
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("ConfigureGooglePayPaypoint (c13a4280)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { entry: undefined, isEnabled: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/Wallet/googlepay/configure-paypoint")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.wallet.configureGooglePayPaypoint({
                entry: undefined,
                isEnabled: undefined,
            });
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("ConfigureGooglePayPaypoint (17b5ae17)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { entry: undefined, isEnabled: undefined };
        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .post("/Wallet/googlepay/configure-paypoint")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.wallet.configureGooglePayPaypoint({
                entry: undefined,
                isEnabled: undefined,
            });
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });
});
