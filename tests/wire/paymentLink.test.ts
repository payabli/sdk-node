/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { PayabliClient } from "../../src/Client";
import * as Payabli from "../../src/api/index";

describe("PaymentLink", () => {
    test("AddPayLinkFromInvoice (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            contactUs: {
                emailLabel: "Email",
                enabled: true,
                header: "Contact Us",
                order: 0,
                paymentIcons: true,
                phoneLabel: "Phone",
            },
            invoices: {
                enabled: true,
                invoiceLink: { enabled: true, label: "View Invoice", order: 0 },
                order: 0,
                viewInvoiceDetails: { enabled: true, label: "Invoice Details", order: 0 },
            },
            logo: { enabled: true, order: 0 },
            messageBeforePaying: { enabled: true, label: "Please review your payment details", order: 0 },
            notes: {
                enabled: true,
                header: "Additional Notes",
                order: 0,
                placeholder: "Enter any additional notes here",
                value: "",
            },
            page: { description: "Complete your payment securely", enabled: true, header: "Payment Page", order: 0 },
            paymentButton: { enabled: true, label: "Pay Now", order: 0 },
            paymentMethods: {
                allMethodsChecked: true,
                enabled: true,
                header: "Payment Methods",
                methods: { amex: true, applePay: true, discover: true, eCheck: true, mastercard: true, visa: true },
                order: 0,
                settings: { applePay: { buttonStyle: "black", buttonType: "pay", language: "en-US" } },
            },
            payor: {
                enabled: true,
                fields: [
                    {
                        display: true,
                        fixed: true,
                        identifier: true,
                        label: "Full Name",
                        name: "fullName",
                        order: 0,
                        required: true,
                        validation: "^[a-zA-Z ]+$",
                        value: "",
                        width: 0,
                    },
                ],
                header: "Payor Information",
                order: 0,
            },
            review: { enabled: true, header: "Review Payment", order: 0 },
            settings: {
                color: "#000000",
                customCssUrl: "https://example.com/custom.css",
                language: "en",
                pageLogo: {
                    fContent:
                        "PHN2ZyB2aWV3Qm94PSIwIDAgODAwIDEwMDAiIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyI+CiAgPCEtLSBCYWNrZ3JvdW5kIC0tPgogIDxyZWN0IHdpZHRoPSI4MDAiIGhlaWdodD0iMTAwMCIgZmlsbD0id2hpdGUiLz4KICAKICA8IS0tIENvbXBhbnkgSGVhZGVyIC0tPgogIDx0ZXh0IHg9IjQwIiB5PSI2MCIgZm9udC1mYW1pbHk9IkFyaWFsIiBmb250LXNpemU9IjI0IiBmb250LXdlaWdodD0iYm9sZCIgZmlsbD0iIzJjM2U1MCI+R3J1enlhIEFkdmVudHVyZSBPdXRmaXR0ZXJzPC90ZXh0PgogIDxsaW5lIHgxPSI0MCIgeTE9IjgwIiB4Mj0iNzYwIiB5Mj0iODAiIHN0cm9rZT0iIzJjM2U1MCIgc3Ryb2tlLXdpZHRoPSIyIi8+CiAgCiAgPCEtLSBDb21wYW55IERldGFpbHMgLS0+CiAgPHRleHQgeD0iNDAiIHk9IjExMCIgZm9udC1mYW1pbHk9IkFyaWFsIiBmb250LXNpemU9IjE0IiBmaWxsPSIjMzQ0OTVlIj4xMjMgTW91bnRhaW4gVmlldyBSb2FkPC90ZXh0PgogIDx0ZXh0IHg9IjQwIiB5PSIxMzAiIGZvbnQtZmFtaWx5PSJBcmlhbCIgZm9udC1zaXplPSIxNCIgZmlsbD0iIzM0NDk1ZSI+VGJpbGlzaSwgR2VvcmdpYSAwMTA1PC90ZXh0PgogIDx0ZXh0IHg9IjQwIiB5PSIxNTAiIGZvbnQtZmFtaWx5PSJBcmlhbCIgZm9udC1zaXplPSIxNCIgZmlsbD0iIzM0NDk1ZSI+VGVsOiArOTk1IDMyIDEyMyA0NTY3PC90ZXh0PgogIDx0ZXh0IHg9IjQwIiB5PSIxNzAiIGZvbnQtZmFtaWx5PSJBcmlhbCIgZm9udC1zaXplPSIxNCIgZmlsbD0iIzM0NDk1ZSI+RW1haWw6IGluZm9AZ3J1enlhYWR2ZW50dXJlcy5jb208L3RleHQ+CgogIDwhLS0gSW52b2ljZSBUaXRsZSAtLT4KICA8dGV4dCB4PSI2MDAiIHk9IjExMCIgZm9udC1mYW1pbHk9IkFyaWFsIiBmb250LXNpemU9IjI0IiBmb250LXdlaWdodD0iYm9sZCIgZmlsbD0iIzJjM2U1MCI+SU5WT0lDRTwvdGV4dD4KICA8dGV4dCB4PSI2MDAiIHk9IjE0MCIgZm9udC1mYW1pbHk9IkFyaWFsIiBmb250LXNpemU9IjE0IiBmaWxsPSIjMzQ0OTVlIj5EYXRlOiAxMi8xMS8yMDI0PC90ZXh0PgogIDx0ZXh0IHg9IjYwMCIgeT0iMTYwIiBmb250LWZhbWlseT0iQXJpYWwiIGZvbnQtc2l6ZT0iMTQiIGZpbGw9IiMzNDQ5NWUiPkludm9pY2UgIzogR1JaLTIwMjQtMTEyMzwvdGV4dD4KCiAgPCEtLSBCaWxsIFRvIFNlY3Rpb24gLS0+CiAgPHRleHQgeD0iNDAiIHk9IjIyMCIgZm9udC1mYW1pbHk9IkFyaWFsIiBmb250LXNpemU9IjE2IiBmb250LXdlaWdodD0iYm9sZCIgZmlsbD0iIzJjM2U1MCI+QklMTCBUTzo8L3RleHQ+CiAgPHJlY3QgeD0iNDAiIHk9IjIzNSIgd2lkdGg9IjMwMCIgaGVpZ2h0PSI4MCIgZmlsbD0iI2Y3ZjlmYSIvPgogIDx0ZXh0IHg9IjUwIiB5PSIyNjAiIGZvbnQtZmFtaWx5PSJBcmlhbCIgZm9udC1zaXplPSIxNCIgZmlsbD0iIzM0NDk1ZSI+W0N1c3RvbWVyIE5hbWVdPC90ZXh0PgogIDx0ZXh0IHg9IjUwIiB5PSIyODAiIGZvbnQtZmFtaWx5PSJBcmlhbCIgZm9udC1zaXplPSIxNCIgZmlsbD0iIzM0NDk1ZSI+W0FkZHJlc3MgTGluZSAxXTwvdGV4dD4KICA8dGV4dCB4PSI1MCIgeT0iMzAwIiBmb250LWZhbWlseT0iQXJpYWwiIGZvbnQtc2l6ZT0iMTQiIGZpbGw9IiMzNDQ5NWUiPltDaXR5LCBDb3VudHJ5XTwvdGV4dD4KCiAgPCEtLSBUYWJsZSBIZWFkZXJzIC0tPgogIDxyZWN0IHg9IjQwIiB5PSIzNDAiIHdpZHRoPSI3MjAiIGhlaWdodD0iMzAiIGZpbGw9IiMyYzNlNTAiLz4KICA8dGV4dCB4PSI1MCIgeT0iMzYwIiBmb250LWZhbWlseT0iQXJpYWwiIGZvbnQtc2l6ZT0iMTQiIGZvbnQtd2VpZ2h0PSJib2xkIiBmaWxsPSJ3aGl0ZSI+RGVzY3JpcHRpb248L3RleHQ+CiAgPHRleHQgeD0iNDUwIiB5PSIzNjAiIGZvbnQtZmFtaWx5PSJBcmlhbCIgZm9udC1zaXplPSIxNCIgZm9udC13ZWlnaHQ9ImJvbGQiIGZpbGw9IndoaXRlIj5RdWFudGl0eTwvdGV4dD4KICA8dGV4dCB4PSI1NTAiIHk9IjM2MCIgZm9udC1mYW1pbHk9IkFyaWFsIiBmb250LXNpemU9IjE0IiBmb250LXdlaWdodD0iYm9sZCIgZmlsbD0id2hpdGUiPlJhdGU8L3RleHQ+CiAgPHRleHQgeD0iNjgwIiB5PSIzNjAiIGZvbnQtZmFtaWx5PSJBcmlhbCIgZm9udC1zaXplPSIxNCIgZm9udC13ZWlnaHQ9ImJvbGQiIGZpbGw9IndoaXRlIj5BbW91bnQ8L3RleHQ+CgogIDwhLS0gVGFibGUgUm93cyAtLT4KICA8cmVjdCB4PSI0MCIgeT0iMzcwIiB3aWR0aD0iNzIwIiBoZWlnaHQ9IjMwIiBmaWxsPSIjZjdmOWZhIi8+CiAgPHRleHQgeD0iNTAiIHk9IjM5MCIgZm9udC1mYW1pbHk9IkFyaWFsIiBmb250LXNpemU9IjE0IiBmaWxsPSIjMzQ0OTVlIj5Nb3VudGFpbiBDbGltYmluZyBFcXVpcG1lbnQgUmVudGFsPC90ZXh0PgogIDx0ZXh0IHg9IjQ1MCIgeT0iMzkwIiBmb250LWZhbWlseT0iQXJpYWwiIGZvbnQtc2l6ZT0iMTQiIGZpbGw9IiMzNDQ5NWUiPjE8L3RleHQ+CiAgPHRleHQgeD0iNTUwIiB5PSIzOTAiIGZvbnQtZmFtaWx5PSJBcmlhbCIgZm9udC1zaXplPSIxNCIgZmlsbD0iIzM0NDk1ZSI+JDI1MC4wMDwvdGV4dD4KICA8dGV4dCB4PSI2ODAiIHk9IjM5MCIgZm9udC1mYW1pbHk9IkFyaWFsIiBmb250LXNpemU9IjE0IiBmaWxsPSIjMzQ0OTVlIj4kMjUwLjAwPC90ZXh0PgoKICA8cmVjdCB4PSI0MCIgeT0iNDAwIiB3aWR0aD0iNzIwIiBoZWlnaHQ9IjMwIiBmaWxsPSJ3aGl0ZSIvPgogIDx0ZXh0IHg9IjUwIiB5PSI0MjAiIGZvbnQtZmFtaWx5PSJBcmlhbCIgZm9udC1zaXplPSIxNCIgZmlsbD0iIzM0NDk1ZSI+R3VpZGVkIFRyZWsgUGFja2FnZSAtIDIgRGF5czwvdGV4dD4KICA8dGV4dCB4PSI0NTAiIHk9IjQyMCIgZm9udC1mYW1pbHk9IkFyaWFsIiBmb250LXNpemU9IjE0IiBmaWxsPSIjMzQ0OTVlIj4xPC90ZXh0PgogIDx0ZXh0IHg9IjU1MCIgeT0iNDIwIiBmb250LWZhbWlseT0iQXJpYWwiIGZvbnQtc2l6ZT0iMTQiIGZpbGw9IiMzNDQ5NWUiPiQ0MDAuMDA8L3RleHQ+CiAgPHRleHQgeD0iNjgwIiB5PSI0MjAiIGZvbnQtZmFtaWx5PSJBcmlhbCIgZm9udC1zaXplPSIxNCIgZmlsbD0iIzM0NDk1ZSI+JDQwMC4wMDwvdGV4dD4KCiAgPHJlY3QgeD0iNDAiIHk9IjQzMCIgd2lkdGg9IjcyMCIgaGVpZ2h0PSIzMCIgZmlsbD0iI2Y3ZjlmYSIvPgogIDx0ZXh0IHg9IjUwIiB5PSI0NTAiIGZvbnQtZmFtaWx5PSJBcmlhbCIgZm9udC1zaXplPSIxNCIgZmlsbD0iIzM0NDk1ZSI+U2FmZXR5IEVxdWlwbWVudCBQYWNrYWdlPC90ZXh0PgogIDx0ZXh0IHg9IjQ1MCIgeT0iNDUwIiBmb250LWZhbWlseT0iQXJpYWwiIGZvbnQtc2l6ZT0iMTQiIGZpbGw9IiMzNDQ5NWUiPjE8L3RleHQ+CiAgPHRleHQgeD0iNTUwIiB5PSI0NTAiIGZvbnQtZmFtaWx5PSJBcmlhbCIgZm9udC1zaXplPSIxNCIgZmlsbD0iIzM0NDk1ZSI+JDE1MC4wMDwvdGV4dD4KICA8dGV4dCB4PSI2ODAiIHk9IjQ1MCIgZm9udC1mYW1pbHk9IkFyaWFsIiBmb250LXNpemU9IjE0IiBmaWxsPSIjMzQ0OTVlIj4kMTUwLjAwPC90ZXh0PgoKICA8IS0tIFRvdGFscyAtLT4KICA8bGluZSB4MT0iNDAiIHkxPSI0ODAiIHgyPSI3NjAiIHkyPSI0ODAiIHN0cm9rZT0iIzJjM2U1MCIgc3Ryb2tlLXdpZHRoPSIxIi8+CiAgPHRleHQgeD0iNTUwIiB5PSI1MTAiIGZvbnQtZmFtaWx5PSJBcmlhbCIgZm9udC1zaXplPSIxNCIgZm9udC13ZWlnaHQ9ImJvbGQiIGZpbGw9IiMzNDQ5NWUiPlN1YnRvdGFsOjwvdGV4dD4KICA8dGV4dCB4PSI2ODAiIHk9IjUxMCIgZm9udC1mYW1pbHk9IkFyaWFsIiBmb250LXNpemU9IjE0IiBmaWxsPSIjMzQ0OTVlIj4kODAwLjAwPC90ZXh0PgogIDx0ZXh0IHg9IjU1MCIgeT0iNTM1IiBmb250LWZhbWlseT0iQXJpYWwiIGZvbnQtc2l6ZT0iMTQiIGZvbnQtd2VpZ2h0PSJib2xkIiBmaWxsPSIjMzQ0OTVlIj5UYXggKDE4JSk6PC90ZXh0PgogIDx0ZXh0IHg9IjY4MCIgeT0iNTM1IiBmb250LWZhbWlseT0iQXJpYWwiIGZvbnQtc2l6ZT0iMTQiIGZpbGw9IiMzNDQ5NWUiPiQxNDQuMDA8L3RleHQ+CiAgPHRleHQgeD0iNTUwIiB5PSI1NzAiIGZvbnQtZmFtaWx5PSJBcmlhbCIgZm9udC1zaXplPSIxNiIgZm9udC13ZWlnaHQ9ImJvbGQiIGZpbGw9IiMyYzNlNTAiPlRvdGFsOjwvdGV4dD4KICA8dGV4dCB4PSI2ODAiIHk9IjU3MCIgZm9udC1mYW1pbHk9IkFyaWFsIiBmb250LXNpemU9IjE2IiBmb250LXdlaWdodD0iYm9sZCIgZmlsbD0iIzJjM2U1MCI+JDk0NC4wMDwvdGV4dD4KCiAgPCEtLSBQYXltZW50IFRlcm1zIC0tPgogIDx0ZXh0IHg9IjQwIiB5PSI2NDAiIGZvbnQtZmFtaWx5PSJBcmlhbCIgZm9udC1zaXplPSIxNiIgZm9udC13ZWlnaHQ9ImJvbGQiIGZpbGw9IiMyYzNlNTAiPlBheW1lbnQgVGVybXM8L3RleHQ+CiAgPHRleHQgeD0iNDAiIHk9IjY3MCIgZm9udC1mYW1pbHk9IkFyaWFsIiBmb250LXNpemU9IjE0IiBmaWxsPSIjMzQ0OTVlIj5QYXltZW50IGlzIGR1ZSB3aXRoaW4gMzAgZGF5czwvdGV4dD4KICA8dGV4dCB4PSI0MCIgeT0iNjkwIiBmb250LWZhbWlseT0iQXJpYWwiIGZvbnQtc2l6ZT0iMTQiIGZpbGw9IiMzNDQ5NWUiPlBsZWFzZSBpbmNsdWRlIGludm9pY2UgbnVtYmVyIG9uIHBheW1lbnQ8L3RleHQ+CgogIDwhLS0gQmFuayBEZXRhaWxzIC0tPgogIDx0ZXh0IHg9IjQwIiB5PSI3MzAiIGZvbnQtZmFtaWx5PSJBcmlhbCIgZm9udC1zaXplPSIxNiIgZm9udC13ZWlnaHQ9ImJvbGQiIGZpbGw9IiMyYzNlNTAiPkJhbmsgRGV0YWlsczwvdGV4dD4KICA8dGV4dCB4PSI0MCIgeT0iNzYwIiBmb250LWZhbWlseT0iQXJpYWwiIGZvbnQtc2l6ZT0iMTQiIGZpbGw9IiMzNDQ5NWUiPkJhbms6IEJhbmsgb2YgR2VvcmdpYTwvdGV4dD4KICA8dGV4dCB4PSI0MCIgeT0iNzgwIiBmb250LWZhbWlseT0iQXJpYWwiIGZvbnQtc2l6ZT0iMTQiIGZpbGw9IiMzNDQ5NWUiPklCQU46IEdFMTIzNDU2Nzg5MDEyMzQ1Njc4PC90ZXh0PgogIDx0ZXh0IHg9IjQwIiB5PSI4MDAiIGZvbnQtZmFtaWx5PSJBcmlhbCIgZm9udC1zaXplPSIxNCIgZmlsbD0iIzM0NDk1ZSI+U1dJRlQ6IEJBR0FHRTIyPC90ZXh0PgoKICA8IS0tIEZvb3RlciAtLT4KICA8bGluZSB4MT0iNDAiIHkxPSI5MDAiIHgyPSI3NjAiIHkyPSI5MDAiIHN0cm9rZT0iIzJjM2U1MCIgc3Ryb2tlLXdpZHRoPSIxIi8+CiAgPHRleHQgeD0iNDAiIHk9IjkzMCIgZm9udC1mYW1pbHk9IkFyaWFsIiBmb250LXNpemU9IjEyIiBmaWxsPSIjN2Y4YzhkIj5UaGFuayB5b3UgZm9yIGNob29zaW5nIEdydXp5YSBBZHZlbnR1cmUgT3V0Zml0dGVyczwvdGV4dD4KICA8dGV4dCB4PSI0MCIgeT0iOTUwIiBmb250LWZhbWlseT0iQXJpYWwiIGZvbnQtc2l6ZT0iMTIiIGZpbGw9IiM3ZjhjOGQiPnd3dy5ncnV6eWFhZHZlbnR1cmVzLmNvbTwvdGV4dD4KPC9zdmc+Cg==",
                    filename: "logo.jpg",
                    ftype: "jpg",
                    furl: "",
                },
                redirectAfterApprove: true,
                redirectAfterApproveUrl: "https://example.com/success",
            },
        };
        const rawResponseBody = {
            isSuccess: true,
            responseData: "2325-XXXXXXX-90b1-4598-b6c7-44cdcbf495d7-1234",
            responseText: "Success",
        };
        server
            .mockEndpoint()
            .post("/PaymentLink/23548884")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.paymentLink.addPayLinkFromInvoice(23548884, {
            mail2: "jo@example.com; ceo@example.com",
            body: {
                contactUs: {
                    emailLabel: "Email",
                    enabled: true,
                    header: "Contact Us",
                    order: 0,
                    paymentIcons: true,
                    phoneLabel: "Phone",
                },
                invoices: {
                    enabled: true,
                    invoiceLink: {
                        enabled: true,
                        label: "View Invoice",
                        order: 0,
                    },
                    order: 0,
                    viewInvoiceDetails: {
                        enabled: true,
                        label: "Invoice Details",
                        order: 0,
                    },
                },
                logo: {
                    enabled: true,
                    order: 0,
                },
                messageBeforePaying: {
                    enabled: true,
                    label: "Please review your payment details",
                    order: 0,
                },
                notes: {
                    enabled: true,
                    header: "Additional Notes",
                    order: 0,
                    placeholder: "Enter any additional notes here",
                    value: "",
                },
                page: {
                    description: "Complete your payment securely",
                    enabled: true,
                    header: "Payment Page",
                    order: 0,
                },
                paymentButton: {
                    enabled: true,
                    label: "Pay Now",
                    order: 0,
                },
                paymentMethods: {
                    allMethodsChecked: true,
                    enabled: true,
                    header: "Payment Methods",
                    methods: {
                        amex: true,
                        applePay: true,
                        discover: true,
                        eCheck: true,
                        mastercard: true,
                        visa: true,
                    },
                    order: 0,
                    settings: {
                        applePay: {
                            buttonStyle: "black",
                            buttonType: "pay",
                            language: "en-US",
                        },
                    },
                },
                payor: {
                    enabled: true,
                    fields: [
                        {
                            display: true,
                            fixed: true,
                            identifier: true,
                            label: "Full Name",
                            name: "fullName",
                            order: 0,
                            required: true,
                            validation: "^[a-zA-Z ]+$",
                            value: "",
                            width: 0,
                        },
                    ],
                    header: "Payor Information",
                    order: 0,
                },
                review: {
                    enabled: true,
                    header: "Review Payment",
                    order: 0,
                },
                settings: {
                    color: "#000000",
                    customCssUrl: "https://example.com/custom.css",
                    language: "en",
                    pageLogo: {
                        fContent:
                            "PHN2ZyB2aWV3Qm94PSIwIDAgODAwIDEwMDAiIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyI+CiAgPCEtLSBCYWNrZ3JvdW5kIC0tPgogIDxyZWN0IHdpZHRoPSI4MDAiIGhlaWdodD0iMTAwMCIgZmlsbD0id2hpdGUiLz4KICAKICA8IS0tIENvbXBhbnkgSGVhZGVyIC0tPgogIDx0ZXh0IHg9IjQwIiB5PSI2MCIgZm9udC1mYW1pbHk9IkFyaWFsIiBmb250LXNpemU9IjI0IiBmb250LXdlaWdodD0iYm9sZCIgZmlsbD0iIzJjM2U1MCI+R3J1enlhIEFkdmVudHVyZSBPdXRmaXR0ZXJzPC90ZXh0PgogIDxsaW5lIHgxPSI0MCIgeTE9IjgwIiB4Mj0iNzYwIiB5Mj0iODAiIHN0cm9rZT0iIzJjM2U1MCIgc3Ryb2tlLXdpZHRoPSIyIi8+CiAgCiAgPCEtLSBDb21wYW55IERldGFpbHMgLS0+CiAgPHRleHQgeD0iNDAiIHk9IjExMCIgZm9udC1mYW1pbHk9IkFyaWFsIiBmb250LXNpemU9IjE0IiBmaWxsPSIjMzQ0OTVlIj4xMjMgTW91bnRhaW4gVmlldyBSb2FkPC90ZXh0PgogIDx0ZXh0IHg9IjQwIiB5PSIxMzAiIGZvbnQtZmFtaWx5PSJBcmlhbCIgZm9udC1zaXplPSIxNCIgZmlsbD0iIzM0NDk1ZSI+VGJpbGlzaSwgR2VvcmdpYSAwMTA1PC90ZXh0PgogIDx0ZXh0IHg9IjQwIiB5PSIxNTAiIGZvbnQtZmFtaWx5PSJBcmlhbCIgZm9udC1zaXplPSIxNCIgZmlsbD0iIzM0NDk1ZSI+VGVsOiArOTk1IDMyIDEyMyA0NTY3PC90ZXh0PgogIDx0ZXh0IHg9IjQwIiB5PSIxNzAiIGZvbnQtZmFtaWx5PSJBcmlhbCIgZm9udC1zaXplPSIxNCIgZmlsbD0iIzM0NDk1ZSI+RW1haWw6IGluZm9AZ3J1enlhYWR2ZW50dXJlcy5jb208L3RleHQ+CgogIDwhLS0gSW52b2ljZSBUaXRsZSAtLT4KICA8dGV4dCB4PSI2MDAiIHk9IjExMCIgZm9udC1mYW1pbHk9IkFyaWFsIiBmb250LXNpemU9IjI0IiBmb250LXdlaWdodD0iYm9sZCIgZmlsbD0iIzJjM2U1MCI+SU5WT0lDRTwvdGV4dD4KICA8dGV4dCB4PSI2MDAiIHk9IjE0MCIgZm9udC1mYW1pbHk9IkFyaWFsIiBmb250LXNpemU9IjE0IiBmaWxsPSIjMzQ0OTVlIj5EYXRlOiAxMi8xMS8yMDI0PC90ZXh0PgogIDx0ZXh0IHg9IjYwMCIgeT0iMTYwIiBmb250LWZhbWlseT0iQXJpYWwiIGZvbnQtc2l6ZT0iMTQiIGZpbGw9IiMzNDQ5NWUiPkludm9pY2UgIzogR1JaLTIwMjQtMTEyMzwvdGV4dD4KCiAgPCEtLSBCaWxsIFRvIFNlY3Rpb24gLS0+CiAgPHRleHQgeD0iNDAiIHk9IjIyMCIgZm9udC1mYW1pbHk9IkFyaWFsIiBmb250LXNpemU9IjE2IiBmb250LXdlaWdodD0iYm9sZCIgZmlsbD0iIzJjM2U1MCI+QklMTCBUTzo8L3RleHQ+CiAgPHJlY3QgeD0iNDAiIHk9IjIzNSIgd2lkdGg9IjMwMCIgaGVpZ2h0PSI4MCIgZmlsbD0iI2Y3ZjlmYSIvPgogIDx0ZXh0IHg9IjUwIiB5PSIyNjAiIGZvbnQtZmFtaWx5PSJBcmlhbCIgZm9udC1zaXplPSIxNCIgZmlsbD0iIzM0NDk1ZSI+W0N1c3RvbWVyIE5hbWVdPC90ZXh0PgogIDx0ZXh0IHg9IjUwIiB5PSIyODAiIGZvbnQtZmFtaWx5PSJBcmlhbCIgZm9udC1zaXplPSIxNCIgZmlsbD0iIzM0NDk1ZSI+W0FkZHJlc3MgTGluZSAxXTwvdGV4dD4KICA8dGV4dCB4PSI1MCIgeT0iMzAwIiBmb250LWZhbWlseT0iQXJpYWwiIGZvbnQtc2l6ZT0iMTQiIGZpbGw9IiMzNDQ5NWUiPltDaXR5LCBDb3VudHJ5XTwvdGV4dD4KCiAgPCEtLSBUYWJsZSBIZWFkZXJzIC0tPgogIDxyZWN0IHg9IjQwIiB5PSIzNDAiIHdpZHRoPSI3MjAiIGhlaWdodD0iMzAiIGZpbGw9IiMyYzNlNTAiLz4KICA8dGV4dCB4PSI1MCIgeT0iMzYwIiBmb250LWZhbWlseT0iQXJpYWwiIGZvbnQtc2l6ZT0iMTQiIGZvbnQtd2VpZ2h0PSJib2xkIiBmaWxsPSJ3aGl0ZSI+RGVzY3JpcHRpb248L3RleHQ+CiAgPHRleHQgeD0iNDUwIiB5PSIzNjAiIGZvbnQtZmFtaWx5PSJBcmlhbCIgZm9udC1zaXplPSIxNCIgZm9udC13ZWlnaHQ9ImJvbGQiIGZpbGw9IndoaXRlIj5RdWFudGl0eTwvdGV4dD4KICA8dGV4dCB4PSI1NTAiIHk9IjM2MCIgZm9udC1mYW1pbHk9IkFyaWFsIiBmb250LXNpemU9IjE0IiBmb250LXdlaWdodD0iYm9sZCIgZmlsbD0id2hpdGUiPlJhdGU8L3RleHQ+CiAgPHRleHQgeD0iNjgwIiB5PSIzNjAiIGZvbnQtZmFtaWx5PSJBcmlhbCIgZm9udC1zaXplPSIxNCIgZm9udC13ZWlnaHQ9ImJvbGQiIGZpbGw9IndoaXRlIj5BbW91bnQ8L3RleHQ+CgogIDwhLS0gVGFibGUgUm93cyAtLT4KICA8cmVjdCB4PSI0MCIgeT0iMzcwIiB3aWR0aD0iNzIwIiBoZWlnaHQ9IjMwIiBmaWxsPSIjZjdmOWZhIi8+CiAgPHRleHQgeD0iNTAiIHk9IjM5MCIgZm9udC1mYW1pbHk9IkFyaWFsIiBmb250LXNpemU9IjE0IiBmaWxsPSIjMzQ0OTVlIj5Nb3VudGFpbiBDbGltYmluZyBFcXVpcG1lbnQgUmVudGFsPC90ZXh0PgogIDx0ZXh0IHg9IjQ1MCIgeT0iMzkwIiBmb250LWZhbWlseT0iQXJpYWwiIGZvbnQtc2l6ZT0iMTQiIGZpbGw9IiMzNDQ5NWUiPjE8L3RleHQ+CiAgPHRleHQgeD0iNTUwIiB5PSIzOTAiIGZvbnQtZmFtaWx5PSJBcmlhbCIgZm9udC1zaXplPSIxNCIgZmlsbD0iIzM0NDk1ZSI+JDI1MC4wMDwvdGV4dD4KICA8dGV4dCB4PSI2ODAiIHk9IjM5MCIgZm9udC1mYW1pbHk9IkFyaWFsIiBmb250LXNpemU9IjE0IiBmaWxsPSIjMzQ0OTVlIj4kMjUwLjAwPC90ZXh0PgoKICA8cmVjdCB4PSI0MCIgeT0iNDAwIiB3aWR0aD0iNzIwIiBoZWlnaHQ9IjMwIiBmaWxsPSJ3aGl0ZSIvPgogIDx0ZXh0IHg9IjUwIiB5PSI0MjAiIGZvbnQtZmFtaWx5PSJBcmlhbCIgZm9udC1zaXplPSIxNCIgZmlsbD0iIzM0NDk1ZSI+R3VpZGVkIFRyZWsgUGFja2FnZSAtIDIgRGF5czwvdGV4dD4KICA8dGV4dCB4PSI0NTAiIHk9IjQyMCIgZm9udC1mYW1pbHk9IkFyaWFsIiBmb250LXNpemU9IjE0IiBmaWxsPSIjMzQ0OTVlIj4xPC90ZXh0PgogIDx0ZXh0IHg9IjU1MCIgeT0iNDIwIiBmb250LWZhbWlseT0iQXJpYWwiIGZvbnQtc2l6ZT0iMTQiIGZpbGw9IiMzNDQ5NWUiPiQ0MDAuMDA8L3RleHQ+CiAgPHRleHQgeD0iNjgwIiB5PSI0MjAiIGZvbnQtZmFtaWx5PSJBcmlhbCIgZm9udC1zaXplPSIxNCIgZmlsbD0iIzM0NDk1ZSI+JDQwMC4wMDwvdGV4dD4KCiAgPHJlY3QgeD0iNDAiIHk9IjQzMCIgd2lkdGg9IjcyMCIgaGVpZ2h0PSIzMCIgZmlsbD0iI2Y3ZjlmYSIvPgogIDx0ZXh0IHg9IjUwIiB5PSI0NTAiIGZvbnQtZmFtaWx5PSJBcmlhbCIgZm9udC1zaXplPSIxNCIgZmlsbD0iIzM0NDk1ZSI+U2FmZXR5IEVxdWlwbWVudCBQYWNrYWdlPC90ZXh0PgogIDx0ZXh0IHg9IjQ1MCIgeT0iNDUwIiBmb250LWZhbWlseT0iQXJpYWwiIGZvbnQtc2l6ZT0iMTQiIGZpbGw9IiMzNDQ5NWUiPjE8L3RleHQ+CiAgPHRleHQgeD0iNTUwIiB5PSI0NTAiIGZvbnQtZmFtaWx5PSJBcmlhbCIgZm9udC1zaXplPSIxNCIgZmlsbD0iIzM0NDk1ZSI+JDE1MC4wMDwvdGV4dD4KICA8dGV4dCB4PSI2ODAiIHk9IjQ1MCIgZm9udC1mYW1pbHk9IkFyaWFsIiBmb250LXNpemU9IjE0IiBmaWxsPSIjMzQ0OTVlIj4kMTUwLjAwPC90ZXh0PgoKICA8IS0tIFRvdGFscyAtLT4KICA8bGluZSB4MT0iNDAiIHkxPSI0ODAiIHgyPSI3NjAiIHkyPSI0ODAiIHN0cm9rZT0iIzJjM2U1MCIgc3Ryb2tlLXdpZHRoPSIxIi8+CiAgPHRleHQgeD0iNTUwIiB5PSI1MTAiIGZvbnQtZmFtaWx5PSJBcmlhbCIgZm9udC1zaXplPSIxNCIgZm9udC13ZWlnaHQ9ImJvbGQiIGZpbGw9IiMzNDQ5NWUiPlN1YnRvdGFsOjwvdGV4dD4KICA8dGV4dCB4PSI2ODAiIHk9IjUxMCIgZm9udC1mYW1pbHk9IkFyaWFsIiBmb250LXNpemU9IjE0IiBmaWxsPSIjMzQ0OTVlIj4kODAwLjAwPC90ZXh0PgogIDx0ZXh0IHg9IjU1MCIgeT0iNTM1IiBmb250LWZhbWlseT0iQXJpYWwiIGZvbnQtc2l6ZT0iMTQiIGZvbnQtd2VpZ2h0PSJib2xkIiBmaWxsPSIjMzQ0OTVlIj5UYXggKDE4JSk6PC90ZXh0PgogIDx0ZXh0IHg9IjY4MCIgeT0iNTM1IiBmb250LWZhbWlseT0iQXJpYWwiIGZvbnQtc2l6ZT0iMTQiIGZpbGw9IiMzNDQ5NWUiPiQxNDQuMDA8L3RleHQ+CiAgPHRleHQgeD0iNTUwIiB5PSI1NzAiIGZvbnQtZmFtaWx5PSJBcmlhbCIgZm9udC1zaXplPSIxNiIgZm9udC13ZWlnaHQ9ImJvbGQiIGZpbGw9IiMyYzNlNTAiPlRvdGFsOjwvdGV4dD4KICA8dGV4dCB4PSI2ODAiIHk9IjU3MCIgZm9udC1mYW1pbHk9IkFyaWFsIiBmb250LXNpemU9IjE2IiBmb250LXdlaWdodD0iYm9sZCIgZmlsbD0iIzJjM2U1MCI+JDk0NC4wMDwvdGV4dD4KCiAgPCEtLSBQYXltZW50IFRlcm1zIC0tPgogIDx0ZXh0IHg9IjQwIiB5PSI2NDAiIGZvbnQtZmFtaWx5PSJBcmlhbCIgZm9udC1zaXplPSIxNiIgZm9udC13ZWlnaHQ9ImJvbGQiIGZpbGw9IiMyYzNlNTAiPlBheW1lbnQgVGVybXM8L3RleHQ+CiAgPHRleHQgeD0iNDAiIHk9IjY3MCIgZm9udC1mYW1pbHk9IkFyaWFsIiBmb250LXNpemU9IjE0IiBmaWxsPSIjMzQ0OTVlIj5QYXltZW50IGlzIGR1ZSB3aXRoaW4gMzAgZGF5czwvdGV4dD4KICA8dGV4dCB4PSI0MCIgeT0iNjkwIiBmb250LWZhbWlseT0iQXJpYWwiIGZvbnQtc2l6ZT0iMTQiIGZpbGw9IiMzNDQ5NWUiPlBsZWFzZSBpbmNsdWRlIGludm9pY2UgbnVtYmVyIG9uIHBheW1lbnQ8L3RleHQ+CgogIDwhLS0gQmFuayBEZXRhaWxzIC0tPgogIDx0ZXh0IHg9IjQwIiB5PSI3MzAiIGZvbnQtZmFtaWx5PSJBcmlhbCIgZm9udC1zaXplPSIxNiIgZm9udC13ZWlnaHQ9ImJvbGQiIGZpbGw9IiMyYzNlNTAiPkJhbmsgRGV0YWlsczwvdGV4dD4KICA8dGV4dCB4PSI0MCIgeT0iNzYwIiBmb250LWZhbWlseT0iQXJpYWwiIGZvbnQtc2l6ZT0iMTQiIGZpbGw9IiMzNDQ5NWUiPkJhbms6IEJhbmsgb2YgR2VvcmdpYTwvdGV4dD4KICA8dGV4dCB4PSI0MCIgeT0iNzgwIiBmb250LWZhbWlseT0iQXJpYWwiIGZvbnQtc2l6ZT0iMTQiIGZpbGw9IiMzNDQ5NWUiPklCQU46IEdFMTIzNDU2Nzg5MDEyMzQ1Njc4PC90ZXh0PgogIDx0ZXh0IHg9IjQwIiB5PSI4MDAiIGZvbnQtZmFtaWx5PSJBcmlhbCIgZm9udC1zaXplPSIxNCIgZmlsbD0iIzM0NDk1ZSI+U1dJRlQ6IEJBR0FHRTIyPC90ZXh0PgoKICA8IS0tIEZvb3RlciAtLT4KICA8bGluZSB4MT0iNDAiIHkxPSI5MDAiIHgyPSI3NjAiIHkyPSI5MDAiIHN0cm9rZT0iIzJjM2U1MCIgc3Ryb2tlLXdpZHRoPSIxIi8+CiAgPHRleHQgeD0iNDAiIHk9IjkzMCIgZm9udC1mYW1pbHk9IkFyaWFsIiBmb250LXNpemU9IjEyIiBmaWxsPSIjN2Y4YzhkIj5UaGFuayB5b3UgZm9yIGNob29zaW5nIEdydXp5YSBBZHZlbnR1cmUgT3V0Zml0dGVyczwvdGV4dD4KICA8dGV4dCB4PSI0MCIgeT0iOTUwIiBmb250LWZhbWlseT0iQXJpYWwiIGZvbnQtc2l6ZT0iMTIiIGZpbGw9IiM3ZjhjOGQiPnd3dy5ncnV6eWFhZHZlbnR1cmVzLmNvbTwvdGV4dD4KPC9zdmc+Cg==",
                        filename: "logo.jpg",
                        ftype: "jpg",
                        furl: "",
                    },
                    redirectAfterApprove: true,
                    redirectAfterApproveUrl: "https://example.com/success",
                },
            },
        });
        expect(response).toEqual({
            isSuccess: true,
            responseData: "2325-XXXXXXX-90b1-4598-b6c7-44cdcbf495d7-1234",
            responseText: "Success",
        });
    });

    test("AddPayLinkFromInvoice (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            contactUs: undefined,
            invoices: undefined,
            logo: undefined,
            messageBeforePaying: undefined,
            notes: undefined,
            page: undefined,
            paymentButton: undefined,
            paymentMethods: undefined,
            payor: undefined,
            review: undefined,
            settings: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/PaymentLink/1")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paymentLink.addPayLinkFromInvoice(1, {
                body: {
                    contactUs: undefined,
                    invoices: undefined,
                    logo: undefined,
                    messageBeforePaying: undefined,
                    notes: undefined,
                    page: undefined,
                    paymentButton: undefined,
                    paymentMethods: undefined,
                    payor: undefined,
                    review: undefined,
                    settings: undefined,
                },
            });
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("AddPayLinkFromInvoice (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            contactUs: undefined,
            invoices: undefined,
            logo: undefined,
            messageBeforePaying: undefined,
            notes: undefined,
            page: undefined,
            paymentButton: undefined,
            paymentMethods: undefined,
            payor: undefined,
            review: undefined,
            settings: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/PaymentLink/1")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paymentLink.addPayLinkFromInvoice(1, {
                body: {
                    contactUs: undefined,
                    invoices: undefined,
                    logo: undefined,
                    messageBeforePaying: undefined,
                    notes: undefined,
                    page: undefined,
                    paymentButton: undefined,
                    paymentMethods: undefined,
                    payor: undefined,
                    review: undefined,
                    settings: undefined,
                },
            });
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("AddPayLinkFromInvoice (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            contactUs: undefined,
            invoices: undefined,
            logo: undefined,
            messageBeforePaying: undefined,
            notes: undefined,
            page: undefined,
            paymentButton: undefined,
            paymentMethods: undefined,
            payor: undefined,
            review: undefined,
            settings: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/PaymentLink/1")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paymentLink.addPayLinkFromInvoice(1, {
                body: {
                    contactUs: undefined,
                    invoices: undefined,
                    logo: undefined,
                    messageBeforePaying: undefined,
                    notes: undefined,
                    page: undefined,
                    paymentButton: undefined,
                    paymentMethods: undefined,
                    payor: undefined,
                    review: undefined,
                    settings: undefined,
                },
            });
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("AddPayLinkFromInvoice (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            contactUs: undefined,
            invoices: undefined,
            logo: undefined,
            messageBeforePaying: undefined,
            notes: undefined,
            page: undefined,
            paymentButton: undefined,
            paymentMethods: undefined,
            payor: undefined,
            review: undefined,
            settings: undefined,
        };
        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: "responseText" };
        server
            .mockEndpoint()
            .post("/PaymentLink/1")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paymentLink.addPayLinkFromInvoice(1, {
                body: {
                    contactUs: undefined,
                    invoices: undefined,
                    logo: undefined,
                    messageBeforePaying: undefined,
                    notes: undefined,
                    page: undefined,
                    paymentButton: undefined,
                    paymentMethods: undefined,
                    payor: undefined,
                    review: undefined,
                    settings: undefined,
                },
            });
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: "responseText",
            }),
        );
    });

    test("AddPayLinkFromBill (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            contactUs: {
                emailLabel: "Email",
                enabled: true,
                header: "Contact Us",
                order: 0,
                paymentIcons: true,
                phoneLabel: "Phone",
            },
            logo: { enabled: true, order: 0 },
            messageBeforePaying: { enabled: true, label: "Please review your payment details", order: 0 },
            notes: {
                enabled: true,
                header: "Additional Notes",
                order: 0,
                placeholder: "Enter any additional notes here",
                value: "",
            },
            page: { description: "Get paid securely", enabled: true, header: "Payment Page", order: 0 },
            paymentButton: { enabled: true, label: "Pay Now", order: 0 },
            paymentMethods: {
                allMethodsChecked: true,
                enabled: true,
                header: "Payment Methods",
                methods: { amex: true, applePay: true, discover: true, eCheck: true, mastercard: true, visa: true },
                order: 0,
            },
            payor: {
                enabled: true,
                fields: [
                    {
                        display: true,
                        fixed: true,
                        identifier: true,
                        label: "Full Name",
                        name: "fullName",
                        order: 0,
                        required: true,
                        validation: "^[a-zA-Z ]+$",
                        value: "",
                        width: 0,
                    },
                ],
                header: "Payor Information",
                order: 0,
            },
            review: { enabled: true, header: "Review Payment", order: 0 },
            settings: { color: "#000000", language: "en" },
        };
        const rawResponseBody = {
            isSuccess: true,
            responseData: "2325-XXXXXXX-90b1-4598-b6c7-44cdcbf495d7-1234",
            responseText: "Success",
        };
        server
            .mockEndpoint()
            .post("/PaymentLink/bill/23548884")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.paymentLink.addPayLinkFromBill(23548884, {
            mail2: "jo@example.com; ceo@example.com",
            body: {
                contactUs: {
                    emailLabel: "Email",
                    enabled: true,
                    header: "Contact Us",
                    order: 0,
                    paymentIcons: true,
                    phoneLabel: "Phone",
                },
                logo: {
                    enabled: true,
                    order: 0,
                },
                messageBeforePaying: {
                    enabled: true,
                    label: "Please review your payment details",
                    order: 0,
                },
                notes: {
                    enabled: true,
                    header: "Additional Notes",
                    order: 0,
                    placeholder: "Enter any additional notes here",
                    value: "",
                },
                page: {
                    description: "Get paid securely",
                    enabled: true,
                    header: "Payment Page",
                    order: 0,
                },
                paymentButton: {
                    enabled: true,
                    label: "Pay Now",
                    order: 0,
                },
                paymentMethods: {
                    allMethodsChecked: true,
                    enabled: true,
                    header: "Payment Methods",
                    methods: {
                        amex: true,
                        applePay: true,
                        discover: true,
                        eCheck: true,
                        mastercard: true,
                        visa: true,
                    },
                    order: 0,
                },
                payor: {
                    enabled: true,
                    fields: [
                        {
                            display: true,
                            fixed: true,
                            identifier: true,
                            label: "Full Name",
                            name: "fullName",
                            order: 0,
                            required: true,
                            validation: "^[a-zA-Z ]+$",
                            value: "",
                            width: 0,
                        },
                    ],
                    header: "Payor Information",
                    order: 0,
                },
                review: {
                    enabled: true,
                    header: "Review Payment",
                    order: 0,
                },
                settings: {
                    color: "#000000",
                    language: "en",
                },
            },
        });
        expect(response).toEqual({
            isSuccess: true,
            responseData: "2325-XXXXXXX-90b1-4598-b6c7-44cdcbf495d7-1234",
            responseText: "Success",
        });
    });

    test("AddPayLinkFromBill (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            contactUs: undefined,
            invoices: undefined,
            logo: undefined,
            messageBeforePaying: undefined,
            notes: undefined,
            page: undefined,
            paymentButton: undefined,
            paymentMethods: undefined,
            payor: undefined,
            review: undefined,
            settings: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/PaymentLink/bill/1")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paymentLink.addPayLinkFromBill(1, {
                body: {
                    contactUs: undefined,
                    invoices: undefined,
                    logo: undefined,
                    messageBeforePaying: undefined,
                    notes: undefined,
                    page: undefined,
                    paymentButton: undefined,
                    paymentMethods: undefined,
                    payor: undefined,
                    review: undefined,
                    settings: undefined,
                },
            });
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("AddPayLinkFromBill (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            contactUs: undefined,
            invoices: undefined,
            logo: undefined,
            messageBeforePaying: undefined,
            notes: undefined,
            page: undefined,
            paymentButton: undefined,
            paymentMethods: undefined,
            payor: undefined,
            review: undefined,
            settings: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/PaymentLink/bill/1")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paymentLink.addPayLinkFromBill(1, {
                body: {
                    contactUs: undefined,
                    invoices: undefined,
                    logo: undefined,
                    messageBeforePaying: undefined,
                    notes: undefined,
                    page: undefined,
                    paymentButton: undefined,
                    paymentMethods: undefined,
                    payor: undefined,
                    review: undefined,
                    settings: undefined,
                },
            });
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("AddPayLinkFromBill (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            contactUs: undefined,
            invoices: undefined,
            logo: undefined,
            messageBeforePaying: undefined,
            notes: undefined,
            page: undefined,
            paymentButton: undefined,
            paymentMethods: undefined,
            payor: undefined,
            review: undefined,
            settings: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/PaymentLink/bill/1")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paymentLink.addPayLinkFromBill(1, {
                body: {
                    contactUs: undefined,
                    invoices: undefined,
                    logo: undefined,
                    messageBeforePaying: undefined,
                    notes: undefined,
                    page: undefined,
                    paymentButton: undefined,
                    paymentMethods: undefined,
                    payor: undefined,
                    review: undefined,
                    settings: undefined,
                },
            });
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("AddPayLinkFromBill (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            contactUs: undefined,
            invoices: undefined,
            logo: undefined,
            messageBeforePaying: undefined,
            notes: undefined,
            page: undefined,
            paymentButton: undefined,
            paymentMethods: undefined,
            payor: undefined,
            review: undefined,
            settings: undefined,
        };
        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: "responseText" };
        server
            .mockEndpoint()
            .post("/PaymentLink/bill/1")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paymentLink.addPayLinkFromBill(1, {
                body: {
                    contactUs: undefined,
                    invoices: undefined,
                    logo: undefined,
                    messageBeforePaying: undefined,
                    notes: undefined,
                    page: undefined,
                    paymentButton: undefined,
                    paymentMethods: undefined,
                    payor: undefined,
                    review: undefined,
                    settings: undefined,
                },
            });
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: "responseText",
            }),
        );
    });

    test("deletePayLinkFromId (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            isSuccess: true,
            responseData: "2325-XXXXXXX-90b1-4598-b6c7-44cdcbf495d7-1234",
            responseText: "Success",
        };
        server
            .mockEndpoint()
            .delete("/PaymentLink/payLinkId")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.paymentLink.deletePayLinkFromId("payLinkId");
        expect(response).toEqual({
            isSuccess: true,
            responseData: "2325-XXXXXXX-90b1-4598-b6c7-44cdcbf495d7-1234",
            responseText: "Success",
        });
    });

    test("deletePayLinkFromId (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/PaymentLink/payLinkId")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paymentLink.deletePayLinkFromId("payLinkId");
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("deletePayLinkFromId (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/PaymentLink/payLinkId")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paymentLink.deletePayLinkFromId("payLinkId");
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("deletePayLinkFromId (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/PaymentLink/payLinkId")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paymentLink.deletePayLinkFromId("payLinkId");
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("deletePayLinkFromId (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: "responseText" };
        server
            .mockEndpoint()
            .delete("/PaymentLink/payLinkId")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paymentLink.deletePayLinkFromId("payLinkId");
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: "responseText",
            }),
        );
    });

    test("getPayLinkFromId (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            isSuccess: true,
            responseData: {
                AdditionalData: { key1: { key: "value" }, key2: { key: "value" }, key3: { key: "value" } },
                credentials: [{}],
                lastAccess: "2022-06-30T15:01:00Z",
                pageContent: {
                    amount: { enabled: true },
                    autopay: { enabled: true },
                    contactUs: { enabled: true },
                    entry: "entry",
                    invoices: { enabled: true },
                    logo: { enabled: true },
                    messageBeforePaying: { enabled: true },
                    name: "name",
                    notes: { enabled: true },
                    page: { enabled: true },
                    paymentButton: { enabled: true },
                    paymentMethods: { enabled: true },
                    payor: { enabled: true },
                    review: { enabled: true },
                    subdomain: "mypage-1",
                },
                pageIdentifier: "null",
                pageSettings: {
                    color: "color",
                    customCssUrl: "customCssUrl",
                    language: "language",
                    redirectAfterApprove: true,
                    redirectAfterApproveUrl: "redirectAfterApproveUrl",
                },
                published: 1,
                receiptContent: {
                    amount: { enabled: true },
                    contactUs: { enabled: true },
                    details: { enabled: true },
                    logo: { enabled: true },
                    messageBeforeButton: { enabled: true },
                    page: { enabled: true },
                    paymentButton: { enabled: true },
                    paymentInformation: { enabled: true },
                    settings: { enabled: true },
                },
                subdomain: "mypage-1",
                totalAmount: 1.1,
                validationCode: "validationCode",
            },
            responseText: "Success",
        };
        server
            .mockEndpoint()
            .get("/PaymentLink/load/paylinkId")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.paymentLink.getPayLinkFromId("paylinkId");
        expect(response).toEqual({
            isSuccess: true,
            responseData: {
                AdditionalData: {
                    key1: {
                        key: "value",
                    },
                    key2: {
                        key: "value",
                    },
                    key3: {
                        key: "value",
                    },
                },
                credentials: [{}],
                lastAccess: "2022-06-30T15:01:00Z",
                pageContent: {
                    amount: {
                        enabled: true,
                    },
                    autopay: {
                        enabled: true,
                    },
                    contactUs: {
                        enabled: true,
                    },
                    entry: "entry",
                    invoices: {
                        enabled: true,
                    },
                    logo: {
                        enabled: true,
                    },
                    messageBeforePaying: {
                        enabled: true,
                    },
                    name: "name",
                    notes: {
                        enabled: true,
                    },
                    page: {
                        enabled: true,
                    },
                    paymentButton: {
                        enabled: true,
                    },
                    paymentMethods: {
                        enabled: true,
                    },
                    payor: {
                        enabled: true,
                    },
                    review: {
                        enabled: true,
                    },
                    subdomain: "mypage-1",
                },
                pageIdentifier: "null",
                pageSettings: {
                    color: "color",
                    customCssUrl: "customCssUrl",
                    language: "language",
                    redirectAfterApprove: true,
                    redirectAfterApproveUrl: "redirectAfterApproveUrl",
                },
                published: 1,
                receiptContent: {
                    amount: {
                        enabled: true,
                    },
                    contactUs: {
                        enabled: true,
                    },
                    details: {
                        enabled: true,
                    },
                    logo: {
                        enabled: true,
                    },
                    messageBeforeButton: {
                        enabled: true,
                    },
                    page: {
                        enabled: true,
                    },
                    paymentButton: {
                        enabled: true,
                    },
                    paymentInformation: {
                        enabled: true,
                    },
                    settings: {
                        enabled: true,
                    },
                },
                subdomain: "mypage-1",
                totalAmount: 1.1,
                validationCode: "validationCode",
            },
            responseText: "Success",
        });
    });

    test("getPayLinkFromId (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/PaymentLink/load/paylinkId")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paymentLink.getPayLinkFromId("paylinkId");
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("getPayLinkFromId (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/PaymentLink/load/paylinkId")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paymentLink.getPayLinkFromId("paylinkId");
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("getPayLinkFromId (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/PaymentLink/load/paylinkId")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paymentLink.getPayLinkFromId("paylinkId");
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("getPayLinkFromId (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: "responseText" };
        server
            .mockEndpoint()
            .get("/PaymentLink/load/paylinkId")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paymentLink.getPayLinkFromId("paylinkId");
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: "responseText",
            }),
        );
    });

    test("pushPayLinkFromId (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { channel: "sms" };
        const rawResponseBody = {
            isSuccess: true,
            responseData: "2325-XXXXXXX-90b1-4598-b6c7-44cdcbf495d7-1234",
            responseText: "Success",
        };
        server
            .mockEndpoint()
            .post("/PaymentLink/push/payLinkId")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.paymentLink.pushPayLinkFromId("payLinkId", {
            channel: "sms",
        });
        expect(response).toEqual({
            isSuccess: true,
            responseData: "2325-XXXXXXX-90b1-4598-b6c7-44cdcbf495d7-1234",
            responseText: "Success",
        });
    });

    test("pushPayLinkFromId (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            channel: "email",
            additionalEmails: ["admin@example.com", "accounting@example.com"],
            attachFile: true,
        };
        const rawResponseBody = {
            isSuccess: true,
            responseData: "2325-XXXXXXX-90b1-4598-b6c7-44cdcbf495d7-1234",
            responseText: "Success",
        };
        server
            .mockEndpoint()
            .post("/PaymentLink/push/payLinkId")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.paymentLink.pushPayLinkFromId("payLinkId", {
            channel: "email",
            additionalEmails: ["admin@example.com", "accounting@example.com"],
            attachFile: true,
        });
        expect(response).toEqual({
            isSuccess: true,
            responseData: "2325-XXXXXXX-90b1-4598-b6c7-44cdcbf495d7-1234",
            responseText: "Success",
        });
    });

    test("pushPayLinkFromId (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { channel: "email", additionalEmails: undefined, attachFile: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/PaymentLink/push/payLinkId")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paymentLink.pushPayLinkFromId("payLinkId", {
                channel: "email",
                additionalEmails: undefined,
                attachFile: undefined,
            });
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("pushPayLinkFromId (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { channel: "email", additionalEmails: undefined, attachFile: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/PaymentLink/push/payLinkId")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paymentLink.pushPayLinkFromId("payLinkId", {
                channel: "email",
                additionalEmails: undefined,
                attachFile: undefined,
            });
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("pushPayLinkFromId (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { channel: "email", additionalEmails: undefined, attachFile: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/PaymentLink/push/payLinkId")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paymentLink.pushPayLinkFromId("payLinkId", {
                channel: "email",
                additionalEmails: undefined,
                attachFile: undefined,
            });
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("pushPayLinkFromId (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { channel: "email", additionalEmails: undefined, attachFile: undefined };
        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: "responseText" };
        server
            .mockEndpoint()
            .post("/PaymentLink/push/payLinkId")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paymentLink.pushPayLinkFromId("payLinkId", {
                channel: "email",
                additionalEmails: undefined,
                attachFile: undefined,
            });
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: "responseText",
            }),
        );
    });

    test("refreshPayLinkFromId (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            isSuccess: true,
            responseData: "2325-XXXXXXX-90b1-4598-b6c7-44cdcbf495d7-1234",
            responseText: "Success",
        };
        server
            .mockEndpoint()
            .get("/PaymentLink/refresh/payLinkId")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.paymentLink.refreshPayLinkFromId("payLinkId");
        expect(response).toEqual({
            isSuccess: true,
            responseData: "2325-XXXXXXX-90b1-4598-b6c7-44cdcbf495d7-1234",
            responseText: "Success",
        });
    });

    test("refreshPayLinkFromId (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/PaymentLink/refresh/payLinkId")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paymentLink.refreshPayLinkFromId("payLinkId");
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("refreshPayLinkFromId (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/PaymentLink/refresh/payLinkId")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paymentLink.refreshPayLinkFromId("payLinkId");
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("refreshPayLinkFromId (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/PaymentLink/refresh/payLinkId")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paymentLink.refreshPayLinkFromId("payLinkId");
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("refreshPayLinkFromId (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: "responseText" };
        server
            .mockEndpoint()
            .get("/PaymentLink/refresh/payLinkId")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paymentLink.refreshPayLinkFromId("payLinkId");
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: "responseText",
            }),
        );
    });

    test("sendPayLinkFromId (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            isSuccess: true,
            responseData: "2325-XXXXXXX-90b1-4598-b6c7-44cdcbf495d7-1234",
            responseText: "Success",
        };
        server
            .mockEndpoint()
            .get("/PaymentLink/send/payLinkId")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.paymentLink.sendPayLinkFromId("payLinkId", {
            mail2: "jo@example.com; ceo@example.com",
        });
        expect(response).toEqual({
            isSuccess: true,
            responseData: "2325-XXXXXXX-90b1-4598-b6c7-44cdcbf495d7-1234",
            responseText: "Success",
        });
    });

    test("sendPayLinkFromId (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/PaymentLink/send/payLinkId")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paymentLink.sendPayLinkFromId("payLinkId");
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("sendPayLinkFromId (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/PaymentLink/send/payLinkId")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paymentLink.sendPayLinkFromId("payLinkId");
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("sendPayLinkFromId (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/PaymentLink/send/payLinkId")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paymentLink.sendPayLinkFromId("payLinkId");
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("sendPayLinkFromId (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: "responseText" };
        server
            .mockEndpoint()
            .get("/PaymentLink/send/payLinkId")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paymentLink.sendPayLinkFromId("payLinkId");
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: "responseText",
            }),
        );
    });

    test("updatePayLinkFromId (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            notes: {
                enabled: true,
                header: "Additional Notes",
                order: 0,
                placeholder: "Enter any additional notes here",
                value: "",
            },
            paymentButton: { enabled: true, label: "Pay Now", order: 0 },
        };
        const rawResponseBody = { isSuccess: true, responseData: "332-c277b704-1301", responseText: "Success" };
        server
            .mockEndpoint()
            .put("/PaymentLink/update/332-c277b704-1301")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.paymentLink.updatePayLinkFromId("332-c277b704-1301", {
            notes: {
                enabled: true,
                header: "Additional Notes",
                order: 0,
                placeholder: "Enter any additional notes here",
                value: "",
            },
            paymentButton: {
                enabled: true,
                label: "Pay Now",
                order: 0,
            },
        });
        expect(response).toEqual({
            isSuccess: true,
            responseData: "332-c277b704-1301",
            responseText: "Success",
        });
    });

    test("updatePayLinkFromId (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            contactUs: undefined,
            logo: undefined,
            messageBeforePaying: undefined,
            notes: undefined,
            page: undefined,
            paymentButton: undefined,
            paymentMethods: undefined,
            review: undefined,
            settings: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/PaymentLink/update/payLinkId")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paymentLink.updatePayLinkFromId("payLinkId", {
                contactUs: undefined,
                logo: undefined,
                messageBeforePaying: undefined,
                notes: undefined,
                page: undefined,
                paymentButton: undefined,
                paymentMethods: undefined,
                review: undefined,
                settings: undefined,
            });
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("updatePayLinkFromId (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            contactUs: undefined,
            logo: undefined,
            messageBeforePaying: undefined,
            notes: undefined,
            page: undefined,
            paymentButton: undefined,
            paymentMethods: undefined,
            review: undefined,
            settings: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/PaymentLink/update/payLinkId")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paymentLink.updatePayLinkFromId("payLinkId", {
                contactUs: undefined,
                logo: undefined,
                messageBeforePaying: undefined,
                notes: undefined,
                page: undefined,
                paymentButton: undefined,
                paymentMethods: undefined,
                review: undefined,
                settings: undefined,
            });
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("updatePayLinkFromId (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            contactUs: undefined,
            logo: undefined,
            messageBeforePaying: undefined,
            notes: undefined,
            page: undefined,
            paymentButton: undefined,
            paymentMethods: undefined,
            review: undefined,
            settings: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/PaymentLink/update/payLinkId")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paymentLink.updatePayLinkFromId("payLinkId", {
                contactUs: undefined,
                logo: undefined,
                messageBeforePaying: undefined,
                notes: undefined,
                page: undefined,
                paymentButton: undefined,
                paymentMethods: undefined,
                review: undefined,
                settings: undefined,
            });
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("updatePayLinkFromId (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            contactUs: undefined,
            logo: undefined,
            messageBeforePaying: undefined,
            notes: undefined,
            page: undefined,
            paymentButton: undefined,
            paymentMethods: undefined,
            review: undefined,
            settings: undefined,
        };
        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: "responseText" };
        server
            .mockEndpoint()
            .put("/PaymentLink/update/payLinkId")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paymentLink.updatePayLinkFromId("payLinkId", {
                contactUs: undefined,
                logo: undefined,
                messageBeforePaying: undefined,
                notes: undefined,
                page: undefined,
                paymentButton: undefined,
                paymentMethods: undefined,
                review: undefined,
                settings: undefined,
            });
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: "responseText",
            }),
        );
    });

    test("AddPayLinkFromBillLotNumber (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            contactUs: {
                emailLabel: "Email",
                enabled: true,
                header: "Contact Us",
                order: 0,
                paymentIcons: true,
                phoneLabel: "Phone",
            },
            logo: { enabled: true, order: 0 },
            messageBeforePaying: { enabled: true, label: "Please review your payment details", order: 0 },
            notes: {
                enabled: true,
                header: "Additional Notes",
                order: 0,
                placeholder: "Enter any additional notes here",
                value: "",
            },
            page: { description: "Get paid securely", enabled: true, header: "Payment Page", order: 0 },
            paymentButton: { enabled: true, label: "Pay Now", order: 0 },
            paymentMethods: {
                allMethodsChecked: true,
                enabled: true,
                header: "Payment Methods",
                methods: { amex: true, applePay: true, discover: true, eCheck: true, mastercard: true, visa: true },
                order: 0,
            },
            payor: {
                enabled: true,
                fields: [
                    {
                        display: true,
                        fixed: true,
                        identifier: true,
                        label: "Full Name",
                        name: "fullName",
                        order: 0,
                        required: true,
                        validation: "^[a-zA-Z ]+$",
                        value: "",
                        width: 0,
                    },
                ],
                header: "Payor Information",
                order: 0,
            },
            review: { enabled: true, header: "Review Payment", order: 0 },
            settings: { color: "#000000", language: "en" },
        };
        const rawResponseBody = {
            isSuccess: true,
            responseData: "2325-XXXXXXX-90b1-4598-b6c7-44cdcbf495d7-1234",
            responseText: "Success",
        };
        server
            .mockEndpoint()
            .post("/PaymentLink/bill/lotNumber/LOT-2024-001")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.paymentLink.addPayLinkFromBillLotNumber("LOT-2024-001", {
            entryPoint: "billing",
            vendorNumber: "VENDOR-123",
            mail2: "customer@example.com; billing@example.com",
            amountFixed: "true",
            body: {
                contactUs: {
                    emailLabel: "Email",
                    enabled: true,
                    header: "Contact Us",
                    order: 0,
                    paymentIcons: true,
                    phoneLabel: "Phone",
                },
                logo: {
                    enabled: true,
                    order: 0,
                },
                messageBeforePaying: {
                    enabled: true,
                    label: "Please review your payment details",
                    order: 0,
                },
                notes: {
                    enabled: true,
                    header: "Additional Notes",
                    order: 0,
                    placeholder: "Enter any additional notes here",
                    value: "",
                },
                page: {
                    description: "Get paid securely",
                    enabled: true,
                    header: "Payment Page",
                    order: 0,
                },
                paymentButton: {
                    enabled: true,
                    label: "Pay Now",
                    order: 0,
                },
                paymentMethods: {
                    allMethodsChecked: true,
                    enabled: true,
                    header: "Payment Methods",
                    methods: {
                        amex: true,
                        applePay: true,
                        discover: true,
                        eCheck: true,
                        mastercard: true,
                        visa: true,
                    },
                    order: 0,
                },
                payor: {
                    enabled: true,
                    fields: [
                        {
                            display: true,
                            fixed: true,
                            identifier: true,
                            label: "Full Name",
                            name: "fullName",
                            order: 0,
                            required: true,
                            validation: "^[a-zA-Z ]+$",
                            value: "",
                            width: 0,
                        },
                    ],
                    header: "Payor Information",
                    order: 0,
                },
                review: {
                    enabled: true,
                    header: "Review Payment",
                    order: 0,
                },
                settings: {
                    color: "#000000",
                    language: "en",
                },
            },
        });
        expect(response).toEqual({
            isSuccess: true,
            responseData: "2325-XXXXXXX-90b1-4598-b6c7-44cdcbf495d7-1234",
            responseText: "Success",
        });
    });

    test("AddPayLinkFromBillLotNumber (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            contactUs: undefined,
            invoices: undefined,
            logo: undefined,
            messageBeforePaying: undefined,
            notes: undefined,
            page: undefined,
            paymentButton: undefined,
            paymentMethods: undefined,
            payor: undefined,
            review: undefined,
            settings: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/PaymentLink/bill/lotNumber/lotNumber")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paymentLink.addPayLinkFromBillLotNumber("lotNumber", {
                entryPoint: "entryPoint",
                vendorNumber: "vendorNumber",
                body: {
                    contactUs: undefined,
                    invoices: undefined,
                    logo: undefined,
                    messageBeforePaying: undefined,
                    notes: undefined,
                    page: undefined,
                    paymentButton: undefined,
                    paymentMethods: undefined,
                    payor: undefined,
                    review: undefined,
                    settings: undefined,
                },
            });
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("AddPayLinkFromBillLotNumber (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            contactUs: undefined,
            invoices: undefined,
            logo: undefined,
            messageBeforePaying: undefined,
            notes: undefined,
            page: undefined,
            paymentButton: undefined,
            paymentMethods: undefined,
            payor: undefined,
            review: undefined,
            settings: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/PaymentLink/bill/lotNumber/lotNumber")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paymentLink.addPayLinkFromBillLotNumber("lotNumber", {
                entryPoint: "entryPoint",
                vendorNumber: "vendorNumber",
                body: {
                    contactUs: undefined,
                    invoices: undefined,
                    logo: undefined,
                    messageBeforePaying: undefined,
                    notes: undefined,
                    page: undefined,
                    paymentButton: undefined,
                    paymentMethods: undefined,
                    payor: undefined,
                    review: undefined,
                    settings: undefined,
                },
            });
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("AddPayLinkFromBillLotNumber (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            contactUs: undefined,
            invoices: undefined,
            logo: undefined,
            messageBeforePaying: undefined,
            notes: undefined,
            page: undefined,
            paymentButton: undefined,
            paymentMethods: undefined,
            payor: undefined,
            review: undefined,
            settings: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/PaymentLink/bill/lotNumber/lotNumber")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paymentLink.addPayLinkFromBillLotNumber("lotNumber", {
                entryPoint: "entryPoint",
                vendorNumber: "vendorNumber",
                body: {
                    contactUs: undefined,
                    invoices: undefined,
                    logo: undefined,
                    messageBeforePaying: undefined,
                    notes: undefined,
                    page: undefined,
                    paymentButton: undefined,
                    paymentMethods: undefined,
                    payor: undefined,
                    review: undefined,
                    settings: undefined,
                },
            });
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("AddPayLinkFromBillLotNumber (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            contactUs: undefined,
            invoices: undefined,
            logo: undefined,
            messageBeforePaying: undefined,
            notes: undefined,
            page: undefined,
            paymentButton: undefined,
            paymentMethods: undefined,
            payor: undefined,
            review: undefined,
            settings: undefined,
        };
        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: "responseText" };
        server
            .mockEndpoint()
            .post("/PaymentLink/bill/lotNumber/lotNumber")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.paymentLink.addPayLinkFromBillLotNumber("lotNumber", {
                entryPoint: "entryPoint",
                vendorNumber: "vendorNumber",
                body: {
                    contactUs: undefined,
                    invoices: undefined,
                    logo: undefined,
                    messageBeforePaying: undefined,
                    notes: undefined,
                    page: undefined,
                    paymentButton: undefined,
                    paymentMethods: undefined,
                    payor: undefined,
                    review: undefined,
                    settings: undefined,
                },
            });
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: "responseText",
            }),
        );
    });
});
