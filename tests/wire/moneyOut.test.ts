/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { PayabliClient } from "../../src/Client";
import * as Payabli from "../../src/api/index";

describe("MoneyOut", () => {
    test("AuthorizeOut (AuthorizePayout)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            entryPoint: "48acde49",
            invoiceData: [{ billId: 54323 }],
            orderDescription: "Window Painting",
            paymentDetails: { totalAmount: 47 },
            paymentMethod: { method: "managed" },
            vendorData: { vendorNumber: "7895433" },
        };
        const rawResponseBody = {
            responseCode: 1,
            pageIdentifier: null,
            roomId: 0,
            isSuccess: true,
            responseText: "Success",
            responseData: {
                authCode: null,
                referenceId: "129-219",
                resultCode: 1,
                resultText: "Authorized",
                avsResponseText: null,
                cvvResponseText: null,
                customerId: 0,
                methodReferenceId: null,
            },
        };
        server
            .mockEndpoint()
            .post("/MoneyOut/authorize")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.moneyOut.authorizeOut({
            body: {
                entryPoint: "48acde49",
                invoiceData: [
                    {
                        billId: 54323,
                    },
                ],
                orderDescription: "Window Painting",
                paymentDetails: {
                    totalAmount: 47,
                },
                paymentMethod: {
                    method: "managed",
                },
                vendorData: {
                    vendorNumber: "7895433",
                },
            },
        });
        expect(response).toEqual({
            responseCode: 1,
            pageIdentifier: null,
            roomId: 0,
            isSuccess: true,
            responseText: "Success",
            responseData: {
                authCode: null,
                referenceId: "129-219",
                resultCode: 1,
                resultText: "Authorized",
                avsResponseText: null,
                cvvResponseText: null,
                customerId: 0,
                methodReferenceId: null,
            },
        });
    });

    test("AuthorizeOut (WithImage)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            entryPoint: "48acde49",
            invoiceData: [
                {
                    billId: 123,
                    attachments: [{ filename: "bill.pdf", ftype: "pdf", furl: "https://example.com/bill.pdf" }],
                },
            ],
            orderDescription: "Window Painting",
            paymentDetails: { totalAmount: 47 },
            paymentMethod: { method: "managed" },
            vendorData: { vendorNumber: "7895433" },
        };
        const rawResponseBody = {
            responseCode: 1,
            pageIdentifier: null,
            roomId: 0,
            isSuccess: true,
            responseText: "Success",
            responseData: {
                authCode: null,
                referenceId: "129-219",
                resultCode: 1,
                resultText: "Authorized",
                avsResponseText: null,
                cvvResponseText: null,
                customerId: 0,
                methodReferenceId: null,
            },
        };
        server
            .mockEndpoint()
            .post("/MoneyOut/authorize")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.moneyOut.authorizeOut({
            body: {
                entryPoint: "48acde49",
                invoiceData: [
                    {
                        billId: 123,
                        attachments: [
                            {
                                filename: "bill.pdf",
                                ftype: "pdf",
                                furl: "https://example.com/bill.pdf",
                            },
                        ],
                    },
                ],
                orderDescription: "Window Painting",
                paymentDetails: {
                    totalAmount: 47,
                },
                paymentMethod: {
                    method: "managed",
                },
                vendorData: {
                    vendorNumber: "7895433",
                },
            },
        });
        expect(response).toEqual({
            responseCode: 1,
            pageIdentifier: null,
            roomId: 0,
            isSuccess: true,
            responseText: "Success",
            responseData: {
                authCode: null,
                referenceId: "129-219",
                resultCode: 1,
                resultText: "Authorized",
                avsResponseText: null,
                cvvResponseText: null,
                customerId: 0,
                methodReferenceId: null,
            },
        });
    });

    test("AuthorizeOut (StoredACH)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            entryPoint: "48acde49",
            source: "api",
            invoiceData: [{ billId: 54323 }],
            orderDescription: "Window Painting",
            paymentMethod: { method: "ach", storedMethodId: "4c6a4b78-72de-4bdd-9455-b9d30f991001-XXXX" },
            paymentDetails: { totalAmount: 47 },
            vendorData: { vendorNumber: "7895433" },
        };
        const rawResponseBody = {
            responseCode: 1,
            pageIdentifier: null,
            roomId: 0,
            isSuccess: true,
            responseText: "Success",
            responseData: {
                authCode: null,
                referenceId: "129-219",
                resultCode: 1,
                resultText: "Authorized",
                avsResponseText: null,
                cvvResponseText: null,
                customerId: 0,
                methodReferenceId: null,
            },
        };
        server
            .mockEndpoint()
            .post("/MoneyOut/authorize")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.moneyOut.authorizeOut({
            body: {
                entryPoint: "48acde49",
                source: "api",
                invoiceData: [
                    {
                        billId: 54323,
                    },
                ],
                orderDescription: "Window Painting",
                paymentMethod: {
                    method: "ach",
                    storedMethodId: "4c6a4b78-72de-4bdd-9455-b9d30f991001-XXXX",
                },
                paymentDetails: {
                    totalAmount: 47,
                },
                vendorData: {
                    vendorNumber: "7895433",
                },
            },
        });
        expect(response).toEqual({
            responseCode: 1,
            pageIdentifier: null,
            roomId: 0,
            isSuccess: true,
            responseText: "Success",
            responseData: {
                authCode: null,
                referenceId: "129-219",
                resultCode: 1,
                resultText: "Authorized",
                avsResponseText: null,
                cvvResponseText: null,
                customerId: 0,
                methodReferenceId: null,
            },
        });
    });

    test("AuthorizeOut (AddVendor)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            entryPoint: "47ced57b",
            paymentMethod: {
                method: "ach",
                achHolder: "John Doe",
                achRouting: "011401533",
                achAccount: "123456789",
                achAccountType: "checking",
                achHolderType: "business",
            },
            paymentDetails: { totalAmount: 978.32 },
            vendorData: {
                vendorNumber: "Vendor3800638299609471",
                name1: "Heritage Pro Company",
                name2: "",
                ein: "473771889",
                phone: "7868342364",
                email: "contact570@heritagepro.com",
                address1: "478 Mittie Roads",
                city: "Jakubowskifield",
                state: "WI",
                zip: "45993",
                country: "US",
                mcc: "0763",
                locationCode: "tpa",
                contacts: [
                    {
                        contactName: "Dax",
                        contactEmail: "Mandy65@heritagepro.com",
                        contactPhone: "996-325-5420 x31028",
                    },
                ],
                vendorStatus: 1,
                remitAddress1: "727 Terrell Streets",
                remitAddress2: "Apt. 773",
                remitCity: "South Nicholeside",
                remitState: "ID",
                remitZip: "72951-9790",
                remitCountry: "US",
            },
            invoiceData: [
                {
                    invoiceNumber: "VI3BvwTG",
                    netAmount: "1",
                    invoiceDate: "2026-09-03",
                    dueDate: "2026-11-04",
                    comments: "Building Repairs - Community event setup (System updates)",
                },
            ],
        };
        const rawResponseBody = {
            responseCode: 1,
            pageIdentifier: null,
            roomId: 0,
            isSuccess: true,
            responseText: "Success",
            responseData: {
                authCode: null,
                referenceId: "129-220",
                resultCode: 1,
                resultText: "Authorized",
                avsResponseText: null,
                cvvResponseText: null,
                customerId: 12345,
                methodReferenceId: "12dea40cba9130s93s-12345",
            },
        };
        server
            .mockEndpoint()
            .post("/MoneyOut/authorize")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.moneyOut.authorizeOut({
            body: {
                entryPoint: "47ced57b",
                paymentMethod: {
                    method: "ach",
                    achHolder: "John Doe",
                    achRouting: "011401533",
                    achAccount: "123456789",
                    achAccountType: "checking",
                    achHolderType: "business",
                },
                paymentDetails: {
                    totalAmount: 978.32,
                },
                vendorData: {
                    vendorNumber: "Vendor3800638299609471",
                    name1: "Heritage Pro Company",
                    name2: "",
                    ein: "473771889",
                    phone: "7868342364",
                    email: "contact570@heritagepro.com",
                    address1: "478 Mittie Roads",
                    city: "Jakubowskifield",
                    state: "WI",
                    zip: "45993",
                    country: "US",
                    mcc: "0763",
                    locationCode: "tpa",
                    contacts: [
                        {
                            contactName: "Dax",
                            contactEmail: "Mandy65@heritagepro.com",
                            contactPhone: "996-325-5420 x31028",
                        },
                    ],
                    vendorStatus: 1,
                    remitAddress1: "727 Terrell Streets",
                    remitAddress2: "Apt. 773",
                    remitCity: "South Nicholeside",
                    remitState: "ID",
                    remitZip: "72951-9790",
                    remitCountry: "US",
                },
                invoiceData: [
                    {
                        invoiceNumber: "VI3BvwTG",
                        netAmount: "1",
                        invoiceDate: "2026-09-03",
                        dueDate: "2026-11-04",
                        comments: "Building Repairs - Community event setup (System updates)",
                    },
                ],
            },
        });
        expect(response).toEqual({
            responseCode: 1,
            pageIdentifier: null,
            roomId: 0,
            isSuccess: true,
            responseText: "Success",
            responseData: {
                authCode: null,
                referenceId: "129-220",
                resultCode: 1,
                resultText: "Authorized",
                avsResponseText: null,
                cvvResponseText: null,
                customerId: 12345,
                methodReferenceId: "12dea40cba9130s93s-12345",
            },
        });
    });

    test("AuthorizeOut (c491a23d)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            entryPoint: "entryPoint",
            source: undefined,
            orderId: undefined,
            orderDescription: undefined,
            paymentMethod: {
                method: "method",
                achHolder: undefined,
                achRouting: undefined,
                achAccount: undefined,
                achAccountType: undefined,
                achCode: undefined,
                achHolderType: undefined,
                storedMethodId: undefined,
                initiator: undefined,
                storedMethodUsageType: undefined,
            },
            paymentDetails: {
                checkNumber: undefined,
                currency: undefined,
                serviceFee: undefined,
                totalAmount: undefined,
            },
            vendorData: {
                vendorNumber: undefined,
                name1: undefined,
                name2: undefined,
                ein: undefined,
                phone: undefined,
                email: undefined,
                address1: undefined,
                city: undefined,
                state: undefined,
                zip: undefined,
                country: undefined,
                mcc: undefined,
                contacts: undefined,
                billingData: undefined,
                vendorStatus: undefined,
                remitAddress1: undefined,
                remitAddress2: undefined,
                remitCity: undefined,
                remitState: undefined,
                remitZip: undefined,
                remitCountry: undefined,
                customerVendorAccount: undefined,
                customField1: undefined,
                customField2: undefined,
                additionalData: undefined,
                address2: undefined,
                internalReferenceId: undefined,
                locationCode: undefined,
                payeeName1: undefined,
                payeeName2: undefined,
                paymentMethod: undefined,
                vendorId: undefined,
            },
            invoiceData: [
                {
                    invoiceNumber: undefined,
                    netAmount: undefined,
                    invoiceDate: undefined,
                    dueDate: undefined,
                    comments: undefined,
                    lotNumber: undefined,
                    billId: undefined,
                    discount: undefined,
                    terms: undefined,
                    accountingField1: undefined,
                    accountingField2: undefined,
                    additionalData: undefined,
                    attachments: undefined,
                },
                {
                    invoiceNumber: undefined,
                    netAmount: undefined,
                    invoiceDate: undefined,
                    dueDate: undefined,
                    comments: undefined,
                    lotNumber: undefined,
                    billId: undefined,
                    discount: undefined,
                    terms: undefined,
                    accountingField1: undefined,
                    accountingField2: undefined,
                    additionalData: undefined,
                    attachments: undefined,
                },
            ],
            accountId: undefined,
            subdomain: undefined,
            subscriptionId: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/MoneyOut/authorize")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.moneyOut.authorizeOut({
                body: {
                    entryPoint: "entryPoint",
                    source: undefined,
                    orderId: undefined,
                    orderDescription: undefined,
                    paymentMethod: {
                        method: "method",
                        achHolder: undefined,
                        achRouting: undefined,
                        achAccount: undefined,
                        achAccountType: undefined,
                        achCode: undefined,
                        achHolderType: undefined,
                        storedMethodId: undefined,
                        initiator: undefined,
                        storedMethodUsageType: undefined,
                    },
                    paymentDetails: {
                        checkNumber: undefined,
                        currency: undefined,
                        serviceFee: undefined,
                        totalAmount: undefined,
                    },
                    vendorData: {
                        vendorNumber: undefined,
                        name1: undefined,
                        name2: undefined,
                        ein: undefined,
                        phone: undefined,
                        email: undefined,
                        address1: undefined,
                        city: undefined,
                        state: undefined,
                        zip: undefined,
                        country: undefined,
                        mcc: undefined,
                        contacts: undefined,
                        billingData: undefined,
                        vendorStatus: undefined,
                        remitAddress1: undefined,
                        remitAddress2: undefined,
                        remitCity: undefined,
                        remitState: undefined,
                        remitZip: undefined,
                        remitCountry: undefined,
                        customerVendorAccount: undefined,
                        customField1: undefined,
                        customField2: undefined,
                        additionalData: undefined,
                        address2: undefined,
                        internalReferenceId: undefined,
                        locationCode: undefined,
                        payeeName1: undefined,
                        payeeName2: undefined,
                        paymentMethod: undefined,
                        vendorId: undefined,
                    },
                    invoiceData: [
                        {
                            invoiceNumber: undefined,
                            netAmount: undefined,
                            invoiceDate: undefined,
                            dueDate: undefined,
                            comments: undefined,
                            lotNumber: undefined,
                            billId: undefined,
                            discount: undefined,
                            terms: undefined,
                            accountingField1: undefined,
                            accountingField2: undefined,
                            additionalData: undefined,
                            attachments: undefined,
                        },
                        {
                            invoiceNumber: undefined,
                            netAmount: undefined,
                            invoiceDate: undefined,
                            dueDate: undefined,
                            comments: undefined,
                            lotNumber: undefined,
                            billId: undefined,
                            discount: undefined,
                            terms: undefined,
                            accountingField1: undefined,
                            accountingField2: undefined,
                            additionalData: undefined,
                            attachments: undefined,
                        },
                    ],
                    accountId: undefined,
                    subdomain: undefined,
                    subscriptionId: undefined,
                },
            });
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("AuthorizeOut (658e63ad)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            entryPoint: "entryPoint",
            source: undefined,
            orderId: undefined,
            orderDescription: undefined,
            paymentMethod: {
                method: "method",
                achHolder: undefined,
                achRouting: undefined,
                achAccount: undefined,
                achAccountType: undefined,
                achCode: undefined,
                achHolderType: undefined,
                storedMethodId: undefined,
                initiator: undefined,
                storedMethodUsageType: undefined,
            },
            paymentDetails: {
                checkNumber: undefined,
                currency: undefined,
                serviceFee: undefined,
                totalAmount: undefined,
            },
            vendorData: {
                vendorNumber: undefined,
                name1: undefined,
                name2: undefined,
                ein: undefined,
                phone: undefined,
                email: undefined,
                address1: undefined,
                city: undefined,
                state: undefined,
                zip: undefined,
                country: undefined,
                mcc: undefined,
                contacts: undefined,
                billingData: undefined,
                vendorStatus: undefined,
                remitAddress1: undefined,
                remitAddress2: undefined,
                remitCity: undefined,
                remitState: undefined,
                remitZip: undefined,
                remitCountry: undefined,
                customerVendorAccount: undefined,
                customField1: undefined,
                customField2: undefined,
                additionalData: undefined,
                address2: undefined,
                internalReferenceId: undefined,
                locationCode: undefined,
                payeeName1: undefined,
                payeeName2: undefined,
                paymentMethod: undefined,
                vendorId: undefined,
            },
            invoiceData: [
                {
                    invoiceNumber: undefined,
                    netAmount: undefined,
                    invoiceDate: undefined,
                    dueDate: undefined,
                    comments: undefined,
                    lotNumber: undefined,
                    billId: undefined,
                    discount: undefined,
                    terms: undefined,
                    accountingField1: undefined,
                    accountingField2: undefined,
                    additionalData: undefined,
                    attachments: undefined,
                },
                {
                    invoiceNumber: undefined,
                    netAmount: undefined,
                    invoiceDate: undefined,
                    dueDate: undefined,
                    comments: undefined,
                    lotNumber: undefined,
                    billId: undefined,
                    discount: undefined,
                    terms: undefined,
                    accountingField1: undefined,
                    accountingField2: undefined,
                    additionalData: undefined,
                    attachments: undefined,
                },
            ],
            accountId: undefined,
            subdomain: undefined,
            subscriptionId: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/MoneyOut/authorize")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.moneyOut.authorizeOut({
                body: {
                    entryPoint: "entryPoint",
                    source: undefined,
                    orderId: undefined,
                    orderDescription: undefined,
                    paymentMethod: {
                        method: "method",
                        achHolder: undefined,
                        achRouting: undefined,
                        achAccount: undefined,
                        achAccountType: undefined,
                        achCode: undefined,
                        achHolderType: undefined,
                        storedMethodId: undefined,
                        initiator: undefined,
                        storedMethodUsageType: undefined,
                    },
                    paymentDetails: {
                        checkNumber: undefined,
                        currency: undefined,
                        serviceFee: undefined,
                        totalAmount: undefined,
                    },
                    vendorData: {
                        vendorNumber: undefined,
                        name1: undefined,
                        name2: undefined,
                        ein: undefined,
                        phone: undefined,
                        email: undefined,
                        address1: undefined,
                        city: undefined,
                        state: undefined,
                        zip: undefined,
                        country: undefined,
                        mcc: undefined,
                        contacts: undefined,
                        billingData: undefined,
                        vendorStatus: undefined,
                        remitAddress1: undefined,
                        remitAddress2: undefined,
                        remitCity: undefined,
                        remitState: undefined,
                        remitZip: undefined,
                        remitCountry: undefined,
                        customerVendorAccount: undefined,
                        customField1: undefined,
                        customField2: undefined,
                        additionalData: undefined,
                        address2: undefined,
                        internalReferenceId: undefined,
                        locationCode: undefined,
                        payeeName1: undefined,
                        payeeName2: undefined,
                        paymentMethod: undefined,
                        vendorId: undefined,
                    },
                    invoiceData: [
                        {
                            invoiceNumber: undefined,
                            netAmount: undefined,
                            invoiceDate: undefined,
                            dueDate: undefined,
                            comments: undefined,
                            lotNumber: undefined,
                            billId: undefined,
                            discount: undefined,
                            terms: undefined,
                            accountingField1: undefined,
                            accountingField2: undefined,
                            additionalData: undefined,
                            attachments: undefined,
                        },
                        {
                            invoiceNumber: undefined,
                            netAmount: undefined,
                            invoiceDate: undefined,
                            dueDate: undefined,
                            comments: undefined,
                            lotNumber: undefined,
                            billId: undefined,
                            discount: undefined,
                            terms: undefined,
                            accountingField1: undefined,
                            accountingField2: undefined,
                            additionalData: undefined,
                            attachments: undefined,
                        },
                    ],
                    accountId: undefined,
                    subdomain: undefined,
                    subscriptionId: undefined,
                },
            });
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("AuthorizeOut (fcdb4f99)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            entryPoint: "entryPoint",
            source: undefined,
            orderId: undefined,
            orderDescription: undefined,
            paymentMethod: {
                method: "method",
                achHolder: undefined,
                achRouting: undefined,
                achAccount: undefined,
                achAccountType: undefined,
                achCode: undefined,
                achHolderType: undefined,
                storedMethodId: undefined,
                initiator: undefined,
                storedMethodUsageType: undefined,
            },
            paymentDetails: {
                checkNumber: undefined,
                currency: undefined,
                serviceFee: undefined,
                totalAmount: undefined,
            },
            vendorData: {
                vendorNumber: undefined,
                name1: undefined,
                name2: undefined,
                ein: undefined,
                phone: undefined,
                email: undefined,
                address1: undefined,
                city: undefined,
                state: undefined,
                zip: undefined,
                country: undefined,
                mcc: undefined,
                contacts: undefined,
                billingData: undefined,
                vendorStatus: undefined,
                remitAddress1: undefined,
                remitAddress2: undefined,
                remitCity: undefined,
                remitState: undefined,
                remitZip: undefined,
                remitCountry: undefined,
                customerVendorAccount: undefined,
                customField1: undefined,
                customField2: undefined,
                additionalData: undefined,
                address2: undefined,
                internalReferenceId: undefined,
                locationCode: undefined,
                payeeName1: undefined,
                payeeName2: undefined,
                paymentMethod: undefined,
                vendorId: undefined,
            },
            invoiceData: [
                {
                    invoiceNumber: undefined,
                    netAmount: undefined,
                    invoiceDate: undefined,
                    dueDate: undefined,
                    comments: undefined,
                    lotNumber: undefined,
                    billId: undefined,
                    discount: undefined,
                    terms: undefined,
                    accountingField1: undefined,
                    accountingField2: undefined,
                    additionalData: undefined,
                    attachments: undefined,
                },
                {
                    invoiceNumber: undefined,
                    netAmount: undefined,
                    invoiceDate: undefined,
                    dueDate: undefined,
                    comments: undefined,
                    lotNumber: undefined,
                    billId: undefined,
                    discount: undefined,
                    terms: undefined,
                    accountingField1: undefined,
                    accountingField2: undefined,
                    additionalData: undefined,
                    attachments: undefined,
                },
            ],
            accountId: undefined,
            subdomain: undefined,
            subscriptionId: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/MoneyOut/authorize")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.moneyOut.authorizeOut({
                body: {
                    entryPoint: "entryPoint",
                    source: undefined,
                    orderId: undefined,
                    orderDescription: undefined,
                    paymentMethod: {
                        method: "method",
                        achHolder: undefined,
                        achRouting: undefined,
                        achAccount: undefined,
                        achAccountType: undefined,
                        achCode: undefined,
                        achHolderType: undefined,
                        storedMethodId: undefined,
                        initiator: undefined,
                        storedMethodUsageType: undefined,
                    },
                    paymentDetails: {
                        checkNumber: undefined,
                        currency: undefined,
                        serviceFee: undefined,
                        totalAmount: undefined,
                    },
                    vendorData: {
                        vendorNumber: undefined,
                        name1: undefined,
                        name2: undefined,
                        ein: undefined,
                        phone: undefined,
                        email: undefined,
                        address1: undefined,
                        city: undefined,
                        state: undefined,
                        zip: undefined,
                        country: undefined,
                        mcc: undefined,
                        contacts: undefined,
                        billingData: undefined,
                        vendorStatus: undefined,
                        remitAddress1: undefined,
                        remitAddress2: undefined,
                        remitCity: undefined,
                        remitState: undefined,
                        remitZip: undefined,
                        remitCountry: undefined,
                        customerVendorAccount: undefined,
                        customField1: undefined,
                        customField2: undefined,
                        additionalData: undefined,
                        address2: undefined,
                        internalReferenceId: undefined,
                        locationCode: undefined,
                        payeeName1: undefined,
                        payeeName2: undefined,
                        paymentMethod: undefined,
                        vendorId: undefined,
                    },
                    invoiceData: [
                        {
                            invoiceNumber: undefined,
                            netAmount: undefined,
                            invoiceDate: undefined,
                            dueDate: undefined,
                            comments: undefined,
                            lotNumber: undefined,
                            billId: undefined,
                            discount: undefined,
                            terms: undefined,
                            accountingField1: undefined,
                            accountingField2: undefined,
                            additionalData: undefined,
                            attachments: undefined,
                        },
                        {
                            invoiceNumber: undefined,
                            netAmount: undefined,
                            invoiceDate: undefined,
                            dueDate: undefined,
                            comments: undefined,
                            lotNumber: undefined,
                            billId: undefined,
                            discount: undefined,
                            terms: undefined,
                            accountingField1: undefined,
                            accountingField2: undefined,
                            additionalData: undefined,
                            attachments: undefined,
                        },
                    ],
                    accountId: undefined,
                    subdomain: undefined,
                    subscriptionId: undefined,
                },
            });
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("AuthorizeOut (7a30fd13)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            entryPoint: "entryPoint",
            source: undefined,
            orderId: undefined,
            orderDescription: undefined,
            paymentMethod: {
                method: "method",
                achHolder: undefined,
                achRouting: undefined,
                achAccount: undefined,
                achAccountType: undefined,
                achCode: undefined,
                achHolderType: undefined,
                storedMethodId: undefined,
                initiator: undefined,
                storedMethodUsageType: undefined,
            },
            paymentDetails: {
                checkNumber: undefined,
                currency: undefined,
                serviceFee: undefined,
                totalAmount: undefined,
            },
            vendorData: {
                vendorNumber: undefined,
                name1: undefined,
                name2: undefined,
                ein: undefined,
                phone: undefined,
                email: undefined,
                address1: undefined,
                city: undefined,
                state: undefined,
                zip: undefined,
                country: undefined,
                mcc: undefined,
                contacts: undefined,
                billingData: undefined,
                vendorStatus: undefined,
                remitAddress1: undefined,
                remitAddress2: undefined,
                remitCity: undefined,
                remitState: undefined,
                remitZip: undefined,
                remitCountry: undefined,
                customerVendorAccount: undefined,
                customField1: undefined,
                customField2: undefined,
                additionalData: undefined,
                address2: undefined,
                internalReferenceId: undefined,
                locationCode: undefined,
                payeeName1: undefined,
                payeeName2: undefined,
                paymentMethod: undefined,
                vendorId: undefined,
            },
            invoiceData: [
                {
                    invoiceNumber: undefined,
                    netAmount: undefined,
                    invoiceDate: undefined,
                    dueDate: undefined,
                    comments: undefined,
                    lotNumber: undefined,
                    billId: undefined,
                    discount: undefined,
                    terms: undefined,
                    accountingField1: undefined,
                    accountingField2: undefined,
                    additionalData: undefined,
                    attachments: undefined,
                },
                {
                    invoiceNumber: undefined,
                    netAmount: undefined,
                    invoiceDate: undefined,
                    dueDate: undefined,
                    comments: undefined,
                    lotNumber: undefined,
                    billId: undefined,
                    discount: undefined,
                    terms: undefined,
                    accountingField1: undefined,
                    accountingField2: undefined,
                    additionalData: undefined,
                    attachments: undefined,
                },
            ],
            accountId: undefined,
            subdomain: undefined,
            subscriptionId: undefined,
        };
        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .post("/MoneyOut/authorize")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.moneyOut.authorizeOut({
                body: {
                    entryPoint: "entryPoint",
                    source: undefined,
                    orderId: undefined,
                    orderDescription: undefined,
                    paymentMethod: {
                        method: "method",
                        achHolder: undefined,
                        achRouting: undefined,
                        achAccount: undefined,
                        achAccountType: undefined,
                        achCode: undefined,
                        achHolderType: undefined,
                        storedMethodId: undefined,
                        initiator: undefined,
                        storedMethodUsageType: undefined,
                    },
                    paymentDetails: {
                        checkNumber: undefined,
                        currency: undefined,
                        serviceFee: undefined,
                        totalAmount: undefined,
                    },
                    vendorData: {
                        vendorNumber: undefined,
                        name1: undefined,
                        name2: undefined,
                        ein: undefined,
                        phone: undefined,
                        email: undefined,
                        address1: undefined,
                        city: undefined,
                        state: undefined,
                        zip: undefined,
                        country: undefined,
                        mcc: undefined,
                        contacts: undefined,
                        billingData: undefined,
                        vendorStatus: undefined,
                        remitAddress1: undefined,
                        remitAddress2: undefined,
                        remitCity: undefined,
                        remitState: undefined,
                        remitZip: undefined,
                        remitCountry: undefined,
                        customerVendorAccount: undefined,
                        customField1: undefined,
                        customField2: undefined,
                        additionalData: undefined,
                        address2: undefined,
                        internalReferenceId: undefined,
                        locationCode: undefined,
                        payeeName1: undefined,
                        payeeName2: undefined,
                        paymentMethod: undefined,
                        vendorId: undefined,
                    },
                    invoiceData: [
                        {
                            invoiceNumber: undefined,
                            netAmount: undefined,
                            invoiceDate: undefined,
                            dueDate: undefined,
                            comments: undefined,
                            lotNumber: undefined,
                            billId: undefined,
                            discount: undefined,
                            terms: undefined,
                            accountingField1: undefined,
                            accountingField2: undefined,
                            additionalData: undefined,
                            attachments: undefined,
                        },
                        {
                            invoiceNumber: undefined,
                            netAmount: undefined,
                            invoiceDate: undefined,
                            dueDate: undefined,
                            comments: undefined,
                            lotNumber: undefined,
                            billId: undefined,
                            discount: undefined,
                            terms: undefined,
                            accountingField1: undefined,
                            accountingField2: undefined,
                            additionalData: undefined,
                            attachments: undefined,
                        },
                    ],
                    accountId: undefined,
                    subdomain: undefined,
                    subscriptionId: undefined,
                },
            });
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("CancelAllOut (CancelAll)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = ["2-29", "2-28", "2-27"];
        const rawResponseBody = {
            isSuccess: true,
            pageIdentifier: "null",
            responseCode: 1,
            responseData: [
                { CustomerId: 1000000, ReferenceId: "129-230", ResultCode: 1, ResultText: "Cancelled" },
                { CustomerId: 1000000, ReferenceId: "129-219", ResultCode: 1, ResultText: "Cancelled" },
            ],
            responseText: "Success",
        };
        server
            .mockEndpoint()
            .post("/MoneyOut/cancelAll")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.moneyOut.cancelAllOut(["2-29", "2-28", "2-27"]);
        expect(response).toEqual({
            isSuccess: true,
            pageIdentifier: "null",
            responseCode: 1,
            responseData: [
                {
                    CustomerId: 1000000,
                    ReferenceId: "129-230",
                    ResultCode: 1,
                    ResultText: "Cancelled",
                },
                {
                    CustomerId: 1000000,
                    ReferenceId: "129-219",
                    ResultCode: 1,
                    ResultText: "Cancelled",
                },
            ],
            responseText: "Success",
        });
    });

    test("CancelAllOut (9234b3ea)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = ["string", "string"];
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/MoneyOut/cancelAll")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.moneyOut.cancelAllOut(["string", "string"]);
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("CancelAllOut (8cf1e142)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = ["string", "string"];
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/MoneyOut/cancelAll")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.moneyOut.cancelAllOut(["string", "string"]);
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("CancelAllOut (b3c36676)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = ["string", "string"];
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/MoneyOut/cancelAll")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.moneyOut.cancelAllOut(["string", "string"]);
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("CancelAllOut (de1e8a10)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = ["string", "string"];
        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .post("/MoneyOut/cancelAll")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.moneyOut.cancelAllOut(["string", "string"]);
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("CancelOut (CancelPayout)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            isSuccess: true,
            responseText: "Success",
            pageIdentifier: undefined,
            responseData: {
                ReferenceId: "129-219",
                ResultCode: 1,
                ResultText: "Approved",
                CustomerId: 0,
                AuthCode: undefined,
                cvvResponseText: undefined,
                avsResponseText: undefined,
                methodReferenceId: undefined,
            },
        };
        server
            .mockEndpoint()
            .get("/MoneyOut/cancel/129-219")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.moneyOut.cancelOut("129-219");
        expect(response).toEqual({
            isSuccess: true,
            responseText: "Success",
            pageIdentifier: undefined,
            responseData: {
                ReferenceId: "129-219",
                ResultCode: 1,
                ResultText: "Approved",
                CustomerId: 0,
                AuthCode: undefined,
                cvvResponseText: undefined,
                avsResponseText: undefined,
                methodReferenceId: undefined,
            },
        });
    });

    test("CancelOut (b9587b90)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/MoneyOut/cancel/referenceId")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.moneyOut.cancelOut("referenceId");
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("CancelOut (174496b8)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/MoneyOut/cancel/referenceId")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.moneyOut.cancelOut("referenceId");
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("CancelOut (f376ae4c)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/MoneyOut/cancel/referenceId")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.moneyOut.cancelOut("referenceId");
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("CancelOut (6c34ecf2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .get("/MoneyOut/cancel/referenceId")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.moneyOut.cancelOut("referenceId");
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("CaptureAllOut (CaptureAll)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = ["2-29", "2-28", "2-27"];
        const rawResponseBody = {
            isSuccess: true,
            pageIdentifier: "null",
            responseCode: 1,
            responseData: [
                { CustomerId: 1000000, ReferenceId: "129-230", ResultCode: 1, ResultText: "Captured" },
                { CustomerId: 1000000, ReferenceId: "129-219", ResultCode: 1, ResultText: "Captured" },
            ],
            responseText: "Success",
        };
        server
            .mockEndpoint()
            .post("/MoneyOut/captureAll")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.moneyOut.captureAllOut({
            body: ["2-29", "2-28", "2-27"],
        });
        expect(response).toEqual({
            isSuccess: true,
            pageIdentifier: "null",
            responseCode: 1,
            responseData: [
                {
                    CustomerId: 1000000,
                    ReferenceId: "129-230",
                    ResultCode: 1,
                    ResultText: "Captured",
                },
                {
                    CustomerId: 1000000,
                    ReferenceId: "129-219",
                    ResultCode: 1,
                    ResultText: "Captured",
                },
            ],
            responseText: "Success",
        });
    });

    test("CaptureAllOut (9234b3ea)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = ["string", "string"];
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/MoneyOut/captureAll")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.moneyOut.captureAllOut({
                body: ["string", "string"],
            });
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("CaptureAllOut (8cf1e142)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = ["string", "string"];
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/MoneyOut/captureAll")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.moneyOut.captureAllOut({
                body: ["string", "string"],
            });
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("CaptureAllOut (b3c36676)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = ["string", "string"];
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/MoneyOut/captureAll")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.moneyOut.captureAllOut({
                body: ["string", "string"],
            });
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("CaptureAllOut (de1e8a10)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = ["string", "string"];
        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .post("/MoneyOut/captureAll")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.moneyOut.captureAllOut({
                body: ["string", "string"],
            });
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("CaptureOut (CapturePayout)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            responseCode: 1,
            pageIdentifier: null,
            roomId: 0,
            isSuccess: true,
            responseText: "Success",
            responseData: {
                authCode: null,
                referenceId: "129-219",
                resultCode: 1,
                resultText: "Authorized",
                avsResponseText: null,
                cvvResponseText: null,
                customerId: 0,
                methodReferenceId: null,
            },
        };
        server
            .mockEndpoint()
            .get("/MoneyOut/capture/129-219")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.moneyOut.captureOut("129-219");
        expect(response).toEqual({
            responseCode: 1,
            pageIdentifier: null,
            roomId: 0,
            isSuccess: true,
            responseText: "Success",
            responseData: {
                authCode: null,
                referenceId: "129-219",
                resultCode: 1,
                resultText: "Authorized",
                avsResponseText: null,
                cvvResponseText: null,
                customerId: 0,
                methodReferenceId: null,
            },
        });
    });

    test("CaptureOut (b9587b90)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/MoneyOut/capture/referenceId")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.moneyOut.captureOut("referenceId");
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("CaptureOut (174496b8)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/MoneyOut/capture/referenceId")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.moneyOut.captureOut("referenceId");
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("CaptureOut (f376ae4c)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/MoneyOut/capture/referenceId")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.moneyOut.captureOut("referenceId");
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("CaptureOut (6c34ecf2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .get("/MoneyOut/capture/referenceId")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.moneyOut.captureOut("referenceId");
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("PayoutDetails (AuthorizedTransaction)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            Bills: [{ invoiceNumber: "123B", netAmount: "8800.00" }],
            CheckData: undefined,
            CheckNumber: undefined,
            Comments: "testing",
            CreatedDate: "2022-07-01T15:00:01Z",
            Events: [{ EventTime: "2023-04-24T09:17:49Z", TransEvent: "Authorized" }],
            FeeAmount: 0,
            Gateway: "TSYS",
            IdOut: 350,
            LastUpdated: "2023-04-23T17:00:00Z",
            NetAmount: 8800,
            ParentOrgName: "PropertyManager Pro",
            PaymentData: {
                AccountType: "",
                binData: {
                    binMatchedLength: "6",
                    binCardBrand: "Visa",
                    binCardType: "Credit",
                    binCardCategory: "PLATINUM",
                    binCardIssuer: "Bank of Example",
                    binCardIssuerCountry: "United States",
                    binCardIssuerCountryCodeA2: "US",
                    binCardIssuerCountryNumber: "840",
                    binCardIsRegulated: "false",
                    binCardUseCategory: "Consumer",
                    binCardIssuerCountryCodeA3: "USA",
                },
                HolderName: "",
                Initiator: "payor",
                MaskedAccount: "",
                Sequence: "subsequent",
                SignatureData: "SignatureData",
                StoredMethodUsageType: "subscription",
            },
            PaymentGroup: "2345667-ddd-fff",
            PaymentId: "12345678910",
            PaymentMethod: "managed",
            PaymentStatus: "Authorized",
            PaypointDbaname: "Sunshine Gutters",
            PaypointLegalname: "Sunshine Services, LLC",
            Source: "api",
            Status: 11,
            StatusText: "Captured",
            TotalAmount: 8800,
            Vendor: {
                VendorNumber: "1234",
                Name1: "Herman's Coatings",
                Name2: "Herman's Coating Supply Company, LLC",
                EIN: "123456789",
                Phone: "212-555-1234",
                Email: "example@email.com",
                RemitEmail: undefined,
                Address1: "123 Ocean Drive",
                Address2: "Suite 400",
                City: "Bristol",
                State: "GA",
                Zip: "31113",
                Country: "US",
                Mcc: "7777",
                LocationCode: "LOC123",
                Contacts: {
                    ContactEmail: "eric@martinezcoatings.com",
                    ContactName: "Eric Martinez",
                    ContactPhone: "5555555555",
                    ContactTitle: "Owner",
                },
                BillingData: {
                    id: 123456,
                    accountId: "bank-account-001",
                    nickname: "Main Checking Account",
                    bankName: "Example Bank",
                    routingAccount: "123456789",
                    accountNumber: "9876543210",
                    typeAccount: "Checking",
                    bankAccountHolderName: "John Doe",
                    bankAccountHolderType: "Business",
                    bankAccountFunction: 2,
                    verified: true,
                    status: 1,
                    services: [],
                    default: true,
                },
                PaymentMethod: undefined,
                VendorStatus: 1,
                VendorId: 1,
                EnrollmentStatus: undefined,
                Summary: {
                    ActiveBills: 2,
                    PendingBills: 4,
                    InTransitBills: 3,
                    PaidBills: 18,
                    OverdueBills: 1,
                    ApprovedBills: 5,
                    DisapprovedBills: 1,
                    TotalBills: 34,
                    ActiveBillsAmount: 1250.75,
                    PendingBillsAmount: 2890.5,
                    InTransitBillsAmount: 1675.25,
                    PaidBillsAmount: 15420.8,
                    OverdueBillsAmount: 425,
                    ApprovedBillsAmount: 3240.9,
                    DisapprovedBillsAmount: 180,
                    TotalBillsAmount: 25083.2,
                },
                PaypointLegalname: "Sunshine Services, LLC",
                PaypointDbaname: "Sunshine Gutters",
                PaypointEntryname: "d193cf9a46",
                ParentOrgName: "PropertyManager Pro",
                ParentOrgId: 1000,
                CreatedDate: "2022-07-01T15:00:01Z",
                LastUpdated: "2022-07-01T15:00:01Z",
                remitAddress1: "123 Walnut Street",
                remitAddress2: "Suite 900",
                remitCity: "Miami",
                remitState: "FL",
                remitZip: "31113",
                remitCountry: "US",
                payeeName1: "payeeName1",
                payeeName2: "payeeName2",
                customField1: "",
                customField2: "",
                customerVendorAccount: "123-456",
                InternalReferenceId: 1000000,
                additionalData: undefined,
                externalPaypointID: "Paypoint-100",
                StoredMethods: [],
            },
            CreatedAt: undefined,
            ParentOrgId: undefined,
            externalPaypointID: undefined,
            EntryName: undefined,
            BatchId: undefined,
            HasVcardTransactions: false,
            IsSameDayACH: false,
            ScheduleId: undefined,
            SettlementStatus: undefined,
            RiskFlagged: false,
            RiskFlaggedOn: undefined,
            RiskStatus: undefined,
            RiskReason: undefined,
            RiskAction: undefined,
            RiskActionCode: undefined,
        };
        server
            .mockEndpoint()
            .get("/MoneyOut/details/45-as456777hhhhhhhhhh77777777-324")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.moneyOut.payoutDetails("45-as456777hhhhhhhhhh77777777-324");
        expect(response).toEqual({
            Bills: [
                {
                    invoiceNumber: "123B",
                    netAmount: "8800.00",
                },
            ],
            CheckData: undefined,
            CheckNumber: undefined,
            Comments: "testing",
            CreatedDate: "2022-07-01T15:00:01Z",
            Events: [
                {
                    EventTime: "2023-04-24T09:17:49Z",
                    TransEvent: "Authorized",
                },
            ],
            FeeAmount: 0,
            Gateway: "TSYS",
            IdOut: 350,
            LastUpdated: "2023-04-23T17:00:00Z",
            NetAmount: 8800,
            ParentOrgName: "PropertyManager Pro",
            PaymentData: {
                AccountType: "",
                binData: {
                    binMatchedLength: "6",
                    binCardBrand: "Visa",
                    binCardType: "Credit",
                    binCardCategory: "PLATINUM",
                    binCardIssuer: "Bank of Example",
                    binCardIssuerCountry: "United States",
                    binCardIssuerCountryCodeA2: "US",
                    binCardIssuerCountryNumber: "840",
                    binCardIsRegulated: "false",
                    binCardUseCategory: "Consumer",
                    binCardIssuerCountryCodeA3: "USA",
                },
                HolderName: "",
                Initiator: "payor",
                MaskedAccount: "",
                Sequence: "subsequent",
                SignatureData: "SignatureData",
                StoredMethodUsageType: "subscription",
            },
            PaymentGroup: "2345667-ddd-fff",
            PaymentId: "12345678910",
            PaymentMethod: "managed",
            PaymentStatus: "Authorized",
            PaypointDbaname: "Sunshine Gutters",
            PaypointLegalname: "Sunshine Services, LLC",
            Source: "api",
            Status: 11,
            StatusText: "Captured",
            TotalAmount: 8800,
            Vendor: {
                VendorNumber: "1234",
                Name1: "Herman's Coatings",
                Name2: "Herman's Coating Supply Company, LLC",
                EIN: "123456789",
                Phone: "212-555-1234",
                Email: "example@email.com",
                RemitEmail: undefined,
                Address1: "123 Ocean Drive",
                Address2: "Suite 400",
                City: "Bristol",
                State: "GA",
                Zip: "31113",
                Country: "US",
                Mcc: "7777",
                LocationCode: "LOC123",
                Contacts: {
                    ContactEmail: "eric@martinezcoatings.com",
                    ContactName: "Eric Martinez",
                    ContactPhone: "5555555555",
                    ContactTitle: "Owner",
                },
                BillingData: {
                    id: 123456,
                    accountId: "bank-account-001",
                    nickname: "Main Checking Account",
                    bankName: "Example Bank",
                    routingAccount: "123456789",
                    accountNumber: "9876543210",
                    typeAccount: "Checking",
                    bankAccountHolderName: "John Doe",
                    bankAccountHolderType: "Business",
                    bankAccountFunction: 2,
                    verified: true,
                    status: 1,
                    services: [],
                    default: true,
                },
                PaymentMethod: undefined,
                VendorStatus: 1,
                VendorId: 1,
                EnrollmentStatus: undefined,
                Summary: {
                    ActiveBills: 2,
                    PendingBills: 4,
                    InTransitBills: 3,
                    PaidBills: 18,
                    OverdueBills: 1,
                    ApprovedBills: 5,
                    DisapprovedBills: 1,
                    TotalBills: 34,
                    ActiveBillsAmount: 1250.75,
                    PendingBillsAmount: 2890.5,
                    InTransitBillsAmount: 1675.25,
                    PaidBillsAmount: 15420.8,
                    OverdueBillsAmount: 425,
                    ApprovedBillsAmount: 3240.9,
                    DisapprovedBillsAmount: 180,
                    TotalBillsAmount: 25083.2,
                },
                PaypointLegalname: "Sunshine Services, LLC",
                PaypointDbaname: "Sunshine Gutters",
                PaypointEntryname: "d193cf9a46",
                ParentOrgName: "PropertyManager Pro",
                ParentOrgId: 1000,
                CreatedDate: "2022-07-01T15:00:01Z",
                LastUpdated: "2022-07-01T15:00:01Z",
                remitAddress1: "123 Walnut Street",
                remitAddress2: "Suite 900",
                remitCity: "Miami",
                remitState: "FL",
                remitZip: "31113",
                remitCountry: "US",
                payeeName1: "payeeName1",
                payeeName2: "payeeName2",
                customField1: "",
                customField2: "",
                customerVendorAccount: "123-456",
                InternalReferenceId: 1000000,
                additionalData: undefined,
                externalPaypointID: "Paypoint-100",
                StoredMethods: [],
            },
            CreatedAt: undefined,
            ParentOrgId: undefined,
            externalPaypointID: undefined,
            EntryName: undefined,
            BatchId: undefined,
            HasVcardTransactions: false,
            IsSameDayACH: false,
            ScheduleId: undefined,
            SettlementStatus: undefined,
            RiskFlagged: false,
            RiskFlaggedOn: undefined,
            RiskStatus: undefined,
            RiskReason: undefined,
            RiskAction: undefined,
            RiskActionCode: undefined,
        });
    });

    test("PayoutDetails (AuthorizeAndCapturedTransaction)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            Bills: [{ invoiceNumber: "123B", netAmount: "8800.00" }],
            CheckData: undefined,
            CheckNumber: undefined,
            Comments: "testing",
            CreatedDate: "2022-07-01T15:00:01Z",
            Events: [
                { EventTime: "2023-04-24T09:00:33Z", TransEvent: "Authorized" },
                {
                    EventData: {
                        custId: "PAYABLITST",
                        dateCreated: "2023-04-24T16:14:28Z",
                        dateModified: "2023-04-24T16:14:28Z",
                        group: {
                            approved: false,
                            custId: "PAYABLITST",
                            dateCreated: "2023-04-24T16:14:28Z",
                            dateModified: "2023-04-24T16:14:28Z",
                            id: "acd5ddd9-42be-4822-bc02-46e7c560d8a4",
                            links: [
                                {
                                    href: "https://cert-api.cpayplus.com/payments/groups/acd5ddd9-42be-4822-bc02-46e7c560d8a4",
                                    rel: "cancel",
                                    type: "DELETE",
                                },
                                {
                                    href: "https://cert-api.cpayplus.com/payments/groups/acd5ddd9-42be-4822-bc02-46e7c560d8a4/approve",
                                    rel: "approve",
                                    type: "POST",
                                },
                                {
                                    href: "https://cert-api.cpayplus.com/payments/groups/acd5ddd9-42be-4822-bc02-46e7c560d8a4",
                                    rel: "self",
                                    type: "GET",
                                },
                            ],
                            name: "187-20230424-PAYABLITST",
                            status: "Waiting Funds",
                            totalAmount: "8800.00",
                        },
                        id: "1ede3eb2-a564-43b5-b2d2-7195f6d9fded",
                        invoices: [{ invoiceNumber: "123B", netAmount: "8800.00" }],
                        links: [
                            {
                                href: "https://cert-api.cpayplus.com/payments/1ede3eb2-a564-43b5-b2d2-7195f6d9fded/resendRemit",
                                rel: "resendRemit",
                                type: "POST",
                            },
                            {
                                href: "https://cert-api.cpayplus.com/payments/1ede3eb2-a564-43b5-b2d2-7195f6d9fded",
                                rel: "cancel",
                                type: "DELETE",
                            },
                            {
                                href: "https://cert-api.cpayplus.com/payments/1ede3eb2-a564-43b5-b2d2-7195f6d9fded",
                                rel: "self",
                                type: "GET",
                            },
                            {
                                href: "https://cert-api.cpayplus.com/payments/1ede3eb2-a564-43b5-b2d2-7195f6d9fded/reissue",
                                rel: "reissue",
                                type: "POST",
                            },
                        ],
                        paymentNumber: "187-349",
                        paymentStatus: "Awaiting Funds",
                        paymentType: "VCard",
                        remitAddress: {
                            address1: "5724 daughtery downs Loop",
                            address2: "",
                            city: "Lakeland",
                            countryCode: "US",
                            state: "FL",
                            zip: "33809",
                        },
                        vendor: {
                            address: {
                                address1: "5724 DAUGHTERY DOWNS LOOP",
                                address2: "",
                                city: "LAKELAND",
                                countryCode: "US",
                                state: "FL",
                                zip: "33809",
                            },
                            contactEmail: "paul@payabli.com",
                            custId: "PAYABLITST",
                            dateCreated: "2023-04-07T15:10:13Z",
                            dateModified: "2023-04-17T15:39:33Z",
                            email: "paul@payabli.com",
                            id: "d7d92fac-fd8a-4ce9-8f92-62ee979b43fe",
                            links: [
                                {
                                    href: "https://cert-api.cpayplus.com/payments/d7d92fac-fd8a-4ce9-8f92-62ee979b43fe",
                                    rel: "self",
                                    type: "GET",
                                },
                            ],
                            paymentType: "VCard",
                            status: "Enrolled",
                            statusReason: "Customer Enrolled",
                            vendorName1: "PAUL'S",
                            vendorNumber: "54321",
                            vendorPhone: "19706188888",
                            vendorTaxId: "123456789",
                        },
                    },
                    EventTime: "2023-04-24T09:14:28Z",
                    TransEvent: "Captured",
                },
            ],
            FeeAmount: 0,
            Gateway: "TSYS",
            IdOut: 349,
            LastUpdated: "2023-04-23T17:00:00Z",
            NetAmount: 8800,
            ParentOrgName: "PropertyManager Pro",
            PaymentData: {
                AccountType: "",
                binData: {
                    binMatchedLength: "6",
                    binCardBrand: "Visa",
                    binCardType: "Credit",
                    binCardCategory: "PLATINUM",
                    binCardIssuer: "Bank of Example",
                    binCardIssuerCountry: "United States",
                    binCardIssuerCountryCodeA2: "US",
                    binCardIssuerCountryNumber: "840",
                    binCardIsRegulated: "false",
                    binCardUseCategory: "Consumer",
                    binCardIssuerCountryCodeA3: "USA",
                },
                HolderName: "",
                Initiator: "payor",
                MaskedAccount: "",
                Sequence: "subsequent",
                SignatureData: "SignatureData",
                StoredMethodUsageType: "subscription",
            },
            PaymentGroup: "2345667-ddd-fff",
            PaymentId: "1234567890",
            PaymentMethod: "managed",
            PaymentStatus: "Captured",
            PaypointDbaname: "Sunshine Gutters",
            PaypointLegalname: "Sunshine Services, LLC",
            Source: "api",
            Status: 1,
            StatusText: "Captured",
            TotalAmount: 8800,
            Vendor: {
                VendorNumber: "1234",
                Name1: "Herman's Coatings",
                Name2: "Herman's Coating Supply Company, LLC",
                EIN: "123456789",
                Phone: "212-555-1234",
                Email: "example@email.com",
                RemitEmail: undefined,
                Address1: "123 Ocean Drive",
                Address2: "Suite 400",
                City: "Bristol",
                State: "GA",
                Zip: "31113",
                Country: "US",
                Mcc: "7777",
                LocationCode: "LOC123",
                Contacts: {
                    ContactEmail: "eric@martinezcoatings.com",
                    ContactName: "Eric Martinez",
                    ContactPhone: "5555555555",
                    ContactTitle: "Owner",
                },
                BillingData: {
                    id: 123456,
                    accountId: "bank-account-001",
                    nickname: "Main Checking Account",
                    bankName: "Example Bank",
                    routingAccount: "123456789",
                    accountNumber: "9876543210",
                    typeAccount: "Checking",
                    bankAccountHolderName: "John Doe",
                    bankAccountHolderType: "Business",
                    bankAccountFunction: 2,
                    verified: true,
                    status: 1,
                    services: [],
                    default: true,
                },
                PaymentMethod: undefined,
                VendorStatus: 1,
                VendorId: 1,
                EnrollmentStatus: undefined,
                Summary: {
                    ActiveBills: 2,
                    PendingBills: 4,
                    InTransitBills: 3,
                    PaidBills: 18,
                    OverdueBills: 1,
                    ApprovedBills: 5,
                    DisapprovedBills: 1,
                    TotalBills: 34,
                    ActiveBillsAmount: 1250.75,
                    PendingBillsAmount: 2890.5,
                    InTransitBillsAmount: 1675.25,
                    PaidBillsAmount: 15420.8,
                    OverdueBillsAmount: 425,
                    ApprovedBillsAmount: 3240.9,
                    DisapprovedBillsAmount: 180,
                    TotalBillsAmount: 25083.2,
                },
                PaypointLegalname: "Sunshine Services, LLC",
                PaypointDbaname: "Sunshine Gutters",
                PaypointEntryname: "d193cf9a46",
                ParentOrgName: "PropertyManager Pro",
                ParentOrgId: 1000,
                CreatedDate: "2022-07-01T15:00:01Z",
                LastUpdated: "2022-07-01T15:00:01Z",
                remitAddress1: "123 Walnut Street",
                remitAddress2: "Suite 900",
                remitCity: "Miami",
                remitState: "FL",
                remitZip: "31113",
                remitCountry: "US",
                payeeName1: "payeeName1",
                payeeName2: "payeeName2",
                customField1: "",
                customField2: "",
                customerVendorAccount: "123-456",
                InternalReferenceId: 1000000,
                additionalData: undefined,
                externalPaypointID: "Paypoint-100",
                StoredMethods: [],
            },
            CreatedAt: undefined,
            ParentOrgId: undefined,
            externalPaypointID: undefined,
            EntryName: undefined,
            BatchId: undefined,
            HasVcardTransactions: false,
            IsSameDayACH: false,
            ScheduleId: undefined,
            SettlementStatus: undefined,
            RiskFlagged: false,
            RiskFlaggedOn: undefined,
            RiskStatus: undefined,
            RiskReason: undefined,
            RiskAction: undefined,
            RiskActionCode: undefined,
        };
        server
            .mockEndpoint()
            .get("/MoneyOut/details/45-as456777hhhhhhhhhh77777777-324")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.moneyOut.payoutDetails("45-as456777hhhhhhhhhh77777777-324");
        expect(response).toEqual({
            Bills: [
                {
                    invoiceNumber: "123B",
                    netAmount: "8800.00",
                },
            ],
            CheckData: undefined,
            CheckNumber: undefined,
            Comments: "testing",
            CreatedDate: "2022-07-01T15:00:01Z",
            Events: [
                {
                    EventTime: "2023-04-24T09:00:33Z",
                    TransEvent: "Authorized",
                },
                {
                    EventData: {
                        custId: "PAYABLITST",
                        dateCreated: "2023-04-24T16:14:28Z",
                        dateModified: "2023-04-24T16:14:28Z",
                        group: {
                            approved: false,
                            custId: "PAYABLITST",
                            dateCreated: "2023-04-24T16:14:28Z",
                            dateModified: "2023-04-24T16:14:28Z",
                            id: "acd5ddd9-42be-4822-bc02-46e7c560d8a4",
                            links: [
                                {
                                    href: "https://cert-api.cpayplus.com/payments/groups/acd5ddd9-42be-4822-bc02-46e7c560d8a4",
                                    rel: "cancel",
                                    type: "DELETE",
                                },
                                {
                                    href: "https://cert-api.cpayplus.com/payments/groups/acd5ddd9-42be-4822-bc02-46e7c560d8a4/approve",
                                    rel: "approve",
                                    type: "POST",
                                },
                                {
                                    href: "https://cert-api.cpayplus.com/payments/groups/acd5ddd9-42be-4822-bc02-46e7c560d8a4",
                                    rel: "self",
                                    type: "GET",
                                },
                            ],
                            name: "187-20230424-PAYABLITST",
                            status: "Waiting Funds",
                            totalAmount: "8800.00",
                        },
                        id: "1ede3eb2-a564-43b5-b2d2-7195f6d9fded",
                        invoices: [
                            {
                                invoiceNumber: "123B",
                                netAmount: "8800.00",
                            },
                        ],
                        links: [
                            {
                                href: "https://cert-api.cpayplus.com/payments/1ede3eb2-a564-43b5-b2d2-7195f6d9fded/resendRemit",
                                rel: "resendRemit",
                                type: "POST",
                            },
                            {
                                href: "https://cert-api.cpayplus.com/payments/1ede3eb2-a564-43b5-b2d2-7195f6d9fded",
                                rel: "cancel",
                                type: "DELETE",
                            },
                            {
                                href: "https://cert-api.cpayplus.com/payments/1ede3eb2-a564-43b5-b2d2-7195f6d9fded",
                                rel: "self",
                                type: "GET",
                            },
                            {
                                href: "https://cert-api.cpayplus.com/payments/1ede3eb2-a564-43b5-b2d2-7195f6d9fded/reissue",
                                rel: "reissue",
                                type: "POST",
                            },
                        ],
                        paymentNumber: "187-349",
                        paymentStatus: "Awaiting Funds",
                        paymentType: "VCard",
                        remitAddress: {
                            address1: "5724 daughtery downs Loop",
                            address2: "",
                            city: "Lakeland",
                            countryCode: "US",
                            state: "FL",
                            zip: "33809",
                        },
                        vendor: {
                            address: {
                                address1: "5724 DAUGHTERY DOWNS LOOP",
                                address2: "",
                                city: "LAKELAND",
                                countryCode: "US",
                                state: "FL",
                                zip: "33809",
                            },
                            contactEmail: "paul@payabli.com",
                            custId: "PAYABLITST",
                            dateCreated: "2023-04-07T15:10:13Z",
                            dateModified: "2023-04-17T15:39:33Z",
                            email: "paul@payabli.com",
                            id: "d7d92fac-fd8a-4ce9-8f92-62ee979b43fe",
                            links: [
                                {
                                    href: "https://cert-api.cpayplus.com/payments/d7d92fac-fd8a-4ce9-8f92-62ee979b43fe",
                                    rel: "self",
                                    type: "GET",
                                },
                            ],
                            paymentType: "VCard",
                            status: "Enrolled",
                            statusReason: "Customer Enrolled",
                            vendorName1: "PAUL'S",
                            vendorNumber: "54321",
                            vendorPhone: "19706188888",
                            vendorTaxId: "123456789",
                        },
                    },
                    EventTime: "2023-04-24T09:14:28Z",
                    TransEvent: "Captured",
                },
            ],
            FeeAmount: 0,
            Gateway: "TSYS",
            IdOut: 349,
            LastUpdated: "2023-04-23T17:00:00Z",
            NetAmount: 8800,
            ParentOrgName: "PropertyManager Pro",
            PaymentData: {
                AccountType: "",
                binData: {
                    binMatchedLength: "6",
                    binCardBrand: "Visa",
                    binCardType: "Credit",
                    binCardCategory: "PLATINUM",
                    binCardIssuer: "Bank of Example",
                    binCardIssuerCountry: "United States",
                    binCardIssuerCountryCodeA2: "US",
                    binCardIssuerCountryNumber: "840",
                    binCardIsRegulated: "false",
                    binCardUseCategory: "Consumer",
                    binCardIssuerCountryCodeA3: "USA",
                },
                HolderName: "",
                Initiator: "payor",
                MaskedAccount: "",
                Sequence: "subsequent",
                SignatureData: "SignatureData",
                StoredMethodUsageType: "subscription",
            },
            PaymentGroup: "2345667-ddd-fff",
            PaymentId: "1234567890",
            PaymentMethod: "managed",
            PaymentStatus: "Captured",
            PaypointDbaname: "Sunshine Gutters",
            PaypointLegalname: "Sunshine Services, LLC",
            Source: "api",
            Status: 1,
            StatusText: "Captured",
            TotalAmount: 8800,
            Vendor: {
                VendorNumber: "1234",
                Name1: "Herman's Coatings",
                Name2: "Herman's Coating Supply Company, LLC",
                EIN: "123456789",
                Phone: "212-555-1234",
                Email: "example@email.com",
                RemitEmail: undefined,
                Address1: "123 Ocean Drive",
                Address2: "Suite 400",
                City: "Bristol",
                State: "GA",
                Zip: "31113",
                Country: "US",
                Mcc: "7777",
                LocationCode: "LOC123",
                Contacts: {
                    ContactEmail: "eric@martinezcoatings.com",
                    ContactName: "Eric Martinez",
                    ContactPhone: "5555555555",
                    ContactTitle: "Owner",
                },
                BillingData: {
                    id: 123456,
                    accountId: "bank-account-001",
                    nickname: "Main Checking Account",
                    bankName: "Example Bank",
                    routingAccount: "123456789",
                    accountNumber: "9876543210",
                    typeAccount: "Checking",
                    bankAccountHolderName: "John Doe",
                    bankAccountHolderType: "Business",
                    bankAccountFunction: 2,
                    verified: true,
                    status: 1,
                    services: [],
                    default: true,
                },
                PaymentMethod: undefined,
                VendorStatus: 1,
                VendorId: 1,
                EnrollmentStatus: undefined,
                Summary: {
                    ActiveBills: 2,
                    PendingBills: 4,
                    InTransitBills: 3,
                    PaidBills: 18,
                    OverdueBills: 1,
                    ApprovedBills: 5,
                    DisapprovedBills: 1,
                    TotalBills: 34,
                    ActiveBillsAmount: 1250.75,
                    PendingBillsAmount: 2890.5,
                    InTransitBillsAmount: 1675.25,
                    PaidBillsAmount: 15420.8,
                    OverdueBillsAmount: 425,
                    ApprovedBillsAmount: 3240.9,
                    DisapprovedBillsAmount: 180,
                    TotalBillsAmount: 25083.2,
                },
                PaypointLegalname: "Sunshine Services, LLC",
                PaypointDbaname: "Sunshine Gutters",
                PaypointEntryname: "d193cf9a46",
                ParentOrgName: "PropertyManager Pro",
                ParentOrgId: 1000,
                CreatedDate: "2022-07-01T15:00:01Z",
                LastUpdated: "2022-07-01T15:00:01Z",
                remitAddress1: "123 Walnut Street",
                remitAddress2: "Suite 900",
                remitCity: "Miami",
                remitState: "FL",
                remitZip: "31113",
                remitCountry: "US",
                payeeName1: "payeeName1",
                payeeName2: "payeeName2",
                customField1: "",
                customField2: "",
                customerVendorAccount: "123-456",
                InternalReferenceId: 1000000,
                additionalData: undefined,
                externalPaypointID: "Paypoint-100",
                StoredMethods: [],
            },
            CreatedAt: undefined,
            ParentOrgId: undefined,
            externalPaypointID: undefined,
            EntryName: undefined,
            BatchId: undefined,
            HasVcardTransactions: false,
            IsSameDayACH: false,
            ScheduleId: undefined,
            SettlementStatus: undefined,
            RiskFlagged: false,
            RiskFlaggedOn: undefined,
            RiskStatus: undefined,
            RiskReason: undefined,
            RiskAction: undefined,
            RiskActionCode: undefined,
        });
    });

    test("PayoutDetails (ed7692ad)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/MoneyOut/details/transId")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.moneyOut.payoutDetails("transId");
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("PayoutDetails (979d589d)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/MoneyOut/details/transId")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.moneyOut.payoutDetails("transId");
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("PayoutDetails (ca0cd689)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/MoneyOut/details/transId")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.moneyOut.payoutDetails("transId");
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("PayoutDetails (48553763)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .get("/MoneyOut/details/transId")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.moneyOut.payoutDetails("transId");
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("VCardGet (GetVCard)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            vcardSent: false,
            cardToken: "20231206142225226104",
            cardNumber: "553232XXXXXX3179",
            cvc: "XXX",
            expirationDate: "2025-05-01",
            status: undefined,
            amount: 120,
            currentBalance: 120,
            expenseLimit: 20,
            expenseLimitPeriod: undefined,
            maxNumberOfUses: 1,
            currentNumberOfUses: 0,
            exactAmount: true,
            mcc: undefined,
            tcc: undefined,
            misc1: undefined,
            misc2: undefined,
            dateCreated: "2023-12-06T20:25:31.077",
            dateModified: "2023-12-06T00:00:00",
            associatedVendor: {
                VendorNumber: "VENDOR123456",
                Name1: "Smith Industries",
                Name2: "John Smith",
                EIN: "12-3456789",
                Phone: "555-123-4567",
                Email: "contact@smithindustries.com",
                RemitEmail: undefined,
                Address1: "1234 Main Street",
                Address2: "Suite 200",
                City: "New York",
                State: "NY",
                Zip: "10001",
                Country: "USA",
                Mcc: "5411",
                LocationCode: undefined,
                Contacts: [
                    {
                        ContactName: "Herman Martinez",
                        ContactEmail: "herman@hermanscoatings.com",
                        ContactTitle: "Owner",
                        ContactPhone: "3055550000",
                    },
                ],
                BillingData: {
                    id: 123,
                    accountId: undefined,
                    nickname: "Checking Account",
                    bankName: "Chase Bank",
                    routingAccount: "021000021",
                    accountNumber: "3XXXXXX8888",
                    typeAccount: "Checking",
                    bankAccountHolderName: "Gruzya Adventure Outfitters LLC",
                    bankAccountHolderType: "Business",
                    bankAccountFunction: 0,
                    verified: true,
                    status: 1,
                    services: [],
                    default: true,
                },
                PaymentMethod: "vcard",
                VendorStatus: 1,
                VendorId: 339,
                EnrollmentStatus: undefined,
                Summary: {
                    ActiveBills: 1,
                    ActiveBillsAmount: 1.1,
                    ApprovedBills: 1,
                    ApprovedBillsAmount: 1.1,
                    DisapprovedBills: 1,
                    DisapprovedBillsAmount: 1.1,
                    InTransitBills: 0,
                    InTransitBillsAmount: 0,
                    OverdueBills: 1,
                    OverdueBillsAmount: 100,
                    PaidBills: 0,
                    PaidBillsAmount: 0,
                    PendingBills: 1,
                    PendingBillsAmount: 100,
                    TotalBills: 1,
                    TotalBillsAmount: 100,
                },
                PaypointLegalname: "Athlete Factory LLC",
                PaypointDbaname: "Athlete Factory LLC",
                PaypointEntryname: "PaypointEntryname",
                ParentOrgName: "HOA Manager Pro",
                ParentOrgId: 1232,
                CreatedDate: "2022-07-01T15:00:01Z",
                LastUpdated: "2022-07-01T15:00:01Z",
                remitAddress1: "123 Walnut Street",
                remitAddress2: "Suite 900",
                remitCity: "Miami",
                remitState: "FL",
                remitZip: "31113",
                remitCountry: "US",
                payeeName1: undefined,
                payeeName2: undefined,
                customField1: "customField1",
                customField2: "customField2",
                customerVendorAccount: undefined,
                InternalReferenceId: 27,
                additionalData: undefined,
                externalPaypointID: undefined,
                StoredMethods: undefined,
            },
            associatedCustomer: undefined,
            ParentOrgName: "HOA Manager Pro",
            PaypointDbaname: "Athlete Factory LLC",
            PaypointLegalname: "Athlete Factory LLC",
            PaypointEntryname: "47acde49",
            externalPaypointID: undefined,
        };
        server
            .mockEndpoint()
            .get("/MoneyOut/vcard/20230403315245421165")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.moneyOut.vCardGet("20230403315245421165");
        expect(response).toEqual({
            vcardSent: false,
            cardToken: "20231206142225226104",
            cardNumber: "553232XXXXXX3179",
            cvc: "XXX",
            expirationDate: "2025-05-01",
            status: undefined,
            amount: 120,
            currentBalance: 120,
            expenseLimit: 20,
            expenseLimitPeriod: undefined,
            maxNumberOfUses: 1,
            currentNumberOfUses: 0,
            exactAmount: true,
            mcc: undefined,
            tcc: undefined,
            misc1: undefined,
            misc2: undefined,
            dateCreated: "2023-12-06T20:25:31.077",
            dateModified: "2023-12-06T00:00:00",
            associatedVendor: {
                VendorNumber: "VENDOR123456",
                Name1: "Smith Industries",
                Name2: "John Smith",
                EIN: "12-3456789",
                Phone: "555-123-4567",
                Email: "contact@smithindustries.com",
                RemitEmail: undefined,
                Address1: "1234 Main Street",
                Address2: "Suite 200",
                City: "New York",
                State: "NY",
                Zip: "10001",
                Country: "USA",
                Mcc: "5411",
                LocationCode: undefined,
                Contacts: [
                    {
                        ContactName: "Herman Martinez",
                        ContactEmail: "herman@hermanscoatings.com",
                        ContactTitle: "Owner",
                        ContactPhone: "3055550000",
                    },
                ],
                BillingData: {
                    id: 123,
                    accountId: undefined,
                    nickname: "Checking Account",
                    bankName: "Chase Bank",
                    routingAccount: "021000021",
                    accountNumber: "3XXXXXX8888",
                    typeAccount: "Checking",
                    bankAccountHolderName: "Gruzya Adventure Outfitters LLC",
                    bankAccountHolderType: "Business",
                    bankAccountFunction: 0,
                    verified: true,
                    status: 1,
                    services: [],
                    default: true,
                },
                PaymentMethod: "vcard",
                VendorStatus: 1,
                VendorId: 339,
                EnrollmentStatus: undefined,
                Summary: {
                    ActiveBills: 1,
                    ActiveBillsAmount: 1.1,
                    ApprovedBills: 1,
                    ApprovedBillsAmount: 1.1,
                    DisapprovedBills: 1,
                    DisapprovedBillsAmount: 1.1,
                    InTransitBills: 0,
                    InTransitBillsAmount: 0,
                    OverdueBills: 1,
                    OverdueBillsAmount: 100,
                    PaidBills: 0,
                    PaidBillsAmount: 0,
                    PendingBills: 1,
                    PendingBillsAmount: 100,
                    TotalBills: 1,
                    TotalBillsAmount: 100,
                },
                PaypointLegalname: "Athlete Factory LLC",
                PaypointDbaname: "Athlete Factory LLC",
                PaypointEntryname: "PaypointEntryname",
                ParentOrgName: "HOA Manager Pro",
                ParentOrgId: 1232,
                CreatedDate: "2022-07-01T15:00:01Z",
                LastUpdated: "2022-07-01T15:00:01Z",
                remitAddress1: "123 Walnut Street",
                remitAddress2: "Suite 900",
                remitCity: "Miami",
                remitState: "FL",
                remitZip: "31113",
                remitCountry: "US",
                payeeName1: undefined,
                payeeName2: undefined,
                customField1: "customField1",
                customField2: "customField2",
                customerVendorAccount: undefined,
                InternalReferenceId: 27,
                additionalData: undefined,
                externalPaypointID: undefined,
                StoredMethods: undefined,
            },
            associatedCustomer: undefined,
            ParentOrgName: "HOA Manager Pro",
            PaypointDbaname: "Athlete Factory LLC",
            PaypointLegalname: "Athlete Factory LLC",
            PaypointEntryname: "47acde49",
            externalPaypointID: undefined,
        });
    });

    test("VCardGet (768afd6d)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/MoneyOut/vcard/cardToken")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.moneyOut.vCardGet("cardToken");
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("VCardGet (9928fb5d)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/MoneyOut/vcard/cardToken")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.moneyOut.vCardGet("cardToken");
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("VCardGet (1b8adb49)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/MoneyOut/vcard/cardToken")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.moneyOut.vCardGet("cardToken");
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("VCardGet (a9969ca3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .get("/MoneyOut/vcard/cardToken")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.moneyOut.vCardGet("cardToken");
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("SendVCardLink (SendVCardLink)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { transId: "01K33Z6YQZ6GD5QVKZ856MJBSC" };
        const rawResponseBody = { message: "Successfully sent email to: vendor@vendor.com", success: true };
        server
            .mockEndpoint()
            .post("/vcard/send-card-link")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.moneyOut.sendVCardLink({
            transId: "01K33Z6YQZ6GD5QVKZ856MJBSC",
        });
        expect(response).toEqual({
            message: "Successfully sent email to: vendor@vendor.com",
            success: true,
        });
    });

    test("SendVCardLink (1e8658c0)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { transId: "transId" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/vcard/send-card-link")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.moneyOut.sendVCardLink({
                transId: "transId",
            });
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("SendVCardLink (f1adf828)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { transId: "transId" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/vcard/send-card-link")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.moneyOut.sendVCardLink({
                transId: "transId",
            });
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("SendVCardLink (d43d803c)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { transId: "transId" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/vcard/send-card-link")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.moneyOut.sendVCardLink({
                transId: "transId",
            });
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("SendVCardLink (72583f02)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { transId: "transId" };
        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .post("/vcard/send-card-link")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.moneyOut.sendVCardLink({
                transId: "transId",
            });
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("GetCheckImage (GetCheckImage)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody =
            '%PDF-1.7\n%����\n123 0 obj\n<</Linearized 1/L 123456/O 125/E 78901/N 1/T 123450/H [ 800 200]>>\nendobj\n\n124 0 obj\n<</DecodeParms<</Columns 4/Predictor 12>>/Filter/FlateDecode/ID[<AB123C4567EF890123456789ABCDEF01><12345678ABCDEF9876543210FEDCBA98>]/Index[123 100]/Info 122 0 R/Length 128/Prev 123450/Root 125 0 R/Size 223/Type/XRef/W[1 3 1]>>stream\nh�bbd```b``�\n"x�a7�r�H~�����A�D���2����m�f��L`v6�H����D���J[@����H8�I��)0��q� XD��`��a���P�`�`��"�A$������r���p�$�Ip������a� �';
        server
            .mockEndpoint()
            .get("/MoneyOut/checkimage/check133832686289732320_01JKBNZ5P32JPTZY8XXXX000000.pdf")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.moneyOut.getCheckImage("check133832686289732320_01JKBNZ5P32JPTZY8XXXX000000.pdf");
        expect(response).toEqual(
            '%PDF-1.7\n%\uFFFD\uFFFD\uFFFD\uFFFD\n123 0 obj\n<</Linearized 1/L 123456/O 125/E 78901/N 1/T 123450/H [ 800 200]>>\nendobj\n\n124 0 obj\n<</DecodeParms<</Columns 4/Predictor 12>>/Filter/FlateDecode/ID[<AB123C4567EF890123456789ABCDEF01><12345678ABCDEF9876543210FEDCBA98>]/Index[123 100]/Info 122 0 R/Length 128/Prev 123450/Root 125 0 R/Size 223/Type/XRef/W[1 3 1]>>stream\nh\uFFFDbbd```b``\uFFFD\n"x\uFFFDa7\uFFFDr\uFFFDH~\uFFFD\uFFFD\uFFFD\uFFFD\uFFFDA\uFFFDD\uFFFD\uFFFD\uFFFD2\uFFFD\uFFFD\uFFFD\uFFFDm\uFFFDf\uFFFD\uFFFDL`v6\uFFFDH\uFFFD\uFFFD\uFFFD\uFFFDD\uFFFD\uFFFD\uFFFDJ[@\uFFFD\uFFFD\uFFFD\uFFFDH8\uFFFDI\uFFFD\uFFFD)0\uFFFD\uFFFDq\uFFFD XD\uFFFD\uFFFD`\uFFFD\uFFFDa\uFFFD\uFFFD\uFFFDP\uFFFD`\uFFFD`\uFFFD\uFFFD"\uFFFDA$\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFDr\uFFFD\uFFFD\uFFFDp\uFFFD$\uFFFDIp\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFDa\uFFFD \uFFFD',
        );
    });

    test("GetCheckImage (fdcc10b9)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/MoneyOut/checkimage/assetName")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.moneyOut.getCheckImage("assetName");
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("GetCheckImage (efe6b759)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/MoneyOut/checkimage/assetName")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.moneyOut.getCheckImage("assetName");
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("GetCheckImage (8ada5785)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/MoneyOut/checkimage/assetName")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.moneyOut.getCheckImage("assetName");
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("GetCheckImage (b41137f)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .get("/MoneyOut/checkimage/assetName")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.moneyOut.getCheckImage("assetName");
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });
});
