/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { PayabliClient } from "../../src/Client";
import * as Payabli from "../../src/api/index";

describe("Bill", () => {
    test("AddBill (CreateBill)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            billNumber: "ABC-123",
            netAmount: 3762.87,
            billDate: "2024-07-01",
            dueDate: "2024-07-01",
            comments: "Deposit for materials",
            billItems: [
                {
                    itemProductCode: "M-DEPOSIT",
                    itemProductName: "Materials deposit",
                    itemDescription: "Deposit for materials",
                    itemCommodityCode: "010",
                    itemUnitOfMeasure: "SqFt",
                    itemCost: 5,
                    itemQty: 1,
                    itemMode: 0,
                    itemCategories: ["deposits"],
                    itemTotalAmount: 123,
                    itemTaxAmount: 7,
                    itemTaxRate: 0.075,
                },
            ],
            mode: 0,
            accountingField1: "MyInternalId",
            vendor: { vendorNumber: "1234-A" },
            endDate: "2024-07-01",
            frequency: "monthly",
            terms: "NET30",
            status: -99,
            attachments: [{ ftype: "pdf", filename: "my-doc.pdf", furl: "https://mysite.com/my-doc.pdf" }],
        };
        const rawResponseBody = {
            responseCode: 1,
            pageIdentifier: undefined,
            roomId: 0,
            isSuccess: true,
            responseText: "Success",
            responseData: 6101,
        };
        server
            .mockEndpoint()
            .post("/Bill/single/8cfec329267")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.bill.addBill("8cfec329267", {
            body: {
                billNumber: "ABC-123",
                netAmount: 3762.87,
                billDate: "2024-07-01",
                dueDate: "2024-07-01",
                comments: "Deposit for materials",
                billItems: [
                    {
                        itemProductCode: "M-DEPOSIT",
                        itemProductName: "Materials deposit",
                        itemDescription: "Deposit for materials",
                        itemCommodityCode: "010",
                        itemUnitOfMeasure: "SqFt",
                        itemCost: 5,
                        itemQty: 1,
                        itemMode: 0,
                        itemCategories: ["deposits"],
                        itemTotalAmount: 123,
                        itemTaxAmount: 7,
                        itemTaxRate: 0.075,
                    },
                ],
                mode: 0,
                accountingField1: "MyInternalId",
                vendor: {
                    vendorNumber: "1234-A",
                },
                endDate: "2024-07-01",
                frequency: "monthly",
                terms: "NET30",
                status: -99,
                attachments: [
                    {
                        ftype: "pdf",
                        filename: "my-doc.pdf",
                        furl: "https://mysite.com/my-doc.pdf",
                    },
                ],
            },
        });
        expect(response).toEqual({
            responseCode: 1,
            pageIdentifier: undefined,
            roomId: 0,
            isSuccess: true,
            responseText: "Success",
            responseData: 6101,
        });
    });

    test("AddBill (1ba77b6c)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            accountingField1: undefined,
            accountingField2: undefined,
            additionalData: undefined,
            attachments: undefined,
            billDate: undefined,
            billItems: undefined,
            billNumber: undefined,
            comments: undefined,
            discount: undefined,
            dueDate: undefined,
            endDate: undefined,
            frequency: undefined,
            lotNumber: undefined,
            mode: undefined,
            netAmount: undefined,
            scheduledOptions: undefined,
            status: undefined,
            terms: undefined,
            totalAmount: undefined,
            vendor: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/Bill/single/entry")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.bill.addBill("entry", {
                body: {
                    accountingField1: undefined,
                    accountingField2: undefined,
                    additionalData: undefined,
                    attachments: undefined,
                    billDate: undefined,
                    billItems: undefined,
                    billNumber: undefined,
                    comments: undefined,
                    discount: undefined,
                    dueDate: undefined,
                    endDate: undefined,
                    frequency: undefined,
                    lotNumber: undefined,
                    mode: undefined,
                    netAmount: undefined,
                    scheduledOptions: undefined,
                    status: undefined,
                    terms: undefined,
                    totalAmount: undefined,
                    vendor: undefined,
                },
            });
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("AddBill (7284b674)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            accountingField1: undefined,
            accountingField2: undefined,
            additionalData: undefined,
            attachments: undefined,
            billDate: undefined,
            billItems: undefined,
            billNumber: undefined,
            comments: undefined,
            discount: undefined,
            dueDate: undefined,
            endDate: undefined,
            frequency: undefined,
            lotNumber: undefined,
            mode: undefined,
            netAmount: undefined,
            scheduledOptions: undefined,
            status: undefined,
            terms: undefined,
            totalAmount: undefined,
            vendor: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/Bill/single/entry")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.bill.addBill("entry", {
                body: {
                    accountingField1: undefined,
                    accountingField2: undefined,
                    additionalData: undefined,
                    attachments: undefined,
                    billDate: undefined,
                    billItems: undefined,
                    billNumber: undefined,
                    comments: undefined,
                    discount: undefined,
                    dueDate: undefined,
                    endDate: undefined,
                    frequency: undefined,
                    lotNumber: undefined,
                    mode: undefined,
                    netAmount: undefined,
                    scheduledOptions: undefined,
                    status: undefined,
                    terms: undefined,
                    totalAmount: undefined,
                    vendor: undefined,
                },
            });
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("AddBill (db6cd7e8)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            accountingField1: undefined,
            accountingField2: undefined,
            additionalData: undefined,
            attachments: undefined,
            billDate: undefined,
            billItems: undefined,
            billNumber: undefined,
            comments: undefined,
            discount: undefined,
            dueDate: undefined,
            endDate: undefined,
            frequency: undefined,
            lotNumber: undefined,
            mode: undefined,
            netAmount: undefined,
            scheduledOptions: undefined,
            status: undefined,
            terms: undefined,
            totalAmount: undefined,
            vendor: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/Bill/single/entry")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.bill.addBill("entry", {
                body: {
                    accountingField1: undefined,
                    accountingField2: undefined,
                    additionalData: undefined,
                    attachments: undefined,
                    billDate: undefined,
                    billItems: undefined,
                    billNumber: undefined,
                    comments: undefined,
                    discount: undefined,
                    dueDate: undefined,
                    endDate: undefined,
                    frequency: undefined,
                    lotNumber: undefined,
                    mode: undefined,
                    netAmount: undefined,
                    scheduledOptions: undefined,
                    status: undefined,
                    terms: undefined,
                    totalAmount: undefined,
                    vendor: undefined,
                },
            });
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("AddBill (d4a5d35e)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            accountingField1: undefined,
            accountingField2: undefined,
            additionalData: undefined,
            attachments: undefined,
            billDate: undefined,
            billItems: undefined,
            billNumber: undefined,
            comments: undefined,
            discount: undefined,
            dueDate: undefined,
            endDate: undefined,
            frequency: undefined,
            lotNumber: undefined,
            mode: undefined,
            netAmount: undefined,
            scheduledOptions: undefined,
            status: undefined,
            terms: undefined,
            totalAmount: undefined,
            vendor: undefined,
        };
        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .post("/Bill/single/entry")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.bill.addBill("entry", {
                body: {
                    accountingField1: undefined,
                    accountingField2: undefined,
                    additionalData: undefined,
                    attachments: undefined,
                    billDate: undefined,
                    billItems: undefined,
                    billNumber: undefined,
                    comments: undefined,
                    discount: undefined,
                    dueDate: undefined,
                    endDate: undefined,
                    frequency: undefined,
                    lotNumber: undefined,
                    mode: undefined,
                    netAmount: undefined,
                    scheduledOptions: undefined,
                    status: undefined,
                    terms: undefined,
                    totalAmount: undefined,
                    vendor: undefined,
                },
            });
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("deleteAttachedFromBill (DeleteAttachment)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            responseCode: 1,
            pageIdentifier: undefined,
            roomId: 0,
            isSuccess: true,
            responseText: "Success",
            responseData: 6101,
        };
        server
            .mockEndpoint()
            .delete("/Bill/attachedFileFromBill/285/0_Bill.pdf")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.bill.deleteAttachedFromBill("0_Bill.pdf", 285);
        expect(response).toEqual({
            responseCode: 1,
            pageIdentifier: undefined,
            roomId: 0,
            isSuccess: true,
            responseText: "Success",
            responseData: 6101,
        });
    });

    test("deleteAttachedFromBill (514ce5af)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/Bill/attachedFileFromBill/1/filename")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.bill.deleteAttachedFromBill("filename", 1);
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("deleteAttachedFromBill (51ec31bf)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/Bill/attachedFileFromBill/1/filename")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.bill.deleteAttachedFromBill("filename", 1);
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("deleteAttachedFromBill (e3c2c49b)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/Bill/attachedFileFromBill/1/filename")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.bill.deleteAttachedFromBill("filename", 1);
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("deleteAttachedFromBill (fac6aec1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .delete("/Bill/attachedFileFromBill/1/filename")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.bill.deleteAttachedFromBill("filename", 1);
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("DeleteBill (SuccessResponse)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            responseCode: 1,
            pageIdentifier: undefined,
            roomId: 0,
            isSuccess: true,
            responseText: "Success",
            responseData: 6101,
        };
        server.mockEndpoint().delete("/Bill/285").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.bill.deleteBill(285);
        expect(response).toEqual({
            responseCode: 1,
            pageIdentifier: undefined,
            roomId: 0,
            isSuccess: true,
            responseText: "Success",
            responseData: 6101,
        });
    });

    test("DeleteBill (153068af)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().delete("/Bill/1").respondWith().statusCode(400).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.bill.deleteBill(1);
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("DeleteBill (283674bf)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().delete("/Bill/1").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.bill.deleteBill(1);
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("DeleteBill (72e1279b)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().delete("/Bill/1").respondWith().statusCode(500).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.bill.deleteBill(1);
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("DeleteBill (7b8da9c1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server.mockEndpoint().delete("/Bill/1").respondWith().statusCode(503).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.bill.deleteBill(1);
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("EditBill (UpdateBill)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { netAmount: 3762.87, billDate: "2025-07-01" };
        const rawResponseBody = {
            responseCode: 1,
            pageIdentifier: undefined,
            roomId: 0,
            isSuccess: true,
            responseText: "Success",
            responseData: 6101,
        };
        server
            .mockEndpoint()
            .put("/Bill/285")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.bill.editBill(285, {
            netAmount: 3762.87,
            billDate: "2025-07-01",
        });
        expect(response).toEqual({
            responseCode: 1,
            pageIdentifier: undefined,
            roomId: 0,
            isSuccess: true,
            responseText: "Success",
            responseData: 6101,
        });
    });

    test("EditBill (f5f3b0e3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            accountingField1: undefined,
            accountingField2: undefined,
            additionalData: undefined,
            attachments: undefined,
            billDate: undefined,
            billItems: undefined,
            billNumber: undefined,
            comments: undefined,
            discount: undefined,
            dueDate: undefined,
            endDate: undefined,
            frequency: undefined,
            lotNumber: undefined,
            mode: undefined,
            netAmount: undefined,
            scheduledOptions: undefined,
            status: undefined,
            terms: undefined,
            totalAmount: undefined,
            vendor: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/Bill/1")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.bill.editBill(1, {
                accountingField1: undefined,
                accountingField2: undefined,
                additionalData: undefined,
                attachments: undefined,
                billDate: undefined,
                billItems: undefined,
                billNumber: undefined,
                comments: undefined,
                discount: undefined,
                dueDate: undefined,
                endDate: undefined,
                frequency: undefined,
                lotNumber: undefined,
                mode: undefined,
                netAmount: undefined,
                scheduledOptions: undefined,
                status: undefined,
                terms: undefined,
                totalAmount: undefined,
                vendor: undefined,
            });
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("EditBill (2cf0bff3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            accountingField1: undefined,
            accountingField2: undefined,
            additionalData: undefined,
            attachments: undefined,
            billDate: undefined,
            billItems: undefined,
            billNumber: undefined,
            comments: undefined,
            discount: undefined,
            dueDate: undefined,
            endDate: undefined,
            frequency: undefined,
            lotNumber: undefined,
            mode: undefined,
            netAmount: undefined,
            scheduledOptions: undefined,
            status: undefined,
            terms: undefined,
            totalAmount: undefined,
            vendor: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/Bill/1")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.bill.editBill(1, {
                accountingField1: undefined,
                accountingField2: undefined,
                additionalData: undefined,
                attachments: undefined,
                billDate: undefined,
                billItems: undefined,
                billNumber: undefined,
                comments: undefined,
                discount: undefined,
                dueDate: undefined,
                endDate: undefined,
                frequency: undefined,
                lotNumber: undefined,
                mode: undefined,
                netAmount: undefined,
                scheduledOptions: undefined,
                status: undefined,
                terms: undefined,
                totalAmount: undefined,
                vendor: undefined,
            });
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("EditBill (6220ee3f)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            accountingField1: undefined,
            accountingField2: undefined,
            additionalData: undefined,
            attachments: undefined,
            billDate: undefined,
            billItems: undefined,
            billNumber: undefined,
            comments: undefined,
            discount: undefined,
            dueDate: undefined,
            endDate: undefined,
            frequency: undefined,
            lotNumber: undefined,
            mode: undefined,
            netAmount: undefined,
            scheduledOptions: undefined,
            status: undefined,
            terms: undefined,
            totalAmount: undefined,
            vendor: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/Bill/1")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.bill.editBill(1, {
                accountingField1: undefined,
                accountingField2: undefined,
                additionalData: undefined,
                attachments: undefined,
                billDate: undefined,
                billItems: undefined,
                billNumber: undefined,
                comments: undefined,
                discount: undefined,
                dueDate: undefined,
                endDate: undefined,
                frequency: undefined,
                lotNumber: undefined,
                mode: undefined,
                netAmount: undefined,
                scheduledOptions: undefined,
                status: undefined,
                terms: undefined,
                totalAmount: undefined,
                vendor: undefined,
            });
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("EditBill (f70e9cc5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            accountingField1: undefined,
            accountingField2: undefined,
            additionalData: undefined,
            attachments: undefined,
            billDate: undefined,
            billItems: undefined,
            billNumber: undefined,
            comments: undefined,
            discount: undefined,
            dueDate: undefined,
            endDate: undefined,
            frequency: undefined,
            lotNumber: undefined,
            mode: undefined,
            netAmount: undefined,
            scheduledOptions: undefined,
            status: undefined,
            terms: undefined,
            totalAmount: undefined,
            vendor: undefined,
        };
        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .put("/Bill/1")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.bill.editBill(1, {
                accountingField1: undefined,
                accountingField2: undefined,
                additionalData: undefined,
                attachments: undefined,
                billDate: undefined,
                billItems: undefined,
                billNumber: undefined,
                comments: undefined,
                discount: undefined,
                dueDate: undefined,
                endDate: undefined,
                frequency: undefined,
                lotNumber: undefined,
                mode: undefined,
                netAmount: undefined,
                scheduledOptions: undefined,
                status: undefined,
                terms: undefined,
                totalAmount: undefined,
                vendor: undefined,
            });
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("getAttachedFromBill (GetAttachedFile)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            fContent: "TXkgdGVzdCBmaWxlHJ==...",
            filename: "my-doc.pdf",
            ftype: "pdf",
            furl: "https://mysite.com/my-doc.pdf",
        };
        server
            .mockEndpoint()
            .get("/Bill/attachedFileFromBill/285/0_Bill.pdf")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.bill.getAttachedFromBill("0_Bill.pdf", 285, {
            returnObject: true,
        });
        expect(response).toEqual({
            fContent: "TXkgdGVzdCBmaWxlHJ==...",
            filename: "my-doc.pdf",
            ftype: "pdf",
            furl: "https://mysite.com/my-doc.pdf",
        });
    });

    test("getAttachedFromBill (514ce5af)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Bill/attachedFileFromBill/1/filename")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.bill.getAttachedFromBill("filename", 1);
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("getAttachedFromBill (51ec31bf)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Bill/attachedFileFromBill/1/filename")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.bill.getAttachedFromBill("filename", 1);
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("getAttachedFromBill (e3c2c49b)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Bill/attachedFileFromBill/1/filename")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.bill.getAttachedFromBill("filename", 1);
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("getAttachedFromBill (fac6aec1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .get("/Bill/attachedFileFromBill/1/filename")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.bill.getAttachedFromBill("filename", 1);
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("GetBill (GetBillbyId)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            responseCode: 1,
            pageIdentifier: undefined,
            roomId: 0,
            isSuccess: true,
            responseText: "Success",
            responseData: {
                IdBill: 285,
                BillNumber: "ABC-123",
                NetAmount: 100,
                Discount: undefined,
                TotalAmount: 100,
                BillDate: "2025-07-01",
                DueDate: "2025-07-01",
                Comments: "Deposit for materials",
                BatchNumber: undefined,
                BillItems: [
                    {
                        itemTotalAmount: 123,
                        itemTaxAmount: 7,
                        itemTaxRate: 0.075,
                        itemProductCode: "M-DEPOSIT",
                        itemProductName: "Materials deposit",
                        itemDescription: "Deposit for materials.",
                        itemCommodityCode: "010",
                        itemUnitOfMeasure: "SqFt",
                        itemCost: 5,
                        itemQty: 1,
                        itemMode: 0,
                        itemCategories: undefined,
                    },
                ],
                Mode: 0,
                PaymentMethod: undefined,
                PaymentId: undefined,
                AccountingField1: "MyInternalId",
                AccountingField2: "MyInternalId",
                Terms: undefined,
                Source: undefined,
                AdditionalData: undefined,
                Vendor: {
                    VendorNumber: "1234",
                    Name1: "Herman's Coatings and Masonry",
                    Name2: "",
                    EIN: "XXXX6789",
                    Phone: "5555555555",
                    Email: "contact@hermanscoatings.com",
                    RemitEmail: undefined,
                    Address1: "123 Ocean Drive",
                    Address2: "Suite 400",
                    City: "Miami",
                    State: "FL",
                    Zip: "33139",
                    Country: "US",
                    Mcc: "7777",
                    LocationCode: "MIA123",
                    Contacts: [
                        {
                            ContactName: "Herman Martinez",
                            ContactEmail: "herman@hermanscoatings.com",
                            ContactTitle: "Owner",
                            ContactPhone: "3055550000",
                        },
                    ],
                    BillingData: {
                        id: 123,
                        accountId: undefined,
                        nickname: "Checking Account",
                        bankName: "Country Bank",
                        routingAccount: "123123123",
                        accountNumber: "1XXXXXX3123",
                        typeAccount: "Checking",
                        bankAccountHolderName: "Gruzya Adventure Outfitters LLC",
                        bankAccountHolderType: "Business",
                        bankAccountFunction: 0,
                        verified: true,
                        status: 1,
                        services: [],
                        default: true,
                    },
                    PaymentMethod: "vcard",
                    VendorStatus: 1,
                    VendorId: 1234,
                    EnrollmentStatus: undefined,
                    Summary: {
                        ActiveBills: 5,
                        PendingBills: 2,
                        InTransitBills: 1,
                        PaidBills: 10,
                        OverdueBills: 0,
                        ApprovedBills: 3,
                        DisapprovedBills: 0,
                        TotalBills: 21,
                        ActiveBillsAmount: 1500,
                        PendingBillsAmount: 500,
                        InTransitBillsAmount: 200,
                        PaidBillsAmount: 3000,
                        OverdueBillsAmount: 0,
                        ApprovedBillsAmount: 800,
                        DisapprovedBillsAmount: 0,
                        TotalBillsAmount: 6000,
                    },
                    PaypointLegalname: "Gruzya Adventure Outfitters LLC",
                    PaypointDbaname: "Gruzya Adventure Outfitters",
                    PaypointEntryname: "41035afaa7",
                    ParentOrgName: "Pilgrim Planner",
                    ParentOrgId: 1232,
                    CreatedDate: "2022-07-01T15:00:01Z",
                    LastUpdated: "2022-07-01T15:00:01Z",
                    remitAddress1: "123 Walnut Street",
                    remitAddress2: "Suite 900",
                    remitCity: "Miami",
                    remitState: "FL",
                    remitZip: "31113",
                    remitCountry: "US",
                    payeeName1: "Herman Martinez",
                    payeeName2: "",
                    customField1: "",
                    customField2: "",
                    customerVendorAccount: "A-37622",
                    InternalReferenceId: 123,
                    additionalData: {
                        customField: "Custom Value 1",
                        reference: "REF-12345",
                        notes: "Additional vendor information",
                    },
                    externalPaypointID: "ext123",
                    StoredMethods: [],
                },
                Status: -99,
                CreatedAt: "2025-07-01T15:00:01Z",
                EndDate: undefined,
                LastUpdated: "2025-07-01T15:00:01Z",
                Frequency: undefined,
                billEvents: [
                    {
                        description: "Created Bill",
                        eventTime: "2025-07-01T15:00:01Z",
                        refData: "REF-12345",
                        extraData: undefined,
                        source: "API",
                    },
                ],
                billApprovals: undefined,
                PaypointLegalname: "Gruzya Adventure Outfitters LLC",
                PaypointDbaname: "Gruzya Adventure Outfitters",
                ParentOrgId: 1232,
                ParentOrgName: "Pilgrim Planner",
                PaypointEntryname: "41035afaa7",
                paylinkId: undefined,
                DocumentsRef: {
                    zipfile: "documents_285.zip",
                    filelist: [
                        { originalName: "invoice.pdf", zipName: "0_invoice.pdf", descriptor: "Invoice document" },
                    ],
                },
                externalPaypointID: undefined,
                LotNumber: "LOT-285",
                EntityID: undefined,
            },
        };
        server.mockEndpoint().get("/Bill/285").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.bill.getBill(285);
        expect(response).toEqual({
            responseCode: 1,
            pageIdentifier: undefined,
            roomId: 0,
            isSuccess: true,
            responseText: "Success",
            responseData: {
                IdBill: 285,
                BillNumber: "ABC-123",
                NetAmount: 100,
                Discount: undefined,
                TotalAmount: 100,
                BillDate: "2025-07-01",
                DueDate: "2025-07-01",
                Comments: "Deposit for materials",
                BatchNumber: undefined,
                BillItems: [
                    {
                        itemTotalAmount: 123,
                        itemTaxAmount: 7,
                        itemTaxRate: 0.075,
                        itemProductCode: "M-DEPOSIT",
                        itemProductName: "Materials deposit",
                        itemDescription: "Deposit for materials.",
                        itemCommodityCode: "010",
                        itemUnitOfMeasure: "SqFt",
                        itemCost: 5,
                        itemQty: 1,
                        itemMode: 0,
                        itemCategories: undefined,
                    },
                ],
                Mode: 0,
                PaymentMethod: undefined,
                PaymentId: undefined,
                AccountingField1: "MyInternalId",
                AccountingField2: "MyInternalId",
                Terms: undefined,
                Source: undefined,
                AdditionalData: undefined,
                Vendor: {
                    VendorNumber: "1234",
                    Name1: "Herman's Coatings and Masonry",
                    Name2: "",
                    EIN: "XXXX6789",
                    Phone: "5555555555",
                    Email: "contact@hermanscoatings.com",
                    RemitEmail: undefined,
                    Address1: "123 Ocean Drive",
                    Address2: "Suite 400",
                    City: "Miami",
                    State: "FL",
                    Zip: "33139",
                    Country: "US",
                    Mcc: "7777",
                    LocationCode: "MIA123",
                    Contacts: [
                        {
                            ContactName: "Herman Martinez",
                            ContactEmail: "herman@hermanscoatings.com",
                            ContactTitle: "Owner",
                            ContactPhone: "3055550000",
                        },
                    ],
                    BillingData: {
                        id: 123,
                        accountId: undefined,
                        nickname: "Checking Account",
                        bankName: "Country Bank",
                        routingAccount: "123123123",
                        accountNumber: "1XXXXXX3123",
                        typeAccount: "Checking",
                        bankAccountHolderName: "Gruzya Adventure Outfitters LLC",
                        bankAccountHolderType: "Business",
                        bankAccountFunction: 0,
                        verified: true,
                        status: 1,
                        services: [],
                        default: true,
                    },
                    PaymentMethod: "vcard",
                    VendorStatus: 1,
                    VendorId: 1234,
                    EnrollmentStatus: undefined,
                    Summary: {
                        ActiveBills: 5,
                        PendingBills: 2,
                        InTransitBills: 1,
                        PaidBills: 10,
                        OverdueBills: 0,
                        ApprovedBills: 3,
                        DisapprovedBills: 0,
                        TotalBills: 21,
                        ActiveBillsAmount: 1500,
                        PendingBillsAmount: 500,
                        InTransitBillsAmount: 200,
                        PaidBillsAmount: 3000,
                        OverdueBillsAmount: 0,
                        ApprovedBillsAmount: 800,
                        DisapprovedBillsAmount: 0,
                        TotalBillsAmount: 6000,
                    },
                    PaypointLegalname: "Gruzya Adventure Outfitters LLC",
                    PaypointDbaname: "Gruzya Adventure Outfitters",
                    PaypointEntryname: "41035afaa7",
                    ParentOrgName: "Pilgrim Planner",
                    ParentOrgId: 1232,
                    CreatedDate: "2022-07-01T15:00:01Z",
                    LastUpdated: "2022-07-01T15:00:01Z",
                    remitAddress1: "123 Walnut Street",
                    remitAddress2: "Suite 900",
                    remitCity: "Miami",
                    remitState: "FL",
                    remitZip: "31113",
                    remitCountry: "US",
                    payeeName1: "Herman Martinez",
                    payeeName2: "",
                    customField1: "",
                    customField2: "",
                    customerVendorAccount: "A-37622",
                    InternalReferenceId: 123,
                    additionalData: {
                        customField: "Custom Value 1",
                        reference: "REF-12345",
                        notes: "Additional vendor information",
                    },
                    externalPaypointID: "ext123",
                    StoredMethods: [],
                },
                Status: -99,
                CreatedAt: "2025-07-01T15:00:01Z",
                EndDate: undefined,
                LastUpdated: "2025-07-01T15:00:01Z",
                Frequency: undefined,
                billEvents: [
                    {
                        description: "Created Bill",
                        eventTime: "2025-07-01T15:00:01Z",
                        refData: "REF-12345",
                        extraData: undefined,
                        source: "API",
                    },
                ],
                billApprovals: undefined,
                PaypointLegalname: "Gruzya Adventure Outfitters LLC",
                PaypointDbaname: "Gruzya Adventure Outfitters",
                ParentOrgId: 1232,
                ParentOrgName: "Pilgrim Planner",
                PaypointEntryname: "41035afaa7",
                paylinkId: undefined,
                DocumentsRef: {
                    zipfile: "documents_285.zip",
                    filelist: [
                        {
                            originalName: "invoice.pdf",
                            zipName: "0_invoice.pdf",
                            descriptor: "Invoice document",
                        },
                    ],
                },
                externalPaypointID: undefined,
                LotNumber: "LOT-285",
                EntityID: undefined,
            },
        });
    });

    test("GetBill (153068af)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/Bill/1").respondWith().statusCode(400).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.bill.getBill(1);
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("GetBill (283674bf)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/Bill/1").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.bill.getBill(1);
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("GetBill (72e1279b)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/Bill/1").respondWith().statusCode(500).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.bill.getBill(1);
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("GetBill (7b8da9c1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server.mockEndpoint().get("/Bill/1").respondWith().statusCode(503).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.bill.getBill(1);
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("ListBills (ListBillsEntry)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            Summary: {
                pageidentifier: undefined,
                pageSize: 20,
                total2approval: 1,
                totalactive: 1,
                totalAmount: 1.1,
                totalamount2approval: 1.1,
                totalamountactive: 1.1,
                totalamountapproved: 1.1,
                totalamountcancel: 1.1,
                totalamountdisapproved: 1.1,
                totalamountintransit: 1.1,
                totalamountoverdue: 1.1,
                totalamountpaid: 1.1,
                totalamountsent2approval: 1.1,
                totalapproved: 1,
                totalcancel: 1,
                totaldisapproved: 1,
                totalintransit: 1,
                totaloverdue: 1,
                totalPages: 1,
                totalpaid: 1,
                totalRecords: 2,
                totalsent2approval: 1,
            },
            Records: [
                {
                    AdditionalData: null,
                    billApprovals: [
                        { approved: 0, approvedTime: "2024-03-13T15:54:27Z", email: "lisandra@example.com", Id: 34 },
                        { approved: 0, approvedTime: "2024-03-13T15:54:27Z", email: "jccastillo@example.com", Id: 293 },
                    ],
                    BillDate: "2025-03-10",
                    billEvents: [
                        {
                            description: "Created Bill",
                            eventTime: "2024-03-13T15:54:26Z",
                            refData: "00-45e1c2d8b53b72fafc4082f374e68753-ffea4ba4c2ce63ce-00",
                        },
                        {
                            description: "Sent to Approval",
                            eventTime: "2024-03-13T15:54:28Z",
                            refData: "00-086a951822211bc2eb1803ed64db9d4f-0f07e0e8c394e481-00",
                        },
                    ],
                    BillItems: [
                        {
                            itemCommodityCode: "Commod-MI-2024031926",
                            itemCost: 200,
                            itemDescription: "Consultation price",
                            itemMode: 0,
                            itemProductCode: "Prod-MI-2024031926",
                            itemProductName: "Consultation",
                            itemQty: 1,
                            itemTaxAmount: 0,
                            itemTaxRate: 0,
                            itemTotalAmount: 200,
                            itemUnitOfMeasure: "per each",
                        },
                    ],
                    BillNumber: "MI-bill-2024031926",
                    Comments: "PAYBILL",
                    CreatedAt: "2024-03-13T15:54:26Z",
                    Discount: 0,
                    DocumentsRef: null,
                    DueDate: "2025-03-10",
                    EndDate: null,
                    EntityID: null,
                    externalPaypointID: "micasa-10",
                    Frequency: "one-time",
                    IdBill: 6104,
                    LastUpdated: "2024-03-13T10:54:26Z",
                    LotNumber: "LOT123",
                    Mode: 0,
                    NetAmount: 200,
                    ParentOrgId: 1001,
                    ParentOrgName: "Fitness Hub",
                    PaymentId: null,
                    PaymentMethod: null,
                    paylinkId: null,
                    PaypointDbaname: "MiCasa Sports",
                    PaypointEntryname: "micasa",
                    PaypointLegalname: "MiCasa Sports LLC",
                    Source: "web",
                    Status: 2,
                    Terms: "Net30",
                    TotalAmount: 200,
                    Transaction: null,
                    Vendor: {
                        Address1: "1234 Liberdad St.",
                        Address2: "Suite 100",
                        BillingData: {
                            accountNumber: "12345XXXX",
                            bankAccountFunction: 0,
                            bankAccountHolderName: "Elena Gomez",
                            bankAccountHolderType: "Business",
                            bankName: "Michigan Savings Bank",
                            id: 0,
                            routingAccount: "072000326",
                            typeAccount: "Checking",
                        },
                        City: "Detroit",
                        Country: "US",
                        EIN: "XXXXX6789",
                        Email: "elenag@industriesexample.com",
                        InternalReferenceId: 1215,
                        Mcc: "700",
                        Name1: "Gomez-Radulescu Industries",
                        Name2: "Elena",
                        Phone: "517-555-0123",
                        State: "MI",
                        VendorId: 8723,
                        VendorNumber: "MI-vendor-2024031926",
                        VendorStatus: 1,
                        Zip: "48201",
                    },
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/Query/bills/8cfec329267")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.bill.listBills("8cfec329267", {
            fromRecord: 251,
            limitRecord: 0,
            sortBy: "desc(field_name)",
        });
        expect(response).toEqual({
            Summary: {
                pageidentifier: undefined,
                pageSize: 20,
                total2approval: 1,
                totalactive: 1,
                totalAmount: 1.1,
                totalamount2approval: 1.1,
                totalamountactive: 1.1,
                totalamountapproved: 1.1,
                totalamountcancel: 1.1,
                totalamountdisapproved: 1.1,
                totalamountintransit: 1.1,
                totalamountoverdue: 1.1,
                totalamountpaid: 1.1,
                totalamountsent2approval: 1.1,
                totalapproved: 1,
                totalcancel: 1,
                totaldisapproved: 1,
                totalintransit: 1,
                totaloverdue: 1,
                totalPages: 1,
                totalpaid: 1,
                totalRecords: 2,
                totalsent2approval: 1,
            },
            Records: [
                {
                    AdditionalData: null,
                    billApprovals: [
                        {
                            approved: 0,
                            approvedTime: "2024-03-13T15:54:27Z",
                            email: "lisandra@example.com",
                            Id: 34,
                        },
                        {
                            approved: 0,
                            approvedTime: "2024-03-13T15:54:27Z",
                            email: "jccastillo@example.com",
                            Id: 293,
                        },
                    ],
                    BillDate: "2025-03-10",
                    billEvents: [
                        {
                            description: "Created Bill",
                            eventTime: "2024-03-13T15:54:26Z",
                            refData: "00-45e1c2d8b53b72fafc4082f374e68753-ffea4ba4c2ce63ce-00",
                        },
                        {
                            description: "Sent to Approval",
                            eventTime: "2024-03-13T15:54:28Z",
                            refData: "00-086a951822211bc2eb1803ed64db9d4f-0f07e0e8c394e481-00",
                        },
                    ],
                    BillItems: [
                        {
                            itemCommodityCode: "Commod-MI-2024031926",
                            itemCost: 200,
                            itemDescription: "Consultation price",
                            itemMode: 0,
                            itemProductCode: "Prod-MI-2024031926",
                            itemProductName: "Consultation",
                            itemQty: 1,
                            itemTaxAmount: 0,
                            itemTaxRate: 0,
                            itemTotalAmount: 200,
                            itemUnitOfMeasure: "per each",
                        },
                    ],
                    BillNumber: "MI-bill-2024031926",
                    Comments: "PAYBILL",
                    CreatedAt: "2024-03-13T15:54:26Z",
                    Discount: 0,
                    DocumentsRef: null,
                    DueDate: "2025-03-10",
                    EndDate: null,
                    EntityID: null,
                    externalPaypointID: "micasa-10",
                    Frequency: "one-time",
                    IdBill: 6104,
                    LastUpdated: "2024-03-13T10:54:26Z",
                    LotNumber: "LOT123",
                    Mode: 0,
                    NetAmount: 200,
                    ParentOrgId: 1001,
                    ParentOrgName: "Fitness Hub",
                    PaymentId: null,
                    PaymentMethod: null,
                    paylinkId: null,
                    PaypointDbaname: "MiCasa Sports",
                    PaypointEntryname: "micasa",
                    PaypointLegalname: "MiCasa Sports LLC",
                    Source: "web",
                    Status: 2,
                    Terms: "Net30",
                    TotalAmount: 200,
                    Transaction: null,
                    Vendor: {
                        Address1: "1234 Liberdad St.",
                        Address2: "Suite 100",
                        BillingData: {
                            accountNumber: "12345XXXX",
                            bankAccountFunction: 0,
                            bankAccountHolderName: "Elena Gomez",
                            bankAccountHolderType: "Business",
                            bankName: "Michigan Savings Bank",
                            id: 0,
                            routingAccount: "072000326",
                            typeAccount: "Checking",
                        },
                        City: "Detroit",
                        Country: "US",
                        EIN: "XXXXX6789",
                        Email: "elenag@industriesexample.com",
                        InternalReferenceId: 1215,
                        Mcc: "700",
                        Name1: "Gomez-Radulescu Industries",
                        Name2: "Elena",
                        Phone: "517-555-0123",
                        State: "MI",
                        VendorId: 8723,
                        VendorNumber: "MI-vendor-2024031926",
                        VendorStatus: 1,
                        Zip: "48201",
                    },
                },
            ],
        });
    });

    test("ListBills (344ea1c4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/Query/bills/entry").respondWith().statusCode(400).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.bill.listBills("entry");
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("ListBills (a17d02ec)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/Query/bills/entry").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.bill.listBills("entry");
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("ListBills (93e82fa0)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/Query/bills/entry").respondWith().statusCode(500).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.bill.listBills("entry");
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("ListBills (15f0f426)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server.mockEndpoint().get("/Query/bills/entry").respondWith().statusCode(503).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.bill.listBills("entry");
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("ListBillsOrg (ListBillsOrg)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            Summary: {
                pageidentifier: undefined,
                pageSize: 20,
                total2approval: 1,
                totalactive: 1,
                totalAmount: 1.1,
                totalamount2approval: 1.1,
                totalamountactive: 1.1,
                totalamountapproved: 1.1,
                totalamountcancel: 1.1,
                totalamountdisapproved: 1.1,
                totalamountintransit: 1.1,
                totalamountoverdue: 1.1,
                totalamountpaid: 1.1,
                totalamountsent2approval: 1.1,
                totalapproved: 1,
                totalcancel: 1,
                totaldisapproved: 1,
                totalintransit: 1,
                totaloverdue: 1,
                totalPages: 1,
                totalpaid: 1,
                totalRecords: 2,
                totalsent2approval: 1,
            },
            Records: [
                {
                    AdditionalData: null,
                    billApprovals: [
                        { approved: 0, approvedTime: "2024-03-13T15:54:27Z", email: "lisandra@example.com", Id: 34 },
                        { approved: 0, approvedTime: "2024-03-13T15:54:27Z", email: "jccastillo@example.com", Id: 293 },
                    ],
                    BillDate: "2025-03-10",
                    billEvents: [
                        {
                            description: "Created Bill",
                            eventTime: "2024-03-13T15:54:26Z",
                            refData: "00-45e1c2d8b53b72fafc4082f374e68753-ffea4ba4c2ce63ce-00",
                        },
                        {
                            description: "Sent to Approval",
                            eventTime: "2024-03-13T15:54:28Z",
                            refData: "00-086a951822211bc2eb1803ed64db9d4f-0f07e0e8c394e481-00",
                        },
                    ],
                    BillItems: [
                        {
                            itemCommodityCode: "Commod-MI-2024031926",
                            itemCost: 200,
                            itemDescription: "Consultation price",
                            itemMode: 0,
                            itemProductCode: "Prod-MI-2024031926",
                            itemProductName: "Consultation",
                            itemQty: 1,
                            itemTaxAmount: 0,
                            itemTaxRate: 0,
                            itemTotalAmount: 200,
                            itemUnitOfMeasure: "per each",
                        },
                    ],
                    BillNumber: "MI-bill-2024031926",
                    Comments: "PAYBILL",
                    CreatedAt: "2024-03-13T15:54:26Z",
                    Discount: 0,
                    DocumentsRef: null,
                    DueDate: "2025-03-10",
                    EndDate: null,
                    EntityID: null,
                    externalPaypointID: "micasa-10",
                    Frequency: "one-time",
                    IdBill: 6104,
                    LastUpdated: "2024-03-13T10:54:26Z",
                    LotNumber: "LOT123",
                    Mode: 0,
                    NetAmount: 200,
                    ParentOrgId: 1001,
                    ParentOrgName: "Fitness Hub",
                    PaymentId: null,
                    PaymentMethod: null,
                    paylinkId: null,
                    PaypointDbaname: "MiCasa Sports",
                    PaypointEntryname: "micasa",
                    PaypointLegalname: "MiCasa Sports LLC",
                    Source: "web",
                    Status: 2,
                    Terms: "Net30",
                    TotalAmount: 200,
                    Transaction: null,
                    Vendor: {
                        Address1: "1234 Liberdad St.",
                        Address2: "Suite 100",
                        BillingData: {
                            accountNumber: "12345XXXX",
                            bankAccountFunction: 0,
                            bankAccountHolderName: "Elena Gomez",
                            bankAccountHolderType: "Business",
                            bankName: "Michigan Savings Bank",
                            id: 0,
                            routingAccount: "072000326",
                            typeAccount: "Checking",
                        },
                        City: "Detroit",
                        Country: "US",
                        EIN: "XXXXX6789",
                        Email: "elenag@industriesexample.com",
                        InternalReferenceId: 1215,
                        Mcc: "700",
                        Name1: "Gomez-Radulescu Industries",
                        Name2: "Elena",
                        Phone: "517-555-0123",
                        State: "MI",
                        VendorId: 8723,
                        VendorNumber: "MI-vendor-2024031926",
                        VendorStatus: 1,
                        Zip: "48201",
                    },
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/Query/bills/org/123")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.bill.listBillsOrg(123, {
            fromRecord: 251,
            limitRecord: 0,
            sortBy: "desc(field_name)",
        });
        expect(response).toEqual({
            Summary: {
                pageidentifier: undefined,
                pageSize: 20,
                total2approval: 1,
                totalactive: 1,
                totalAmount: 1.1,
                totalamount2approval: 1.1,
                totalamountactive: 1.1,
                totalamountapproved: 1.1,
                totalamountcancel: 1.1,
                totalamountdisapproved: 1.1,
                totalamountintransit: 1.1,
                totalamountoverdue: 1.1,
                totalamountpaid: 1.1,
                totalamountsent2approval: 1.1,
                totalapproved: 1,
                totalcancel: 1,
                totaldisapproved: 1,
                totalintransit: 1,
                totaloverdue: 1,
                totalPages: 1,
                totalpaid: 1,
                totalRecords: 2,
                totalsent2approval: 1,
            },
            Records: [
                {
                    AdditionalData: null,
                    billApprovals: [
                        {
                            approved: 0,
                            approvedTime: "2024-03-13T15:54:27Z",
                            email: "lisandra@example.com",
                            Id: 34,
                        },
                        {
                            approved: 0,
                            approvedTime: "2024-03-13T15:54:27Z",
                            email: "jccastillo@example.com",
                            Id: 293,
                        },
                    ],
                    BillDate: "2025-03-10",
                    billEvents: [
                        {
                            description: "Created Bill",
                            eventTime: "2024-03-13T15:54:26Z",
                            refData: "00-45e1c2d8b53b72fafc4082f374e68753-ffea4ba4c2ce63ce-00",
                        },
                        {
                            description: "Sent to Approval",
                            eventTime: "2024-03-13T15:54:28Z",
                            refData: "00-086a951822211bc2eb1803ed64db9d4f-0f07e0e8c394e481-00",
                        },
                    ],
                    BillItems: [
                        {
                            itemCommodityCode: "Commod-MI-2024031926",
                            itemCost: 200,
                            itemDescription: "Consultation price",
                            itemMode: 0,
                            itemProductCode: "Prod-MI-2024031926",
                            itemProductName: "Consultation",
                            itemQty: 1,
                            itemTaxAmount: 0,
                            itemTaxRate: 0,
                            itemTotalAmount: 200,
                            itemUnitOfMeasure: "per each",
                        },
                    ],
                    BillNumber: "MI-bill-2024031926",
                    Comments: "PAYBILL",
                    CreatedAt: "2024-03-13T15:54:26Z",
                    Discount: 0,
                    DocumentsRef: null,
                    DueDate: "2025-03-10",
                    EndDate: null,
                    EntityID: null,
                    externalPaypointID: "micasa-10",
                    Frequency: "one-time",
                    IdBill: 6104,
                    LastUpdated: "2024-03-13T10:54:26Z",
                    LotNumber: "LOT123",
                    Mode: 0,
                    NetAmount: 200,
                    ParentOrgId: 1001,
                    ParentOrgName: "Fitness Hub",
                    PaymentId: null,
                    PaymentMethod: null,
                    paylinkId: null,
                    PaypointDbaname: "MiCasa Sports",
                    PaypointEntryname: "micasa",
                    PaypointLegalname: "MiCasa Sports LLC",
                    Source: "web",
                    Status: 2,
                    Terms: "Net30",
                    TotalAmount: 200,
                    Transaction: null,
                    Vendor: {
                        Address1: "1234 Liberdad St.",
                        Address2: "Suite 100",
                        BillingData: {
                            accountNumber: "12345XXXX",
                            bankAccountFunction: 0,
                            bankAccountHolderName: "Elena Gomez",
                            bankAccountHolderType: "Business",
                            bankName: "Michigan Savings Bank",
                            id: 0,
                            routingAccount: "072000326",
                            typeAccount: "Checking",
                        },
                        City: "Detroit",
                        Country: "US",
                        EIN: "XXXXX6789",
                        Email: "elenag@industriesexample.com",
                        InternalReferenceId: 1215,
                        Mcc: "700",
                        Name1: "Gomez-Radulescu Industries",
                        Name2: "Elena",
                        Phone: "517-555-0123",
                        State: "MI",
                        VendorId: 8723,
                        VendorNumber: "MI-vendor-2024031926",
                        VendorStatus: 1,
                        Zip: "48201",
                    },
                },
            ],
        });
    });

    test("ListBillsOrg (fdb69624)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/Query/bills/org/1").respondWith().statusCode(400).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.bill.listBillsOrg(1);
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("ListBillsOrg (22cda34c)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/Query/bills/org/1").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.bill.listBillsOrg(1);
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("ListBillsOrg (100f5d00)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/Query/bills/org/1").respondWith().statusCode(500).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.bill.listBillsOrg(1);
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("ListBillsOrg (d335cac6)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server.mockEndpoint().get("/Query/bills/org/1").respondWith().statusCode(503).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.bill.listBillsOrg(1);
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("ModifyApprovalBill (90b67d62)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = ["string"];
        const rawResponseBody = { isSuccess: true, responseData: 6101, responseText: "Success" };
        server
            .mockEndpoint()
            .put("/Bill/approval/285")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.bill.modifyApprovalBill(285, ["string"]);
        expect(response).toEqual({
            isSuccess: true,
            responseData: 6101,
            responseText: "Success",
        });
    });

    test("ModifyApprovalBill (a3fa8c06)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = ["string", "string"];
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/Bill/approval/1")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.bill.modifyApprovalBill(1, ["string", "string"]);
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("ModifyApprovalBill (cf43c7ee)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = ["string", "string"];
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/Bill/approval/1")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.bill.modifyApprovalBill(1, ["string", "string"]);
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("ModifyApprovalBill (7661b292)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = ["string", "string"];
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/Bill/approval/1")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.bill.modifyApprovalBill(1, ["string", "string"]);
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("ModifyApprovalBill (538086bc)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = ["string", "string"];
        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .put("/Bill/approval/1")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.bill.modifyApprovalBill(1, ["string", "string"]);
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("SendToApprovalBill (SendForApproval)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = ["string"];
        const rawResponseBody = {
            responseCode: 1,
            pageIdentifier: undefined,
            roomId: 0,
            isSuccess: true,
            responseText: "Success",
            responseData: 6101,
        };
        server
            .mockEndpoint()
            .post("/Bill/approval/285")
            .header("idempotencyKey", "6B29FC40-CA47-1067-B31D-00DD010662DA")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.bill.sendToApprovalBill(285, {
            idempotencyKey: "6B29FC40-CA47-1067-B31D-00DD010662DA",
            body: ["string"],
        });
        expect(response).toEqual({
            responseCode: 1,
            pageIdentifier: undefined,
            roomId: 0,
            isSuccess: true,
            responseText: "Success",
            responseData: 6101,
        });
    });

    test("SendToApprovalBill (a3fa8c06)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = ["string", "string"];
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/Bill/approval/1")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.bill.sendToApprovalBill(1, {
                body: ["string", "string"],
            });
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("SendToApprovalBill (cf43c7ee)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = ["string", "string"];
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/Bill/approval/1")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.bill.sendToApprovalBill(1, {
                body: ["string", "string"],
            });
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("SendToApprovalBill (7661b292)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = ["string", "string"];
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/Bill/approval/1")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.bill.sendToApprovalBill(1, {
                body: ["string", "string"],
            });
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("SendToApprovalBill (538086bc)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = ["string", "string"];
        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .post("/Bill/approval/1")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.bill.sendToApprovalBill(1, {
                body: ["string", "string"],
            });
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("SetApprovedBill (1c3787e7)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: true, responseData: 6101, responseText: "Success" };
        server
            .mockEndpoint()
            .get("/Bill/approval/285/true")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.bill.setApprovedBill("true", 285);
        expect(response).toEqual({
            isSuccess: true,
            responseData: 6101,
            responseText: "Success",
        });
    });

    test("SetApprovedBill (d4194701)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Bill/approval/1/approved")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.bill.setApprovedBill("approved", 1);
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("SetApprovedBill (ddedc701)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Bill/approval/1/approved")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.bill.setApprovedBill("approved", 1);
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("SetApprovedBill (f851f28d)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Bill/approval/1/approved")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.bill.setApprovedBill("approved", 1);
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("SetApprovedBill (136391f7)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .get("/Bill/approval/1/approved")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.bill.setApprovedBill("approved", 1);
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });
});
