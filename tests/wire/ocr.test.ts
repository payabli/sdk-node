/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { PayabliClient } from "../../src/Client";
import * as Payabli from "../../src/api/index";

describe("Ocr", () => {
    test("OcrDocumentForm (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { ftype: undefined, filename: undefined, furl: undefined, fContent: undefined };
        const rawResponseBody = {
            isSuccess: true,
            responseText: "responseText",
            responseCode: 1,
            responseData: {
                resultData: {
                    billNumber: "billNumber",
                    netAmount: 1.1,
                    billDate: "2024-01-15T09:30:00Z",
                    dueDate: "2024-01-15T09:30:00Z",
                    comments: "comments",
                    billItems: [
                        {
                            itemTotalAmount: 1.1,
                            itemTaxAmount: 1.1,
                            itemTaxRate: 1.1,
                            itemProductCode: "itemProductCode",
                            itemProductName: "itemProductName",
                            itemDescription: "itemDescription",
                            itemCommodityCode: "itemCommodityCode",
                            itemUnitOfMeasure: "itemUnitOfMeasure",
                            itemCost: 1.1,
                            itemQty: 1,
                            itemMode: 1,
                            itemCategories: ["itemCategories", "itemCategories"],
                        },
                        {
                            itemTotalAmount: 1.1,
                            itemTaxAmount: 1.1,
                            itemTaxRate: 1.1,
                            itemProductCode: "itemProductCode",
                            itemProductName: "itemProductName",
                            itemDescription: "itemDescription",
                            itemCommodityCode: "itemCommodityCode",
                            itemUnitOfMeasure: "itemUnitOfMeasure",
                            itemCost: 1.1,
                            itemQty: 1,
                            itemMode: 1,
                            itemCategories: ["itemCategories", "itemCategories"],
                        },
                    ],
                    mode: 1,
                    accountingField1: "accountingField1",
                    accountingField2: "accountingField2",
                    additionalData: {
                        category: "category",
                        currency_code: "currency_code",
                        type: "type",
                        reference_number: "reference_number",
                    },
                    vendor: {
                        vendorNumber: "vendorNumber",
                        name1: "name1",
                        name2: "name2",
                        ein: "ein",
                        phone: "phone",
                        email: "email",
                        address1: "address1",
                        address2: "address2",
                        city: "city",
                        state: "state",
                        zip: "zip",
                        country: "country",
                        mcc: "mcc",
                        locationCode: "locationCode",
                        contacts: [
                            {
                                contactEmail: undefined,
                                contactName: undefined,
                                contactPhone: undefined,
                                contactTitle: undefined,
                                additionalData: undefined,
                            },
                            {
                                contactEmail: undefined,
                                contactName: undefined,
                                contactPhone: undefined,
                                contactTitle: undefined,
                                additionalData: undefined,
                            },
                        ],
                        billingData: {
                            id: 1,
                            bankName: "bankName",
                            routingAccount: "routingAccount",
                            accountNumber: "accountNumber",
                            typeAccount: "typeAccount",
                            bankAccountHolderName: "bankAccountHolderName",
                            bankAccountHolderType: "bankAccountHolderType",
                            bankAccountFunction: 1,
                        },
                        paymentMethod: "paymentMethod",
                        vendorStatus: 1,
                        remitAddress1: "remitAddress1",
                        remitAddress2: "remitAddress2",
                        remitCity: "remitCity",
                        remitState: "remitState",
                        remitZip: "remitZip",
                        remitCountry: "remitCountry",
                        payeeName1: "payeeName1",
                        payeeName2: "payeeName2",
                        customerVendorAccount: "customerVendorAccount",
                        internalReferenceId: 1000000,
                        customField1: "customField1",
                        customField2: "customField2",
                        additionalData: { web: "web" },
                    },
                    endDate: "2024-01-15T09:30:00Z",
                    frequency: "frequency",
                    terms: "terms",
                    status: 1,
                    lotNumber: "lotNumber",
                    attachments: [
                        {
                            ftype: "ftype",
                            filename: "filename",
                            fileDescriptor: "fileDescriptor",
                            furl: "furl",
                            fContent: "fContent",
                        },
                        {
                            ftype: "ftype",
                            filename: "filename",
                            fileDescriptor: "fileDescriptor",
                            furl: "furl",
                            fContent: "fContent",
                        },
                    ],
                },
            },
        };
        server
            .mockEndpoint()
            .post("/Import/ocrDocumentForm/typeResult")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.ocr.ocrDocumentForm("typeResult", {
            ftype: undefined,
            filename: undefined,
            furl: undefined,
            fContent: undefined,
        });
        expect(response).toEqual({
            isSuccess: true,
            responseText: "responseText",
            responseCode: 1,
            responseData: {
                resultData: {
                    billNumber: "billNumber",
                    netAmount: 1.1,
                    billDate: "2024-01-15T09:30:00Z",
                    dueDate: "2024-01-15T09:30:00Z",
                    comments: "comments",
                    billItems: [
                        {
                            itemTotalAmount: 1.1,
                            itemTaxAmount: 1.1,
                            itemTaxRate: 1.1,
                            itemProductCode: "itemProductCode",
                            itemProductName: "itemProductName",
                            itemDescription: "itemDescription",
                            itemCommodityCode: "itemCommodityCode",
                            itemUnitOfMeasure: "itemUnitOfMeasure",
                            itemCost: 1.1,
                            itemQty: 1,
                            itemMode: 1,
                            itemCategories: ["itemCategories", "itemCategories"],
                        },
                        {
                            itemTotalAmount: 1.1,
                            itemTaxAmount: 1.1,
                            itemTaxRate: 1.1,
                            itemProductCode: "itemProductCode",
                            itemProductName: "itemProductName",
                            itemDescription: "itemDescription",
                            itemCommodityCode: "itemCommodityCode",
                            itemUnitOfMeasure: "itemUnitOfMeasure",
                            itemCost: 1.1,
                            itemQty: 1,
                            itemMode: 1,
                            itemCategories: ["itemCategories", "itemCategories"],
                        },
                    ],
                    mode: 1,
                    accountingField1: "accountingField1",
                    accountingField2: "accountingField2",
                    additionalData: {
                        category: "category",
                        currency_code: "currency_code",
                        type: "type",
                        reference_number: "reference_number",
                    },
                    vendor: {
                        vendorNumber: "vendorNumber",
                        name1: "name1",
                        name2: "name2",
                        ein: "ein",
                        phone: "phone",
                        email: "email",
                        address1: "address1",
                        address2: "address2",
                        city: "city",
                        state: "state",
                        zip: "zip",
                        country: "country",
                        mcc: "mcc",
                        locationCode: "locationCode",
                        contacts: [
                            {
                                contactEmail: undefined,
                                contactName: undefined,
                                contactPhone: undefined,
                                contactTitle: undefined,
                                additionalData: undefined,
                            },
                            {
                                contactEmail: undefined,
                                contactName: undefined,
                                contactPhone: undefined,
                                contactTitle: undefined,
                                additionalData: undefined,
                            },
                        ],
                        billingData: {
                            id: 1,
                            bankName: "bankName",
                            routingAccount: "routingAccount",
                            accountNumber: "accountNumber",
                            typeAccount: "typeAccount",
                            bankAccountHolderName: "bankAccountHolderName",
                            bankAccountHolderType: "bankAccountHolderType",
                            bankAccountFunction: 1,
                        },
                        paymentMethod: "paymentMethod",
                        vendorStatus: 1,
                        remitAddress1: "remitAddress1",
                        remitAddress2: "remitAddress2",
                        remitCity: "remitCity",
                        remitState: "remitState",
                        remitZip: "remitZip",
                        remitCountry: "remitCountry",
                        payeeName1: "payeeName1",
                        payeeName2: "payeeName2",
                        customerVendorAccount: "customerVendorAccount",
                        internalReferenceId: 1000000,
                        customField1: "customField1",
                        customField2: "customField2",
                        additionalData: {
                            web: "web",
                        },
                    },
                    endDate: "2024-01-15T09:30:00Z",
                    frequency: "frequency",
                    terms: "terms",
                    status: 1,
                    lotNumber: "lotNumber",
                    attachments: [
                        {
                            ftype: "ftype",
                            filename: "filename",
                            fileDescriptor: "fileDescriptor",
                            furl: "furl",
                            fContent: "fContent",
                        },
                        {
                            ftype: "ftype",
                            filename: "filename",
                            fileDescriptor: "fileDescriptor",
                            furl: "furl",
                            fContent: "fContent",
                        },
                    ],
                },
            },
        });
    });

    test("OcrDocumentForm (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { ftype: undefined, filename: undefined, furl: undefined, fContent: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/Import/ocrDocumentForm/typeResult")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.ocr.ocrDocumentForm("typeResult", {
                ftype: undefined,
                filename: undefined,
                furl: undefined,
                fContent: undefined,
            });
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("OcrDocumentForm (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { ftype: undefined, filename: undefined, furl: undefined, fContent: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/Import/ocrDocumentForm/typeResult")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.ocr.ocrDocumentForm("typeResult", {
                ftype: undefined,
                filename: undefined,
                furl: undefined,
                fContent: undefined,
            });
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("OcrDocumentForm (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { ftype: undefined, filename: undefined, furl: undefined, fContent: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/Import/ocrDocumentForm/typeResult")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.ocr.ocrDocumentForm("typeResult", {
                ftype: undefined,
                filename: undefined,
                furl: undefined,
                fContent: undefined,
            });
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("OcrDocumentForm (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { ftype: undefined, filename: undefined, furl: undefined, fContent: undefined };
        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: "responseText" };
        server
            .mockEndpoint()
            .post("/Import/ocrDocumentForm/typeResult")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.ocr.ocrDocumentForm("typeResult", {
                ftype: undefined,
                filename: undefined,
                furl: undefined,
                fContent: undefined,
            });
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: "responseText",
            }),
        );
    });

    test("OcrDocumentJson (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { ftype: undefined, filename: undefined, furl: undefined, fContent: undefined };
        const rawResponseBody = {
            isSuccess: true,
            responseText: "responseText",
            responseCode: 1,
            responseData: {
                resultData: {
                    billNumber: "billNumber",
                    netAmount: 1.1,
                    billDate: "2024-01-15T09:30:00Z",
                    dueDate: "2024-01-15T09:30:00Z",
                    comments: "comments",
                    billItems: [
                        {
                            itemTotalAmount: 1.1,
                            itemTaxAmount: 1.1,
                            itemTaxRate: 1.1,
                            itemProductCode: "itemProductCode",
                            itemProductName: "itemProductName",
                            itemDescription: "itemDescription",
                            itemCommodityCode: "itemCommodityCode",
                            itemUnitOfMeasure: "itemUnitOfMeasure",
                            itemCost: 1.1,
                            itemQty: 1,
                            itemMode: 1,
                            itemCategories: ["itemCategories", "itemCategories"],
                        },
                        {
                            itemTotalAmount: 1.1,
                            itemTaxAmount: 1.1,
                            itemTaxRate: 1.1,
                            itemProductCode: "itemProductCode",
                            itemProductName: "itemProductName",
                            itemDescription: "itemDescription",
                            itemCommodityCode: "itemCommodityCode",
                            itemUnitOfMeasure: "itemUnitOfMeasure",
                            itemCost: 1.1,
                            itemQty: 1,
                            itemMode: 1,
                            itemCategories: ["itemCategories", "itemCategories"],
                        },
                    ],
                    mode: 1,
                    accountingField1: "accountingField1",
                    accountingField2: "accountingField2",
                    additionalData: {
                        category: "category",
                        currency_code: "currency_code",
                        type: "type",
                        reference_number: "reference_number",
                    },
                    vendor: {
                        vendorNumber: "vendorNumber",
                        name1: "name1",
                        name2: "name2",
                        ein: "ein",
                        phone: "phone",
                        email: "email",
                        address1: "address1",
                        address2: "address2",
                        city: "city",
                        state: "state",
                        zip: "zip",
                        country: "country",
                        mcc: "mcc",
                        locationCode: "locationCode",
                        contacts: [
                            {
                                contactEmail: undefined,
                                contactName: undefined,
                                contactPhone: undefined,
                                contactTitle: undefined,
                                additionalData: undefined,
                            },
                            {
                                contactEmail: undefined,
                                contactName: undefined,
                                contactPhone: undefined,
                                contactTitle: undefined,
                                additionalData: undefined,
                            },
                        ],
                        billingData: {
                            id: 1,
                            bankName: "bankName",
                            routingAccount: "routingAccount",
                            accountNumber: "accountNumber",
                            typeAccount: "typeAccount",
                            bankAccountHolderName: "bankAccountHolderName",
                            bankAccountHolderType: "bankAccountHolderType",
                            bankAccountFunction: 1,
                        },
                        paymentMethod: "paymentMethod",
                        vendorStatus: 1,
                        remitAddress1: "remitAddress1",
                        remitAddress2: "remitAddress2",
                        remitCity: "remitCity",
                        remitState: "remitState",
                        remitZip: "remitZip",
                        remitCountry: "remitCountry",
                        payeeName1: "payeeName1",
                        payeeName2: "payeeName2",
                        customerVendorAccount: "customerVendorAccount",
                        internalReferenceId: 1000000,
                        customField1: "customField1",
                        customField2: "customField2",
                        additionalData: { web: "web" },
                    },
                    endDate: "2024-01-15T09:30:00Z",
                    frequency: "frequency",
                    terms: "terms",
                    status: 1,
                    lotNumber: "lotNumber",
                    attachments: [
                        {
                            ftype: "ftype",
                            filename: "filename",
                            fileDescriptor: "fileDescriptor",
                            furl: "furl",
                            fContent: "fContent",
                        },
                        {
                            ftype: "ftype",
                            filename: "filename",
                            fileDescriptor: "fileDescriptor",
                            furl: "furl",
                            fContent: "fContent",
                        },
                    ],
                },
            },
        };
        server
            .mockEndpoint()
            .post("/Import/ocrDocumentJson/typeResult")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.ocr.ocrDocumentJson("typeResult", {
            ftype: undefined,
            filename: undefined,
            furl: undefined,
            fContent: undefined,
        });
        expect(response).toEqual({
            isSuccess: true,
            responseText: "responseText",
            responseCode: 1,
            responseData: {
                resultData: {
                    billNumber: "billNumber",
                    netAmount: 1.1,
                    billDate: "2024-01-15T09:30:00Z",
                    dueDate: "2024-01-15T09:30:00Z",
                    comments: "comments",
                    billItems: [
                        {
                            itemTotalAmount: 1.1,
                            itemTaxAmount: 1.1,
                            itemTaxRate: 1.1,
                            itemProductCode: "itemProductCode",
                            itemProductName: "itemProductName",
                            itemDescription: "itemDescription",
                            itemCommodityCode: "itemCommodityCode",
                            itemUnitOfMeasure: "itemUnitOfMeasure",
                            itemCost: 1.1,
                            itemQty: 1,
                            itemMode: 1,
                            itemCategories: ["itemCategories", "itemCategories"],
                        },
                        {
                            itemTotalAmount: 1.1,
                            itemTaxAmount: 1.1,
                            itemTaxRate: 1.1,
                            itemProductCode: "itemProductCode",
                            itemProductName: "itemProductName",
                            itemDescription: "itemDescription",
                            itemCommodityCode: "itemCommodityCode",
                            itemUnitOfMeasure: "itemUnitOfMeasure",
                            itemCost: 1.1,
                            itemQty: 1,
                            itemMode: 1,
                            itemCategories: ["itemCategories", "itemCategories"],
                        },
                    ],
                    mode: 1,
                    accountingField1: "accountingField1",
                    accountingField2: "accountingField2",
                    additionalData: {
                        category: "category",
                        currency_code: "currency_code",
                        type: "type",
                        reference_number: "reference_number",
                    },
                    vendor: {
                        vendorNumber: "vendorNumber",
                        name1: "name1",
                        name2: "name2",
                        ein: "ein",
                        phone: "phone",
                        email: "email",
                        address1: "address1",
                        address2: "address2",
                        city: "city",
                        state: "state",
                        zip: "zip",
                        country: "country",
                        mcc: "mcc",
                        locationCode: "locationCode",
                        contacts: [
                            {
                                contactEmail: undefined,
                                contactName: undefined,
                                contactPhone: undefined,
                                contactTitle: undefined,
                                additionalData: undefined,
                            },
                            {
                                contactEmail: undefined,
                                contactName: undefined,
                                contactPhone: undefined,
                                contactTitle: undefined,
                                additionalData: undefined,
                            },
                        ],
                        billingData: {
                            id: 1,
                            bankName: "bankName",
                            routingAccount: "routingAccount",
                            accountNumber: "accountNumber",
                            typeAccount: "typeAccount",
                            bankAccountHolderName: "bankAccountHolderName",
                            bankAccountHolderType: "bankAccountHolderType",
                            bankAccountFunction: 1,
                        },
                        paymentMethod: "paymentMethod",
                        vendorStatus: 1,
                        remitAddress1: "remitAddress1",
                        remitAddress2: "remitAddress2",
                        remitCity: "remitCity",
                        remitState: "remitState",
                        remitZip: "remitZip",
                        remitCountry: "remitCountry",
                        payeeName1: "payeeName1",
                        payeeName2: "payeeName2",
                        customerVendorAccount: "customerVendorAccount",
                        internalReferenceId: 1000000,
                        customField1: "customField1",
                        customField2: "customField2",
                        additionalData: {
                            web: "web",
                        },
                    },
                    endDate: "2024-01-15T09:30:00Z",
                    frequency: "frequency",
                    terms: "terms",
                    status: 1,
                    lotNumber: "lotNumber",
                    attachments: [
                        {
                            ftype: "ftype",
                            filename: "filename",
                            fileDescriptor: "fileDescriptor",
                            furl: "furl",
                            fContent: "fContent",
                        },
                        {
                            ftype: "ftype",
                            filename: "filename",
                            fileDescriptor: "fileDescriptor",
                            furl: "furl",
                            fContent: "fContent",
                        },
                    ],
                },
            },
        });
    });

    test("OcrDocumentJson (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { ftype: undefined, filename: undefined, furl: undefined, fContent: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/Import/ocrDocumentJson/typeResult")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.ocr.ocrDocumentJson("typeResult", {
                ftype: undefined,
                filename: undefined,
                furl: undefined,
                fContent: undefined,
            });
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("OcrDocumentJson (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { ftype: undefined, filename: undefined, furl: undefined, fContent: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/Import/ocrDocumentJson/typeResult")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.ocr.ocrDocumentJson("typeResult", {
                ftype: undefined,
                filename: undefined,
                furl: undefined,
                fContent: undefined,
            });
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("OcrDocumentJson (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { ftype: undefined, filename: undefined, furl: undefined, fContent: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/Import/ocrDocumentJson/typeResult")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.ocr.ocrDocumentJson("typeResult", {
                ftype: undefined,
                filename: undefined,
                furl: undefined,
                fContent: undefined,
            });
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("OcrDocumentJson (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { ftype: undefined, filename: undefined, furl: undefined, fContent: undefined };
        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: "responseText" };
        server
            .mockEndpoint()
            .post("/Import/ocrDocumentJson/typeResult")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.ocr.ocrDocumentJson("typeResult", {
                ftype: undefined,
                filename: undefined,
                furl: undefined,
                fContent: undefined,
            });
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: "responseText",
            }),
        );
    });
});
