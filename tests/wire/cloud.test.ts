/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { PayabliClient } from "../../src/Client";
import * as Payabli from "../../src/api/index";

describe("Cloud", () => {
    test("addDevice (Register)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { registrationCode: "YS7DS5", description: "Front Desk POS" };
        const rawResponseBody = {
            isSuccess: true,
            responseData: "6c361c7d-674c-44cc-b790-382b75d1xxx",
            responseText: "Success",
        };
        server
            .mockEndpoint()
            .post("/Cloud/register/8cfec329267")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.cloud.addDevice("8cfec329267", {
            registrationCode: "YS7DS5",
            description: "Front Desk POS",
        });
        expect(response).toEqual({
            isSuccess: true,
            responseData: "6c361c7d-674c-44cc-b790-382b75d1xxx",
            responseText: "Success",
        });
    });

    test("addDevice (f441a932)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { description: undefined, registrationCode: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/Cloud/register/entry")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.cloud.addDevice("entry", {
                description: undefined,
                registrationCode: undefined,
            });
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("addDevice (7b1ed08a)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { description: undefined, registrationCode: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/Cloud/register/entry")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.cloud.addDevice("entry", {
                description: undefined,
                registrationCode: undefined,
            });
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("addDevice (403c7e5e)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { description: undefined, registrationCode: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/Cloud/register/entry")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.cloud.addDevice("entry", {
                description: undefined,
                registrationCode: undefined,
            });
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("addDevice (87223c48)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { description: undefined, registrationCode: undefined };
        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .post("/Cloud/register/entry")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.cloud.addDevice("entry", {
                description: undefined,
                registrationCode: undefined,
            });
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("HistoryDevice (Example response for GET requests for devices.)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            isSuccess: true,
            responseList: [
                {
                    connected: true,
                    dateRegistered: "2024-03-05T15:56:04Z",
                    deviceId: "36103e24-41d8-47c9-b5f7-119f0000000",
                    deviceNickName: "Front Desk POS",
                    make: "ingenico",
                    model: "LK2500",
                    registered: true,
                    serialNumber: "312345692080000000",
                },
            ],
            responseText: "Success",
        };
        server
            .mockEndpoint()
            .get("/Cloud/history/8cfec329267/WXGDWB")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.cloud.historyDevice("WXGDWB", "8cfec329267");
        expect(response).toEqual({
            isSuccess: true,
            responseList: [
                {
                    connected: true,
                    dateRegistered: "2024-03-05T15:56:04Z",
                    deviceId: "36103e24-41d8-47c9-b5f7-119f0000000",
                    deviceNickName: "Front Desk POS",
                    make: "ingenico",
                    model: "LK2500",
                    registered: true,
                    serialNumber: "312345692080000000",
                },
            ],
            responseText: "Success",
        });
    });

    test("HistoryDevice (faf21ae)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Cloud/history/entry/deviceId")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.cloud.historyDevice("deviceId", "entry");
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("HistoryDevice (6efd1d36)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Cloud/history/entry/deviceId")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.cloud.historyDevice("deviceId", "entry");
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("HistoryDevice (f507087a)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Cloud/history/entry/deviceId")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.cloud.historyDevice("deviceId", "entry");
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("HistoryDevice (df8d9c34)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .get("/Cloud/history/entry/deviceId")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.cloud.historyDevice("deviceId", "entry");
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("ListDevice (ListDevices)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            isSuccess: true,
            responseList: [
                {
                    connected: true,
                    dateRegistered: "2024-03-05T15:56:04Z",
                    deviceId: "36103e24-41d8-47c9-b5f7-119f0000000",
                    deviceNickName: "Front Desk POS",
                    make: "ingenico",
                    model: "LK2500",
                    registered: true,
                    serialNumber: "312345692080000000",
                },
            ],
            responseText: "Success",
        };
        server
            .mockEndpoint()
            .get("/Cloud/list/8cfec329267")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.cloud.listDevice("8cfec329267");
        expect(response).toEqual({
            isSuccess: true,
            responseList: [
                {
                    connected: true,
                    dateRegistered: "2024-03-05T15:56:04Z",
                    deviceId: "36103e24-41d8-47c9-b5f7-119f0000000",
                    deviceNickName: "Front Desk POS",
                    make: "ingenico",
                    model: "LK2500",
                    registered: true,
                    serialNumber: "312345692080000000",
                },
            ],
            responseText: "Success",
        });
    });

    test("ListDevice (344ea1c4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/Cloud/list/entry").respondWith().statusCode(400).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.cloud.listDevice("entry");
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("ListDevice (a17d02ec)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/Cloud/list/entry").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.cloud.listDevice("entry");
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("ListDevice (93e82fa0)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/Cloud/list/entry").respondWith().statusCode(500).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.cloud.listDevice("entry");
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("ListDevice (15f0f426)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server.mockEndpoint().get("/Cloud/list/entry").respondWith().statusCode(503).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.cloud.listDevice("entry");
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("RemoveDevice (Unregister)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            isSuccess: true,
            responseData: "6c361c7d-674c-44cc-b790-382b75d1xxx",
            responseText: "Success",
        };
        server
            .mockEndpoint()
            .delete("/Cloud/register/8cfec329267/6c361c7d-674c-44cc-b790-382b75d1xxx")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.cloud.removeDevice("6c361c7d-674c-44cc-b790-382b75d1xxx", "8cfec329267");
        expect(response).toEqual({
            isSuccess: true,
            responseData: "6c361c7d-674c-44cc-b790-382b75d1xxx",
            responseText: "Success",
        });
    });

    test("RemoveDevice (faf21ae)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/Cloud/register/entry/deviceId")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.cloud.removeDevice("deviceId", "entry");
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("RemoveDevice (6efd1d36)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/Cloud/register/entry/deviceId")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.cloud.removeDevice("deviceId", "entry");
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("RemoveDevice (f507087a)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/Cloud/register/entry/deviceId")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.cloud.removeDevice("deviceId", "entry");
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("RemoveDevice (df8d9c34)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .delete("/Cloud/register/entry/deviceId")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.cloud.removeDevice("deviceId", "entry");
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });
});
