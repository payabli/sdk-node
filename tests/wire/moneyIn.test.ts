/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { PayabliClient } from "../../src/Client";
import * as Payabli from "../../src/api/index";

describe("MoneyIn", () => {
    test("Authorize (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            customerData: { customerId: 4440 },
            entryPoint: "f743aed24a",
            ipaddress: "255.255.255.255",
            paymentDetails: { serviceFee: 0, totalAmount: 100 },
            paymentMethod: {
                cardcvv: "999",
                cardexp: "02/27",
                cardHolder: "John Cassian",
                cardnumber: "4111111111111111",
                cardzip: "12345",
                initiator: "payor",
                method: "card",
            },
        };
        const rawResponseBody = {
            responseText: "Success",
            isSuccess: true,
            pageIdentifier: undefined,
            responseData: {
                authCode: "123456",
                referenceId: "10-7d9cd67d-2d5d-4cd7-a1b7-72b8b201ec13",
                resultCode: 1,
                resultText: "Authorized",
                avsResponseText: "No address or ZIP match only",
                cvvResponseText: "CVV2/CVC2 no match",
                customerId: 4440,
                methodReferenceId: undefined,
            },
        };
        server
            .mockEndpoint()
            .post("/MoneyIn/authorize")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.moneyIn.authorize({
            body: {
                customerData: {
                    customerId: 4440,
                },
                entryPoint: "f743aed24a",
                ipaddress: "255.255.255.255",
                paymentDetails: {
                    serviceFee: 0,
                    totalAmount: 100,
                },
                paymentMethod: {
                    cardcvv: "999",
                    cardexp: "02/27",
                    cardHolder: "John Cassian",
                    cardnumber: "4111111111111111",
                    cardzip: "12345",
                    initiator: "payor",
                    method: "card",
                },
            },
        });
        expect(response).toEqual({
            responseText: "Success",
            isSuccess: true,
            pageIdentifier: undefined,
            responseData: {
                authCode: "123456",
                referenceId: "10-7d9cd67d-2d5d-4cd7-a1b7-72b8b201ec13",
                resultCode: 1,
                resultText: "Authorized",
                avsResponseText: "No address or ZIP match only",
                cvvResponseText: "CVV2/CVC2 no match",
                customerId: 4440,
                methodReferenceId: undefined,
            },
        });
    });

    test("Authorize (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            accountId: undefined,
            customerData: undefined,
            entryPoint: undefined,
            invoiceData: undefined,
            ipaddress: undefined,
            orderDescription: undefined,
            orderId: undefined,
            paymentDetails: {
                categories: undefined,
                checkImage: undefined,
                checkNumber: undefined,
                currency: undefined,
                serviceFee: undefined,
                splitFunding: undefined,
                totalAmount: 1.1,
            },
            paymentMethod: {
                cardcvv: undefined,
                cardexp: "alpha",
                cardHolder: undefined,
                cardnumber: "cardnumber",
                cardzip: undefined,
                initiator: undefined,
                method: "card",
                saveIfSuccess: undefined,
            },
            source: undefined,
            subdomain: undefined,
            subscriptionId: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/MoneyIn/authorize")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.moneyIn.authorize({
                body: {
                    accountId: undefined,
                    customerData: undefined,
                    entryPoint: undefined,
                    invoiceData: undefined,
                    ipaddress: undefined,
                    orderDescription: undefined,
                    orderId: undefined,
                    paymentDetails: {
                        categories: undefined,
                        checkImage: undefined,
                        checkNumber: undefined,
                        currency: undefined,
                        serviceFee: undefined,
                        splitFunding: undefined,
                        totalAmount: 1.1,
                    },
                    paymentMethod: {
                        cardcvv: undefined,
                        cardexp: "alpha",
                        cardHolder: undefined,
                        cardnumber: "cardnumber",
                        cardzip: undefined,
                        initiator: undefined,
                        method: "card",
                        saveIfSuccess: undefined,
                    },
                    source: undefined,
                    subdomain: undefined,
                    subscriptionId: undefined,
                },
            });
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("Authorize (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            accountId: undefined,
            customerData: undefined,
            entryPoint: undefined,
            invoiceData: undefined,
            ipaddress: undefined,
            orderDescription: undefined,
            orderId: undefined,
            paymentDetails: {
                categories: undefined,
                checkImage: undefined,
                checkNumber: undefined,
                currency: undefined,
                serviceFee: undefined,
                splitFunding: undefined,
                totalAmount: 1.1,
            },
            paymentMethod: {
                cardcvv: undefined,
                cardexp: "alpha",
                cardHolder: undefined,
                cardnumber: "cardnumber",
                cardzip: undefined,
                initiator: undefined,
                method: "card",
                saveIfSuccess: undefined,
            },
            source: undefined,
            subdomain: undefined,
            subscriptionId: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/MoneyIn/authorize")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.moneyIn.authorize({
                body: {
                    accountId: undefined,
                    customerData: undefined,
                    entryPoint: undefined,
                    invoiceData: undefined,
                    ipaddress: undefined,
                    orderDescription: undefined,
                    orderId: undefined,
                    paymentDetails: {
                        categories: undefined,
                        checkImage: undefined,
                        checkNumber: undefined,
                        currency: undefined,
                        serviceFee: undefined,
                        splitFunding: undefined,
                        totalAmount: 1.1,
                    },
                    paymentMethod: {
                        cardcvv: undefined,
                        cardexp: "alpha",
                        cardHolder: undefined,
                        cardnumber: "cardnumber",
                        cardzip: undefined,
                        initiator: undefined,
                        method: "card",
                        saveIfSuccess: undefined,
                    },
                    source: undefined,
                    subdomain: undefined,
                    subscriptionId: undefined,
                },
            });
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("Authorize (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            accountId: undefined,
            customerData: undefined,
            entryPoint: undefined,
            invoiceData: undefined,
            ipaddress: undefined,
            orderDescription: undefined,
            orderId: undefined,
            paymentDetails: {
                categories: undefined,
                checkImage: undefined,
                checkNumber: undefined,
                currency: undefined,
                serviceFee: undefined,
                splitFunding: undefined,
                totalAmount: 1.1,
            },
            paymentMethod: {
                cardcvv: undefined,
                cardexp: "alpha",
                cardHolder: undefined,
                cardnumber: "cardnumber",
                cardzip: undefined,
                initiator: undefined,
                method: "card",
                saveIfSuccess: undefined,
            },
            source: undefined,
            subdomain: undefined,
            subscriptionId: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/MoneyIn/authorize")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.moneyIn.authorize({
                body: {
                    accountId: undefined,
                    customerData: undefined,
                    entryPoint: undefined,
                    invoiceData: undefined,
                    ipaddress: undefined,
                    orderDescription: undefined,
                    orderId: undefined,
                    paymentDetails: {
                        categories: undefined,
                        checkImage: undefined,
                        checkNumber: undefined,
                        currency: undefined,
                        serviceFee: undefined,
                        splitFunding: undefined,
                        totalAmount: 1.1,
                    },
                    paymentMethod: {
                        cardcvv: undefined,
                        cardexp: "alpha",
                        cardHolder: undefined,
                        cardnumber: "cardnumber",
                        cardzip: undefined,
                        initiator: undefined,
                        method: "card",
                        saveIfSuccess: undefined,
                    },
                    source: undefined,
                    subdomain: undefined,
                    subscriptionId: undefined,
                },
            });
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("Authorize (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            accountId: undefined,
            customerData: undefined,
            entryPoint: undefined,
            invoiceData: undefined,
            ipaddress: undefined,
            orderDescription: undefined,
            orderId: undefined,
            paymentDetails: {
                categories: undefined,
                checkImage: undefined,
                checkNumber: undefined,
                currency: undefined,
                serviceFee: undefined,
                splitFunding: undefined,
                totalAmount: 1.1,
            },
            paymentMethod: {
                cardcvv: undefined,
                cardexp: "alpha",
                cardHolder: undefined,
                cardnumber: "cardnumber",
                cardzip: undefined,
                initiator: undefined,
                method: "card",
                saveIfSuccess: undefined,
            },
            source: undefined,
            subdomain: undefined,
            subscriptionId: undefined,
        };
        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: "responseText" };
        server
            .mockEndpoint()
            .post("/MoneyIn/authorize")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.moneyIn.authorize({
                body: {
                    accountId: undefined,
                    customerData: undefined,
                    entryPoint: undefined,
                    invoiceData: undefined,
                    ipaddress: undefined,
                    orderDescription: undefined,
                    orderId: undefined,
                    paymentDetails: {
                        categories: undefined,
                        checkImage: undefined,
                        checkNumber: undefined,
                        currency: undefined,
                        serviceFee: undefined,
                        splitFunding: undefined,
                        totalAmount: 1.1,
                    },
                    paymentMethod: {
                        cardcvv: undefined,
                        cardexp: "alpha",
                        cardHolder: undefined,
                        cardnumber: "cardnumber",
                        cardzip: undefined,
                        initiator: undefined,
                        method: "card",
                        saveIfSuccess: undefined,
                    },
                    source: undefined,
                    subdomain: undefined,
                    subscriptionId: undefined,
                },
            });
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: "responseText",
            }),
        );
    });

    test("Capture (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            responseCode: 1,
            pageIdentifier: null,
            roomId: 0,
            isSuccess: true,
            responseText: "Success",
            responseData: {
                authCode: "123456",
                referenceId: "10-7d9cd67d-2d5d-4cd7-a1b7-72b8b201ec13",
                resultCode: 1,
                resultText: "SUCCESS",
                avsResponseText: null,
                cvvResponseText: null,
                customerId: null,
                methodReferenceId: null,
            },
        };
        server
            .mockEndpoint()
            .get("/MoneyIn/capture/10-7d9cd67d-2d5d-4cd7-a1b7-72b8b201ec13/0")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.moneyIn.capture(0, "10-7d9cd67d-2d5d-4cd7-a1b7-72b8b201ec13");
        expect(response).toEqual({
            responseCode: 1,
            pageIdentifier: null,
            roomId: 0,
            isSuccess: true,
            responseText: "Success",
            responseData: {
                authCode: "123456",
                referenceId: "10-7d9cd67d-2d5d-4cd7-a1b7-72b8b201ec13",
                resultCode: 1,
                resultText: "SUCCESS",
                avsResponseText: null,
                cvvResponseText: null,
                customerId: null,
                methodReferenceId: null,
            },
        });
    });

    test("Capture (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/MoneyIn/capture/transId/1.1")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.moneyIn.capture(1.1, "transId");
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("Capture (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/MoneyIn/capture/transId/1.1")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.moneyIn.capture(1.1, "transId");
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("Capture (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/MoneyIn/capture/transId/1.1")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.moneyIn.capture(1.1, "transId");
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("Capture (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: "responseText" };
        server
            .mockEndpoint()
            .get("/MoneyIn/capture/transId/1.1")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.moneyIn.capture(1.1, "transId");
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: "responseText",
            }),
        );
    });

    test("CaptureAuth (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { paymentDetails: { totalAmount: 105, serviceFee: 5 } };
        const rawResponseBody = {
            responseCode: 1,
            pageIdentifier: null,
            roomId: 0,
            isSuccess: true,
            responseText: "Success",
            responseData: {
                authCode: "123456",
                referenceId: "10-7d9cd67d-2d5d-4cd7-a1b7-72b8b201ec13",
                resultCode: 1,
                resultText: "SUCCESS",
                avsResponseText: null,
                cvvResponseText: null,
                customerId: null,
                methodReferenceId: null,
            },
        };
        server
            .mockEndpoint()
            .post("/MoneyIn/capture/10-7d9cd67d-2d5d-4cd7-a1b7-72b8b201ec13")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.moneyIn.captureAuth("10-7d9cd67d-2d5d-4cd7-a1b7-72b8b201ec13", {
            paymentDetails: {
                totalAmount: 105,
                serviceFee: 5,
            },
        });
        expect(response).toEqual({
            responseCode: 1,
            pageIdentifier: null,
            roomId: 0,
            isSuccess: true,
            responseText: "Success",
            responseData: {
                authCode: "123456",
                referenceId: "10-7d9cd67d-2d5d-4cd7-a1b7-72b8b201ec13",
                resultCode: 1,
                resultText: "SUCCESS",
                avsResponseText: null,
                cvvResponseText: null,
                customerId: null,
                methodReferenceId: null,
            },
        });
    });

    test("CaptureAuth (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { paymentDetails: { totalAmount: 89, serviceFee: 4 } };
        const rawResponseBody = {
            responseCode: 1,
            pageIdentifier: null,
            roomId: 0,
            isSuccess: true,
            responseText: "Success",
            responseData: {
                authCode: "123456",
                referenceId: "10-7d9cd67d-2d5d-4cd7-a1b7-72b8b201ec13",
                resultCode: 1,
                resultText: "SUCCESS",
                avsResponseText: null,
                cvvResponseText: null,
                customerId: null,
                methodReferenceId: null,
            },
        };
        server
            .mockEndpoint()
            .post("/MoneyIn/capture/10-7d9cd67d-2d5d-4cd7-a1b7-72b8b201ec13")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.moneyIn.captureAuth("10-7d9cd67d-2d5d-4cd7-a1b7-72b8b201ec13", {
            paymentDetails: {
                totalAmount: 89,
                serviceFee: 4,
            },
        });
        expect(response).toEqual({
            responseCode: 1,
            pageIdentifier: null,
            roomId: 0,
            isSuccess: true,
            responseText: "Success",
            responseData: {
                authCode: "123456",
                referenceId: "10-7d9cd67d-2d5d-4cd7-a1b7-72b8b201ec13",
                resultCode: 1,
                resultText: "SUCCESS",
                avsResponseText: null,
                cvvResponseText: null,
                customerId: null,
                methodReferenceId: null,
            },
        });
    });

    test("CaptureAuth (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { paymentDetails: { totalAmount: 100 } };
        const rawResponseBody = {
            responseCode: 1,
            pageIdentifier: null,
            roomId: 0,
            isSuccess: true,
            responseText: "Success",
            responseData: {
                authCode: "123456",
                referenceId: "10-7d9cd67d-2d5d-4cd7-a1b7-72b8b201ec13",
                resultCode: 1,
                resultText: "SUCCESS",
                avsResponseText: null,
                cvvResponseText: null,
                customerId: null,
                methodReferenceId: null,
            },
        };
        server
            .mockEndpoint()
            .post("/MoneyIn/capture/10-7d9cd67d-2d5d-4cd7-a1b7-72b8b201ec13")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.moneyIn.captureAuth("10-7d9cd67d-2d5d-4cd7-a1b7-72b8b201ec13", {
            paymentDetails: {
                totalAmount: 100,
            },
        });
        expect(response).toEqual({
            responseCode: 1,
            pageIdentifier: null,
            roomId: 0,
            isSuccess: true,
            responseText: "Success",
            responseData: {
                authCode: "123456",
                referenceId: "10-7d9cd67d-2d5d-4cd7-a1b7-72b8b201ec13",
                resultCode: 1,
                resultText: "SUCCESS",
                avsResponseText: null,
                cvvResponseText: null,
                customerId: null,
                methodReferenceId: null,
            },
        });
    });

    test("CaptureAuth (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { paymentDetails: { totalAmount: 1.1, serviceFee: undefined } };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/MoneyIn/capture/transId")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.moneyIn.captureAuth("transId", {
                paymentDetails: {
                    totalAmount: 1.1,
                    serviceFee: undefined,
                },
            });
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("CaptureAuth (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { paymentDetails: { totalAmount: 1.1, serviceFee: undefined } };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/MoneyIn/capture/transId")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.moneyIn.captureAuth("transId", {
                paymentDetails: {
                    totalAmount: 1.1,
                    serviceFee: undefined,
                },
            });
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("CaptureAuth (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { paymentDetails: { totalAmount: 1.1, serviceFee: undefined } };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/MoneyIn/capture/transId")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.moneyIn.captureAuth("transId", {
                paymentDetails: {
                    totalAmount: 1.1,
                    serviceFee: undefined,
                },
            });
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("CaptureAuth (7)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { paymentDetails: { totalAmount: 1.1, serviceFee: undefined } };
        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: "responseText" };
        server
            .mockEndpoint()
            .post("/MoneyIn/capture/transId")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.moneyIn.captureAuth("transId", {
                paymentDetails: {
                    totalAmount: 1.1,
                    serviceFee: undefined,
                },
            });
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: "responseText",
            }),
        );
    });

    test("Credit (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            customerData: { billingAddress1: "5127 Linkwood ave", customerNumber: "100" },
            entrypoint: "my-entrypoint",
            paymentDetails: { serviceFee: 0, totalAmount: 1 },
            paymentMethod: {
                achAccount: "88354454",
                achAccountType: "Checking",
                achHolder: "John Smith",
                achRouting: "021000021",
                method: "ach",
            },
        };
        const rawResponseBody = {
            isSuccess: true,
            pageIdentifier: "null",
            responseData: {
                AuthCode: "AuthCode",
                CustomerId: 4440,
                methodReferenceId: undefined,
                ReferenceId: "45-erre-324",
                ResultCode: 1,
                ResultText: "Approved",
            },
            responseText: "Success",
        };
        server
            .mockEndpoint()
            .post("/MoneyIn/makecredit")
            .header("idempotencyKey", "6B29FC40-CA47-1067-B31D-00DD010662DA")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.moneyIn.credit({
            idempotencyKey: "6B29FC40-CA47-1067-B31D-00DD010662DA",
            customerData: {
                billingAddress1: "5127 Linkwood ave",
                customerNumber: "100",
            },
            entrypoint: "my-entrypoint",
            paymentDetails: {
                serviceFee: 0,
                totalAmount: 1,
            },
            paymentMethod: {
                achAccount: "88354454",
                achAccountType: "Checking",
                achHolder: "John Smith",
                achRouting: "021000021",
                method: "ach",
            },
        });
        expect(response).toEqual({
            isSuccess: true,
            pageIdentifier: "null",
            responseData: {
                AuthCode: "AuthCode",
                CustomerId: 4440,
                methodReferenceId: undefined,
                ReferenceId: "45-erre-324",
                ResultCode: 1,
                ResultText: "Approved",
            },
            responseText: "Success",
        });
    });

    test("Credit (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            customerData: {
                billingAddress1: "125 Main Street",
                billingCity: "Kingsport",
                billingEmail: "johnnyp@email.com",
                company: "Acme, Inc",
                customerNumber: "100",
                firstName: "Johnny",
                lastName: "Poulsbo",
            },
            entrypoint: "my-entrypoint",
            paymentDetails: { serviceFee: 0, totalAmount: 1 },
            paymentMethod: {
                achAccount: "88354554",
                achAccountType: "Checking",
                achHolder: "John Poulsbo",
                achRouting: "029000021",
                method: "ach",
            },
        };
        const rawResponseBody = {
            isSuccess: true,
            pageIdentifier: "null",
            responseData: {
                AuthCode: "AuthCode",
                CustomerId: 4440,
                methodReferenceId: undefined,
                ReferenceId: "45-erre-324",
                ResultCode: 1,
                ResultText: "Approved",
            },
            responseText: "Success",
        };
        server
            .mockEndpoint()
            .post("/MoneyIn/makecredit")
            .header("idempotencyKey", "6B29FC40-CA47-1067-B31D-00DD010662DA")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.moneyIn.credit({
            idempotencyKey: "6B29FC40-CA47-1067-B31D-00DD010662DA",
            customerData: {
                billingAddress1: "125 Main Street",
                billingCity: "Kingsport",
                billingEmail: "johnnyp@email.com",
                company: "Acme, Inc",
                customerNumber: "100",
                firstName: "Johnny",
                lastName: "Poulsbo",
            },
            entrypoint: "my-entrypoint",
            paymentDetails: {
                serviceFee: 0,
                totalAmount: 1,
            },
            paymentMethod: {
                achAccount: "88354554",
                achAccountType: "Checking",
                achHolder: "John Poulsbo",
                achRouting: "029000021",
                method: "ach",
            },
        });
        expect(response).toEqual({
            isSuccess: true,
            pageIdentifier: "null",
            responseData: {
                AuthCode: "AuthCode",
                CustomerId: 4440,
                methodReferenceId: undefined,
                ReferenceId: "45-erre-324",
                ResultCode: 1,
                ResultText: "Approved",
            },
            responseText: "Success",
        });
    });

    test("Credit (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            accountId: undefined,
            customerData: {
                additionalData: undefined,
                billingAddress1: undefined,
                billingAddress2: undefined,
                billingCity: undefined,
                billingCountry: undefined,
                billingEmail: undefined,
                billingPhone: undefined,
                billingState: undefined,
                billingZip: undefined,
                company: undefined,
                customerId: undefined,
                customerNumber: undefined,
                firstName: undefined,
                identifierFields: undefined,
                lastName: undefined,
                shippingAddress1: undefined,
                shippingAddress2: undefined,
                shippingCity: undefined,
                shippingCountry: undefined,
                shippingState: undefined,
                shippingZip: undefined,
            },
            entrypoint: undefined,
            orderDescription: undefined,
            orderId: undefined,
            paymentDetails: { currency: undefined, serviceFee: undefined, totalAmount: 1.1 },
            paymentMethod: {
                achAccount: undefined,
                achAccountType: undefined,
                achCode: undefined,
                achHolder: undefined,
                achRouting: undefined,
                method: "ach",
            },
            source: undefined,
            subdomain: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/MoneyIn/makecredit")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.moneyIn.credit({
                accountId: undefined,
                customerData: {
                    additionalData: undefined,
                    billingAddress1: undefined,
                    billingAddress2: undefined,
                    billingCity: undefined,
                    billingCountry: undefined,
                    billingEmail: undefined,
                    billingPhone: undefined,
                    billingState: undefined,
                    billingZip: undefined,
                    company: undefined,
                    customerId: undefined,
                    customerNumber: undefined,
                    firstName: undefined,
                    identifierFields: undefined,
                    lastName: undefined,
                    shippingAddress1: undefined,
                    shippingAddress2: undefined,
                    shippingCity: undefined,
                    shippingCountry: undefined,
                    shippingState: undefined,
                    shippingZip: undefined,
                },
                entrypoint: undefined,
                orderDescription: undefined,
                orderId: undefined,
                paymentDetails: {
                    currency: undefined,
                    serviceFee: undefined,
                    totalAmount: 1.1,
                },
                paymentMethod: {
                    achAccount: undefined,
                    achAccountType: undefined,
                    achCode: undefined,
                    achHolder: undefined,
                    achRouting: undefined,
                    method: "ach",
                },
                source: undefined,
                subdomain: undefined,
            });
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("Credit (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            accountId: undefined,
            customerData: {
                additionalData: undefined,
                billingAddress1: undefined,
                billingAddress2: undefined,
                billingCity: undefined,
                billingCountry: undefined,
                billingEmail: undefined,
                billingPhone: undefined,
                billingState: undefined,
                billingZip: undefined,
                company: undefined,
                customerId: undefined,
                customerNumber: undefined,
                firstName: undefined,
                identifierFields: undefined,
                lastName: undefined,
                shippingAddress1: undefined,
                shippingAddress2: undefined,
                shippingCity: undefined,
                shippingCountry: undefined,
                shippingState: undefined,
                shippingZip: undefined,
            },
            entrypoint: undefined,
            orderDescription: undefined,
            orderId: undefined,
            paymentDetails: { currency: undefined, serviceFee: undefined, totalAmount: 1.1 },
            paymentMethod: {
                achAccount: undefined,
                achAccountType: undefined,
                achCode: undefined,
                achHolder: undefined,
                achRouting: undefined,
                method: "ach",
            },
            source: undefined,
            subdomain: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/MoneyIn/makecredit")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.moneyIn.credit({
                accountId: undefined,
                customerData: {
                    additionalData: undefined,
                    billingAddress1: undefined,
                    billingAddress2: undefined,
                    billingCity: undefined,
                    billingCountry: undefined,
                    billingEmail: undefined,
                    billingPhone: undefined,
                    billingState: undefined,
                    billingZip: undefined,
                    company: undefined,
                    customerId: undefined,
                    customerNumber: undefined,
                    firstName: undefined,
                    identifierFields: undefined,
                    lastName: undefined,
                    shippingAddress1: undefined,
                    shippingAddress2: undefined,
                    shippingCity: undefined,
                    shippingCountry: undefined,
                    shippingState: undefined,
                    shippingZip: undefined,
                },
                entrypoint: undefined,
                orderDescription: undefined,
                orderId: undefined,
                paymentDetails: {
                    currency: undefined,
                    serviceFee: undefined,
                    totalAmount: 1.1,
                },
                paymentMethod: {
                    achAccount: undefined,
                    achAccountType: undefined,
                    achCode: undefined,
                    achHolder: undefined,
                    achRouting: undefined,
                    method: "ach",
                },
                source: undefined,
                subdomain: undefined,
            });
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("Credit (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            accountId: undefined,
            customerData: {
                additionalData: undefined,
                billingAddress1: undefined,
                billingAddress2: undefined,
                billingCity: undefined,
                billingCountry: undefined,
                billingEmail: undefined,
                billingPhone: undefined,
                billingState: undefined,
                billingZip: undefined,
                company: undefined,
                customerId: undefined,
                customerNumber: undefined,
                firstName: undefined,
                identifierFields: undefined,
                lastName: undefined,
                shippingAddress1: undefined,
                shippingAddress2: undefined,
                shippingCity: undefined,
                shippingCountry: undefined,
                shippingState: undefined,
                shippingZip: undefined,
            },
            entrypoint: undefined,
            orderDescription: undefined,
            orderId: undefined,
            paymentDetails: { currency: undefined, serviceFee: undefined, totalAmount: 1.1 },
            paymentMethod: {
                achAccount: undefined,
                achAccountType: undefined,
                achCode: undefined,
                achHolder: undefined,
                achRouting: undefined,
                method: "ach",
            },
            source: undefined,
            subdomain: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/MoneyIn/makecredit")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.moneyIn.credit({
                accountId: undefined,
                customerData: {
                    additionalData: undefined,
                    billingAddress1: undefined,
                    billingAddress2: undefined,
                    billingCity: undefined,
                    billingCountry: undefined,
                    billingEmail: undefined,
                    billingPhone: undefined,
                    billingState: undefined,
                    billingZip: undefined,
                    company: undefined,
                    customerId: undefined,
                    customerNumber: undefined,
                    firstName: undefined,
                    identifierFields: undefined,
                    lastName: undefined,
                    shippingAddress1: undefined,
                    shippingAddress2: undefined,
                    shippingCity: undefined,
                    shippingCountry: undefined,
                    shippingState: undefined,
                    shippingZip: undefined,
                },
                entrypoint: undefined,
                orderDescription: undefined,
                orderId: undefined,
                paymentDetails: {
                    currency: undefined,
                    serviceFee: undefined,
                    totalAmount: 1.1,
                },
                paymentMethod: {
                    achAccount: undefined,
                    achAccountType: undefined,
                    achCode: undefined,
                    achHolder: undefined,
                    achRouting: undefined,
                    method: "ach",
                },
                source: undefined,
                subdomain: undefined,
            });
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("Credit (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            accountId: undefined,
            customerData: {
                additionalData: undefined,
                billingAddress1: undefined,
                billingAddress2: undefined,
                billingCity: undefined,
                billingCountry: undefined,
                billingEmail: undefined,
                billingPhone: undefined,
                billingState: undefined,
                billingZip: undefined,
                company: undefined,
                customerId: undefined,
                customerNumber: undefined,
                firstName: undefined,
                identifierFields: undefined,
                lastName: undefined,
                shippingAddress1: undefined,
                shippingAddress2: undefined,
                shippingCity: undefined,
                shippingCountry: undefined,
                shippingState: undefined,
                shippingZip: undefined,
            },
            entrypoint: undefined,
            orderDescription: undefined,
            orderId: undefined,
            paymentDetails: { currency: undefined, serviceFee: undefined, totalAmount: 1.1 },
            paymentMethod: {
                achAccount: undefined,
                achAccountType: undefined,
                achCode: undefined,
                achHolder: undefined,
                achRouting: undefined,
                method: "ach",
            },
            source: undefined,
            subdomain: undefined,
        };
        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: "responseText" };
        server
            .mockEndpoint()
            .post("/MoneyIn/makecredit")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.moneyIn.credit({
                accountId: undefined,
                customerData: {
                    additionalData: undefined,
                    billingAddress1: undefined,
                    billingAddress2: undefined,
                    billingCity: undefined,
                    billingCountry: undefined,
                    billingEmail: undefined,
                    billingPhone: undefined,
                    billingState: undefined,
                    billingZip: undefined,
                    company: undefined,
                    customerId: undefined,
                    customerNumber: undefined,
                    firstName: undefined,
                    identifierFields: undefined,
                    lastName: undefined,
                    shippingAddress1: undefined,
                    shippingAddress2: undefined,
                    shippingCity: undefined,
                    shippingCountry: undefined,
                    shippingState: undefined,
                    shippingZip: undefined,
                },
                entrypoint: undefined,
                orderDescription: undefined,
                orderId: undefined,
                paymentDetails: {
                    currency: undefined,
                    serviceFee: undefined,
                    totalAmount: 1.1,
                },
                paymentMethod: {
                    achAccount: undefined,
                    achAccountType: undefined,
                    achCode: undefined,
                    achHolder: undefined,
                    achRouting: undefined,
                    method: "ach",
                },
                source: undefined,
                subdomain: undefined,
            });
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: "responseText",
            }),
        );
    });

    test("Details (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            BatchAmount: 10050.75,
            BatchNumber: "BN987654321",
            CfeeTransactions: [
                {
                    cFeeTransid: "cFeeTransid",
                    feeAmount: 1.1,
                    operation: "operation",
                    refundId: 4440,
                    responseData: { key: "value" },
                    settlementStatus: 1,
                    transactionTime: "2024-01-15T09:30:00Z",
                    transStatus: 1,
                },
            ],
            Customer: {
                AdditionalData: "AdditionalData",
                BillingAddress1: "123 Willow Lane",
                BillingAddress2: "Unit 101",
                BillingCity: "Greenfield",
                BillingCountry: "USA",
                BillingEmail: "elizabeta.marion@email.com",
                BillingPhone: "831-555-0123",
                BillingState: "CA",
                BillingZip: "93927",
                customerId: 4440,
                CustomerNumber: "CUST12345",
                customerStatus: 1,
                FirstName: "Elizabeta",
                Identifiers: ['\\"firstname\\"', '\\"lastname\\"', '\\"email\\"', '\\"customId\\"'],
                LastName: "Marion",
                ShippingAddress1: "123 Willow Lane",
                ShippingAddress2: "Unit 101",
                ShippingCity: "Greenfield",
                ShippingCountry: "USA",
                ShippingState: "CA",
                ShippingZip: "93927",
            },
            EntrypageId: 0,
            ExternalProcessorInformation: "[MER_xxxxxxxxxxxxxx]/[NNNNNNNNN]",
            FeeAmount: 5,
            GatewayTransId: "GT12345678",
            InvoiceData: {
                AdditionalData: "AdditionalData",
                company: "Wind in the Willows Neighborhood Association, LLC",
                discount: 0,
                dutyAmount: 0,
                firstName: "Elizabeta",
                freightAmount: 0,
                frequency: "one-time",
                invoiceAmount: 1000.5,
                invoiceDate: "2025-02-15",
                invoiceDueDate: "2025-03-15",
                invoiceEndDate: "2025-04-15",
                invoiceNumber: "INV-20242401",
                invoiceStatus: 1,
                invoiceType: 1,
                items: [
                    {
                        itemCategories: ["HOA Dues", "Annual Service"],
                        itemCommodityCode: "200300",
                        itemCost: 1000.5,
                        itemDescription: "Annual dues for Wind in the Willows HOA.",
                        itemMode: 1,
                        itemProductCode: "HOADUES2024",
                        itemProductName: "HOA Annual Dues",
                        itemQty: 1,
                        itemTaxAmount: 0,
                        itemTaxRate: 0,
                        itemTotalAmount: 1000.5,
                        itemUnitOfMeasure: "service",
                    },
                ],
                lastName: "Marion",
                notes: "Annual HOA dues for Wind in the Willows Neighborhood.",
                paymentTerms: "NET30",
                purchaseOrder: "PO-4321ABC",
                shippingAddress1: "123 Willow Lane",
                shippingAddress2: "Unit 101",
                shippingCity: "Greenfield",
                shippingCountry: "USA",
                shippingEmail: "elizabeta.marion@email.com",
                shippingFromZip: "93926",
                shippingPhone: "831-555-0123",
                shippingState: "CA",
                shippingZip: "93927",
                summaryCommodityCode: "HOA2024",
                tax: 0,
                termsConditions: "Full payment of HOA dues required within 30 days.",
            },
            Method: "online",
            NetAmount: 995.5,
            Operation: "Sale",
            OrderId: "DUES-123",
            OrgId: 500,
            ParentOrgName: "HOAManager Pro",
            PaymentData: {
                AccountExp: "11/29",
                AccountType: "visa",
                AccountZip: "90210",
                binData: {
                    binMatchedLength: "6",
                    binCardBrand: "Visa",
                    binCardType: "Credit",
                    binCardCategory: "PLATINUM",
                    binCardIssuer: "Bank of Example",
                    binCardIssuerCountry: "United States",
                    binCardIssuerCountryCodeA2: "US",
                    binCardIssuerCountryNumber: "840",
                    binCardIsRegulated: "false",
                    binCardUseCategory: "Consumer",
                    binCardIssuerCountryCodeA3: "USA",
                },
                HolderName: "Elizabeta Marion",
                Initiator: "merchant",
                MaskedAccount: "5xxxxxxxxxxx4321",
                orderDescription: "Annual HOA Dues for Wind in the Willows",
                paymentDetails: {
                    categories: [
                        { amount: 1000, label: "Deposit" },
                        { amount: 1000, label: "Deposit" },
                    ],
                    currency: "USD",
                    serviceFee: 5,
                    splitFunding: [{}],
                    totalAmount: 1000.5,
                },
                Sequence: "first",
                SignatureData: "image/png;base64,",
                StoredMethodUsageType: "unscheduled",
            },
            PaymentTransId: "12345-67890abcd",
            PayorId: 98765,
            PaypointDbaname: "Wind in the Willows",
            PaypointEntryname: "72aeon12",
            PaypointId: 12345,
            PaypointLegalname: "Wind in the Willows Neighborhood Association, LLC",
            PendingFeeAmount: 0,
            RefundId: 0,
            ResponseData: {
                authcode: "123456",
                avsresponse: "",
                avsresponse_text: "",
                cvvresponse: "",
                cvvresponse_text: "",
                orderid: "DUES-123",
                response_code: "200",
                response_code_text: "Transaction processed successfully.",
                responsetext: "Completed",
                transactionid: "TX987654321",
            },
            ReturnedId: 0,
            ScheduleReference: 0,
            SettlementStatus: 1,
            Source: "web",
            TotalAmount: 1000.5,
            TransactionEvents: [
                { EventTime: "2024-01-23T00:46:05Z", TransEvent: "Created" },
                {
                    EventData:
                        "response=1&responsetext=Approved&authcode=123456&transactionid=9144440&avsresponse=&cvvresponse=&orderid=434-38aXXXX8ae4cd496db737200000000&type=sale&response_code=100&verification_method=&emv_application_id=A0000000031000&emv_application_label=VISA&emv_application_preferred_name=&emv_application_pan_sequence_number=00&transaction_status_information=&masked_merchant_number=xxxxxxxx9100&masked_terminal_number=xx01",
                    EventTime: "2024-01-23T00:46:17Z",
                    TransEvent: "Approved",
                },
                {
                    EventData: {
                        action_type: "settle",
                        amount: 1000.5,
                        api_method: "",
                        batch_id: "68031555",
                        date: "20240123013414",
                        device_license_number: "",
                        device_nickname: "",
                        ip_address: "100.100.100.100",
                        processor_batch_id: "680317555",
                        processor_response_code: "",
                        processor_response_text: "",
                        requested_amountSpecified: false,
                        response_code: "100",
                        response_text: "SUCCESS",
                        source: "internal",
                        success: 1,
                        username: " ",
                    },
                    EventTime: "2024-01-23T01:34:14Z",
                    TransEvent: "Settled",
                },
            ],
            TransactionTime: "2024-02-15T10:30:00Z",
            TransStatus: 2,
        };
        server
            .mockEndpoint()
            .get("/MoneyIn/details/45-as456777hhhhhhhhhh77777777-324")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.moneyIn.details("45-as456777hhhhhhhhhh77777777-324");
        expect(response).toEqual({
            BatchAmount: 10050.75,
            BatchNumber: "BN987654321",
            CfeeTransactions: [
                {
                    cFeeTransid: "cFeeTransid",
                    feeAmount: 1.1,
                    operation: "operation",
                    refundId: 4440,
                    responseData: {
                        key: "value",
                    },
                    settlementStatus: 1,
                    transactionTime: "2024-01-15T09:30:00Z",
                    transStatus: 1,
                },
            ],
            Customer: {
                AdditionalData: "AdditionalData",
                BillingAddress1: "123 Willow Lane",
                BillingAddress2: "Unit 101",
                BillingCity: "Greenfield",
                BillingCountry: "USA",
                BillingEmail: "elizabeta.marion@email.com",
                BillingPhone: "831-555-0123",
                BillingState: "CA",
                BillingZip: "93927",
                customerId: 4440,
                CustomerNumber: "CUST12345",
                customerStatus: 1,
                FirstName: "Elizabeta",
                Identifiers: ['\\"firstname\\"', '\\"lastname\\"', '\\"email\\"', '\\"customId\\"'],
                LastName: "Marion",
                ShippingAddress1: "123 Willow Lane",
                ShippingAddress2: "Unit 101",
                ShippingCity: "Greenfield",
                ShippingCountry: "USA",
                ShippingState: "CA",
                ShippingZip: "93927",
            },
            EntrypageId: 0,
            ExternalProcessorInformation: "[MER_xxxxxxxxxxxxxx]/[NNNNNNNNN]",
            FeeAmount: 5,
            GatewayTransId: "GT12345678",
            InvoiceData: {
                AdditionalData: "AdditionalData",
                company: "Wind in the Willows Neighborhood Association, LLC",
                discount: 0,
                dutyAmount: 0,
                firstName: "Elizabeta",
                freightAmount: 0,
                frequency: "one-time",
                invoiceAmount: 1000.5,
                invoiceDate: "2025-02-15",
                invoiceDueDate: "2025-03-15",
                invoiceEndDate: "2025-04-15",
                invoiceNumber: "INV-20242401",
                invoiceStatus: 1,
                invoiceType: 1,
                items: [
                    {
                        itemCategories: ["HOA Dues", "Annual Service"],
                        itemCommodityCode: "200300",
                        itemCost: 1000.5,
                        itemDescription: "Annual dues for Wind in the Willows HOA.",
                        itemMode: 1,
                        itemProductCode: "HOADUES2024",
                        itemProductName: "HOA Annual Dues",
                        itemQty: 1,
                        itemTaxAmount: 0,
                        itemTaxRate: 0,
                        itemTotalAmount: 1000.5,
                        itemUnitOfMeasure: "service",
                    },
                ],
                lastName: "Marion",
                notes: "Annual HOA dues for Wind in the Willows Neighborhood.",
                paymentTerms: "NET30",
                purchaseOrder: "PO-4321ABC",
                shippingAddress1: "123 Willow Lane",
                shippingAddress2: "Unit 101",
                shippingCity: "Greenfield",
                shippingCountry: "USA",
                shippingEmail: "elizabeta.marion@email.com",
                shippingFromZip: "93926",
                shippingPhone: "831-555-0123",
                shippingState: "CA",
                shippingZip: "93927",
                summaryCommodityCode: "HOA2024",
                tax: 0,
                termsConditions: "Full payment of HOA dues required within 30 days.",
            },
            Method: "online",
            NetAmount: 995.5,
            Operation: "Sale",
            OrderId: "DUES-123",
            OrgId: 500,
            ParentOrgName: "HOAManager Pro",
            PaymentData: {
                AccountExp: "11/29",
                AccountType: "visa",
                AccountZip: "90210",
                binData: {
                    binMatchedLength: "6",
                    binCardBrand: "Visa",
                    binCardType: "Credit",
                    binCardCategory: "PLATINUM",
                    binCardIssuer: "Bank of Example",
                    binCardIssuerCountry: "United States",
                    binCardIssuerCountryCodeA2: "US",
                    binCardIssuerCountryNumber: "840",
                    binCardIsRegulated: "false",
                    binCardUseCategory: "Consumer",
                    binCardIssuerCountryCodeA3: "USA",
                },
                HolderName: "Elizabeta Marion",
                Initiator: "merchant",
                MaskedAccount: "5xxxxxxxxxxx4321",
                orderDescription: "Annual HOA Dues for Wind in the Willows",
                paymentDetails: {
                    categories: [
                        {
                            amount: 1000,
                            label: "Deposit",
                        },
                        {
                            amount: 1000,
                            label: "Deposit",
                        },
                    ],
                    currency: "USD",
                    serviceFee: 5,
                    splitFunding: [{}],
                    totalAmount: 1000.5,
                },
                Sequence: "first",
                SignatureData: "image/png;base64,",
                StoredMethodUsageType: "unscheduled",
            },
            PaymentTransId: "12345-67890abcd",
            PayorId: 98765,
            PaypointDbaname: "Wind in the Willows",
            PaypointEntryname: "72aeon12",
            PaypointId: 12345,
            PaypointLegalname: "Wind in the Willows Neighborhood Association, LLC",
            PendingFeeAmount: 0,
            RefundId: 0,
            ResponseData: {
                authcode: "123456",
                avsresponse: "",
                avsresponse_text: "",
                cvvresponse: "",
                cvvresponse_text: "",
                orderid: "DUES-123",
                response_code: "200",
                response_code_text: "Transaction processed successfully.",
                responsetext: "Completed",
                transactionid: "TX987654321",
            },
            ReturnedId: 0,
            ScheduleReference: 0,
            SettlementStatus: 1,
            Source: "web",
            TotalAmount: 1000.5,
            TransactionEvents: [
                {
                    EventTime: "2024-01-23T00:46:05Z",
                    TransEvent: "Created",
                },
                {
                    EventData:
                        "response=1&responsetext=Approved&authcode=123456&transactionid=9144440&avsresponse=&cvvresponse=&orderid=434-38aXXXX8ae4cd496db737200000000&type=sale&response_code=100&verification_method=&emv_application_id=A0000000031000&emv_application_label=VISA&emv_application_preferred_name=&emv_application_pan_sequence_number=00&transaction_status_information=&masked_merchant_number=xxxxxxxx9100&masked_terminal_number=xx01",
                    EventTime: "2024-01-23T00:46:17Z",
                    TransEvent: "Approved",
                },
                {
                    EventData: {
                        action_type: "settle",
                        amount: 1000.5,
                        api_method: "",
                        batch_id: "68031555",
                        date: "20240123013414",
                        device_license_number: "",
                        device_nickname: "",
                        ip_address: "100.100.100.100",
                        processor_batch_id: "680317555",
                        processor_response_code: "",
                        processor_response_text: "",
                        requested_amountSpecified: false,
                        response_code: "100",
                        response_text: "SUCCESS",
                        source: "internal",
                        success: 1,
                        username: " ",
                    },
                    EventTime: "2024-01-23T01:34:14Z",
                    TransEvent: "Settled",
                },
            ],
            TransactionTime: "2024-02-15T10:30:00Z",
            TransStatus: 2,
        });
    });

    test("Details (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/MoneyIn/details/transId")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.moneyIn.details("transId");
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("Details (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/MoneyIn/details/transId")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.moneyIn.details("transId");
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("Details (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/MoneyIn/details/transId")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.moneyIn.details("transId");
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("Details (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: "responseText" };
        server
            .mockEndpoint()
            .get("/MoneyIn/details/transId")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.moneyIn.details("transId");
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: "responseText",
            }),
        );
    });

    test("getpaid (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            customerData: { customerId: 4440 },
            entryPoint: "f743aed24a",
            ipaddress: "255.255.255.255",
            paymentDetails: { serviceFee: 0, totalAmount: 100 },
            paymentMethod: {
                cardcvv: "999",
                cardexp: "02/27",
                cardHolder: "John Cassian",
                cardnumber: "4111111111111111",
                cardzip: "12345",
                initiator: "payor",
                method: "card",
            },
        };
        const rawResponseBody = {
            responseText: "Success",
            isSuccess: true,
            pageIdentifier: undefined,
            responseData: {
                authCode: "VTLMC1",
                referenceId: "575-c490247af7ed403d86ba583507be61b0",
                resultCode: 1,
                resultText: "Approved",
                avsResponseText: "Exact match, Street address and 5-digit ZIP code both match",
                cvvResponseText:
                    "Not processed. Indicates that the expiration date was not provided with the request, or that the card does not have a valid CVV2 code. If the expiration date was not included with the request, resubmit the request with the expiration date.",
                customerId: 41892,
                methodReferenceId: undefined,
            },
        };
        server
            .mockEndpoint()
            .post("/MoneyIn/getpaid")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.moneyIn.getpaid({
            body: {
                customerData: {
                    customerId: 4440,
                },
                entryPoint: "f743aed24a",
                ipaddress: "255.255.255.255",
                paymentDetails: {
                    serviceFee: 0,
                    totalAmount: 100,
                },
                paymentMethod: {
                    cardcvv: "999",
                    cardexp: "02/27",
                    cardHolder: "John Cassian",
                    cardnumber: "4111111111111111",
                    cardzip: "12345",
                    initiator: "payor",
                    method: "card",
                },
            },
        });
        expect(response).toEqual({
            responseText: "Success",
            isSuccess: true,
            pageIdentifier: undefined,
            responseData: {
                authCode: "VTLMC1",
                referenceId: "575-c490247af7ed403d86ba583507be61b0",
                resultCode: 1,
                resultText: "Approved",
                avsResponseText: "Exact match, Street address and 5-digit ZIP code both match",
                cvvResponseText:
                    "Not processed. Indicates that the expiration date was not provided with the request, or that the card does not have a valid CVV2 code. If the expiration date was not included with the request, resubmit the request with the expiration date.",
                customerId: 41892,
                methodReferenceId: undefined,
            },
        });
    });

    test("getpaid (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            customerData: { customerId: 4440 },
            entryPoint: "f743aed24a",
            ipaddress: "255.255.255.255",
            paymentDetails: { serviceFee: 0, totalAmount: 100 },
            paymentMethod: {
                initiator: "payor",
                method: "card",
                storedMethodId: "1ec55af9-7b5a-4ff0-81ed-c12d2f95e135-4440",
                storedMethodUsageType: "unscheduled",
            },
        };
        const rawResponseBody = {
            responseText: "Success",
            isSuccess: true,
            pageIdentifier: undefined,
            responseData: {
                authCode: "AuthCode",
                referenceId: "45-erre-324",
                resultCode: 1,
                resultText: "Approved",
                avsResponseText: "No address or ZIP match only",
                cvvResponseText: "CVV2/CVC2 no match",
                customerId: 4440,
                methodReferenceId: "1ed73d3c67-4076-8f8c-9f26317762ef",
            },
        };
        server
            .mockEndpoint()
            .post("/MoneyIn/getpaid")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.moneyIn.getpaid({
            body: {
                customerData: {
                    customerId: 4440,
                },
                entryPoint: "f743aed24a",
                ipaddress: "255.255.255.255",
                paymentDetails: {
                    serviceFee: 0,
                    totalAmount: 100,
                },
                paymentMethod: {
                    initiator: "payor",
                    method: "card",
                    storedMethodId: "1ec55af9-7b5a-4ff0-81ed-c12d2f95e135-4440",
                    storedMethodUsageType: "unscheduled",
                },
            },
        });
        expect(response).toEqual({
            responseText: "Success",
            isSuccess: true,
            pageIdentifier: undefined,
            responseData: {
                authCode: "AuthCode",
                referenceId: "45-erre-324",
                resultCode: 1,
                resultText: "Approved",
                avsResponseText: "No address or ZIP match only",
                cvvResponseText: "CVV2/CVC2 no match",
                customerId: 4440,
                methodReferenceId: "1ed73d3c67-4076-8f8c-9f26317762ef",
            },
        });
    });

    test("getpaid (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            customerData: { customerId: 4440 },
            entryPoint: "f743aed24a",
            ipaddress: "255.255.255.255",
            paymentDetails: { serviceFee: 0, totalAmount: 100 },
            paymentMethod: { device: "6c361c7d-674c-44cc-b790-382b75d1xxx", method: "cloud", saveIfSuccess: true },
        };
        const rawResponseBody = {
            responseText: "Success",
            isSuccess: true,
            pageIdentifier: undefined,
            responseData: {
                authCode: "AuthCode",
                referenceId: "45-erre-324",
                resultCode: 1,
                resultText: "Approved",
                avsResponseText: "No address or ZIP match only",
                cvvResponseText: "CVV2/CVC2 no match",
                customerId: 4440,
                methodReferenceId: undefined,
            },
        };
        server
            .mockEndpoint()
            .post("/MoneyIn/getpaid")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.moneyIn.getpaid({
            body: {
                customerData: {
                    customerId: 4440,
                },
                entryPoint: "f743aed24a",
                ipaddress: "255.255.255.255",
                paymentDetails: {
                    serviceFee: 0,
                    totalAmount: 100,
                },
                paymentMethod: {
                    device: "6c361c7d-674c-44cc-b790-382b75d1xxx",
                    method: "cloud",
                    saveIfSuccess: true,
                },
            },
        });
        expect(response).toEqual({
            responseText: "Success",
            isSuccess: true,
            pageIdentifier: undefined,
            responseData: {
                authCode: "AuthCode",
                referenceId: "45-erre-324",
                resultCode: 1,
                resultText: "Approved",
                avsResponseText: "No address or ZIP match only",
                cvvResponseText: "CVV2/CVC2 no match",
                customerId: 4440,
                methodReferenceId: undefined,
            },
        });
    });

    test("getpaid (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            customerData: { customerId: 4440 },
            entryPoint: "f743aed24a",
            ipaddress: "255.255.255.255",
            paymentDetails: { serviceFee: 0, totalAmount: 100 },
            paymentMethod: {
                achAccount: "123123123",
                achAccountType: "Checking",
                achCode: "WEB",
                achHolder: "John Cassian",
                achHolderType: "personal",
                achRouting: "123123123",
                method: "ach",
            },
        };
        const rawResponseBody = {
            responseText: "Success",
            isSuccess: true,
            pageIdentifier: undefined,
            responseData: {
                authCode: "123456",
                referenceId: "132-d9719a411918429cb7ca465927969900",
                resultCode: 1,
                resultText: "Approved",
                avsResponseText: "",
                cvvResponseText: "",
                customerId: 545,
                methodReferenceId: undefined,
            },
        };
        server
            .mockEndpoint()
            .post("/MoneyIn/getpaid")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.moneyIn.getpaid({
            body: {
                customerData: {
                    customerId: 4440,
                },
                entryPoint: "f743aed24a",
                ipaddress: "255.255.255.255",
                paymentDetails: {
                    serviceFee: 0,
                    totalAmount: 100,
                },
                paymentMethod: {
                    achAccount: "123123123",
                    achAccountType: "Checking",
                    achCode: "WEB",
                    achHolder: "John Cassian",
                    achHolderType: "personal",
                    achRouting: "123123123",
                    method: "ach",
                },
            },
        });
        expect(response).toEqual({
            responseText: "Success",
            isSuccess: true,
            pageIdentifier: undefined,
            responseData: {
                authCode: "123456",
                referenceId: "132-d9719a411918429cb7ca465927969900",
                resultCode: 1,
                resultText: "Approved",
                avsResponseText: "",
                cvvResponseText: "",
                customerId: 545,
                methodReferenceId: undefined,
            },
        });
    });

    test("getpaid (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            customerData: {
                billingAddress1: "123 Walnut Street",
                billingCity: "Johnson City",
                billingCountry: "US",
                billingEmail: "john@email.com",
                billingPhone: "1234567890",
                billingState: "Johnson City",
                billingZip: "37615",
                customerNumber: "3456-7645A",
                firstName: "John",
                lastName: "Cassian",
            },
            entryPoint: "f743aed24a",
            ipaddress: "255.255.255.255",
            orderDescription: "New customer package",
            orderId: "982-102",
            paymentDetails: { serviceFee: 0, totalAmount: 1000 },
            paymentMethod: {
                cardcvv: "123",
                cardexp: "02/25",
                cardHolder: "John Cassian",
                cardnumber: "4111111111111111",
                cardzip: "12345",
                initiator: "payor",
                method: "card",
                saveIfSuccess: true,
            },
            source: "web",
        };
        const rawResponseBody = {
            responseText: "Success",
            isSuccess: true,
            pageIdentifier: undefined,
            responseData: {
                authCode: "AuthCode",
                referenceId: "45-erre-324",
                resultCode: 1,
                resultText: "Approved",
                avsResponseText: "Exact match, Street address and 5-digit ZIP code both match",
                cvvResponseText: "CVV2/CVC2 match",
                customerId: 4440,
                methodReferenceId: "1ed73d3c67-4076-8f8c-9f26317762ef",
            },
        };
        server
            .mockEndpoint()
            .post("/MoneyIn/getpaid")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.moneyIn.getpaid({
            body: {
                customerData: {
                    billingAddress1: "123 Walnut Street",
                    billingCity: "Johnson City",
                    billingCountry: "US",
                    billingEmail: "john@email.com",
                    billingPhone: "1234567890",
                    billingState: "Johnson City",
                    billingZip: "37615",
                    customerNumber: "3456-7645A",
                    firstName: "John",
                    lastName: "Cassian",
                },
                entryPoint: "f743aed24a",
                ipaddress: "255.255.255.255",
                orderDescription: "New customer package",
                orderId: "982-102",
                paymentDetails: {
                    serviceFee: 0,
                    totalAmount: 1000,
                },
                paymentMethod: {
                    cardcvv: "123",
                    cardexp: "02/25",
                    cardHolder: "John Cassian",
                    cardnumber: "4111111111111111",
                    cardzip: "12345",
                    initiator: "payor",
                    method: "card",
                    saveIfSuccess: true,
                },
                source: "web",
            },
        });
        expect(response).toEqual({
            responseText: "Success",
            isSuccess: true,
            pageIdentifier: undefined,
            responseData: {
                authCode: "AuthCode",
                referenceId: "45-erre-324",
                resultCode: 1,
                resultText: "Approved",
                avsResponseText: "Exact match, Street address and 5-digit ZIP code both match",
                cvvResponseText: "CVV2/CVC2 match",
                customerId: 4440,
                methodReferenceId: "1ed73d3c67-4076-8f8c-9f26317762ef",
            },
        });
    });

    test("getpaid (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            customerData: { customerId: 4440 },
            entryPoint: "f743aed24a",
            ipaddress: "255.255.255.255",
            paymentDetails: { serviceFee: 0, totalAmount: 100, currency: "CAD" },
            paymentMethod: {
                cardcvv: "999",
                cardexp: "02/27",
                cardHolder: "John Cassian",
                cardnumber: "4111111111111111",
                cardzip: "12345",
                initiator: "payor",
                method: "card",
            },
        };
        const rawResponseBody = {
            responseText: "Success",
            isSuccess: true,
            pageIdentifier: undefined,
            responseData: {
                authCode: "VTLMC1",
                referenceId: "575-c490247af7ed403d86ba583507be61b0",
                resultCode: 1,
                resultText: "Approved",
                avsResponseText: " ",
                cvvResponseText: "CVV2/CVC2 match",
                customerId: 41892,
                methodReferenceId: undefined,
            },
        };
        server
            .mockEndpoint()
            .post("/MoneyIn/getpaid")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.moneyIn.getpaid({
            body: {
                customerData: {
                    customerId: 4440,
                },
                entryPoint: "f743aed24a",
                ipaddress: "255.255.255.255",
                paymentDetails: {
                    serviceFee: 0,
                    totalAmount: 100,
                    currency: "CAD",
                },
                paymentMethod: {
                    cardcvv: "999",
                    cardexp: "02/27",
                    cardHolder: "John Cassian",
                    cardnumber: "4111111111111111",
                    cardzip: "12345",
                    initiator: "payor",
                    method: "card",
                },
            },
        });
        expect(response).toEqual({
            responseText: "Success",
            isSuccess: true,
            pageIdentifier: undefined,
            responseData: {
                authCode: "VTLMC1",
                referenceId: "575-c490247af7ed403d86ba583507be61b0",
                resultCode: 1,
                resultText: "Approved",
                avsResponseText: " ",
                cvvResponseText: "CVV2/CVC2 match",
                customerId: 41892,
                methodReferenceId: undefined,
            },
        });
    });

    test("getpaid (7)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            customerData: { customerId: 4440 },
            entryPoint: "f743aed24a",
            ipaddress: "255.255.255.255",
            paymentDetails: { serviceFee: 0, totalAmount: 100 },
            paymentMethod: {
                cardcvv: "999",
                cardexp: "02/27",
                cardHolder: "Kassiane Cassian",
                cardnumber: "4111111111111111",
                cardzip: "12345",
                initiator: "payor",
                method: "card",
            },
        };
        const rawResponseBody = {
            responseText: "Declined",
            isSuccess: false,
            pageIdentifier: undefined,
            responseData: {
                authCode: undefined,
                referenceId: "45-erre-324",
                resultCode: 1,
                resultText: "200: Transaction was declined by processor.. DECLINE",
                avsResponseText: "No address or ZIP match only",
                cvvResponseText: "CVV2/CVC2 no match",
                customerId: 4440,
                methodReferenceId: undefined,
            },
        };
        server
            .mockEndpoint()
            .post("/MoneyIn/getpaid")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.moneyIn.getpaid({
            body: {
                customerData: {
                    customerId: 4440,
                },
                entryPoint: "f743aed24a",
                ipaddress: "255.255.255.255",
                paymentDetails: {
                    serviceFee: 0,
                    totalAmount: 100,
                },
                paymentMethod: {
                    cardcvv: "999",
                    cardexp: "02/27",
                    cardHolder: "Kassiane Cassian",
                    cardnumber: "4111111111111111",
                    cardzip: "12345",
                    initiator: "payor",
                    method: "card",
                },
            },
        });
        expect(response).toEqual({
            responseText: "Declined",
            isSuccess: false,
            pageIdentifier: undefined,
            responseData: {
                authCode: undefined,
                referenceId: "45-erre-324",
                resultCode: 1,
                resultText: "200: Transaction was declined by processor.. DECLINE",
                avsResponseText: "No address or ZIP match only",
                cvvResponseText: "CVV2/CVC2 no match",
                customerId: 4440,
                methodReferenceId: undefined,
            },
        });
    });

    test("getpaid (8)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            accountId: undefined,
            customerData: undefined,
            entryPoint: undefined,
            invoiceData: undefined,
            ipaddress: undefined,
            orderDescription: undefined,
            orderId: undefined,
            paymentDetails: {
                categories: undefined,
                checkImage: undefined,
                checkNumber: undefined,
                currency: undefined,
                serviceFee: undefined,
                splitFunding: undefined,
                totalAmount: 1.1,
            },
            paymentMethod: {
                cardcvv: undefined,
                cardexp: "alpha",
                cardHolder: undefined,
                cardnumber: "cardnumber",
                cardzip: undefined,
                initiator: undefined,
                method: "card",
                saveIfSuccess: undefined,
            },
            source: undefined,
            subdomain: undefined,
            subscriptionId: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/MoneyIn/getpaid")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.moneyIn.getpaid({
                body: {
                    accountId: undefined,
                    customerData: undefined,
                    entryPoint: undefined,
                    invoiceData: undefined,
                    ipaddress: undefined,
                    orderDescription: undefined,
                    orderId: undefined,
                    paymentDetails: {
                        categories: undefined,
                        checkImage: undefined,
                        checkNumber: undefined,
                        currency: undefined,
                        serviceFee: undefined,
                        splitFunding: undefined,
                        totalAmount: 1.1,
                    },
                    paymentMethod: {
                        cardcvv: undefined,
                        cardexp: "alpha",
                        cardHolder: undefined,
                        cardnumber: "cardnumber",
                        cardzip: undefined,
                        initiator: undefined,
                        method: "card",
                        saveIfSuccess: undefined,
                    },
                    source: undefined,
                    subdomain: undefined,
                    subscriptionId: undefined,
                },
            });
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("getpaid (9)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            accountId: undefined,
            customerData: undefined,
            entryPoint: undefined,
            invoiceData: undefined,
            ipaddress: undefined,
            orderDescription: undefined,
            orderId: undefined,
            paymentDetails: {
                categories: undefined,
                checkImage: undefined,
                checkNumber: undefined,
                currency: undefined,
                serviceFee: undefined,
                splitFunding: undefined,
                totalAmount: 1.1,
            },
            paymentMethod: {
                cardcvv: undefined,
                cardexp: "alpha",
                cardHolder: undefined,
                cardnumber: "cardnumber",
                cardzip: undefined,
                initiator: undefined,
                method: "card",
                saveIfSuccess: undefined,
            },
            source: undefined,
            subdomain: undefined,
            subscriptionId: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/MoneyIn/getpaid")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.moneyIn.getpaid({
                body: {
                    accountId: undefined,
                    customerData: undefined,
                    entryPoint: undefined,
                    invoiceData: undefined,
                    ipaddress: undefined,
                    orderDescription: undefined,
                    orderId: undefined,
                    paymentDetails: {
                        categories: undefined,
                        checkImage: undefined,
                        checkNumber: undefined,
                        currency: undefined,
                        serviceFee: undefined,
                        splitFunding: undefined,
                        totalAmount: 1.1,
                    },
                    paymentMethod: {
                        cardcvv: undefined,
                        cardexp: "alpha",
                        cardHolder: undefined,
                        cardnumber: "cardnumber",
                        cardzip: undefined,
                        initiator: undefined,
                        method: "card",
                        saveIfSuccess: undefined,
                    },
                    source: undefined,
                    subdomain: undefined,
                    subscriptionId: undefined,
                },
            });
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("getpaid (10)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            accountId: undefined,
            customerData: undefined,
            entryPoint: undefined,
            invoiceData: undefined,
            ipaddress: undefined,
            orderDescription: undefined,
            orderId: undefined,
            paymentDetails: {
                categories: undefined,
                checkImage: undefined,
                checkNumber: undefined,
                currency: undefined,
                serviceFee: undefined,
                splitFunding: undefined,
                totalAmount: 1.1,
            },
            paymentMethod: {
                cardcvv: undefined,
                cardexp: "alpha",
                cardHolder: undefined,
                cardnumber: "cardnumber",
                cardzip: undefined,
                initiator: undefined,
                method: "card",
                saveIfSuccess: undefined,
            },
            source: undefined,
            subdomain: undefined,
            subscriptionId: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/MoneyIn/getpaid")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.moneyIn.getpaid({
                body: {
                    accountId: undefined,
                    customerData: undefined,
                    entryPoint: undefined,
                    invoiceData: undefined,
                    ipaddress: undefined,
                    orderDescription: undefined,
                    orderId: undefined,
                    paymentDetails: {
                        categories: undefined,
                        checkImage: undefined,
                        checkNumber: undefined,
                        currency: undefined,
                        serviceFee: undefined,
                        splitFunding: undefined,
                        totalAmount: 1.1,
                    },
                    paymentMethod: {
                        cardcvv: undefined,
                        cardexp: "alpha",
                        cardHolder: undefined,
                        cardnumber: "cardnumber",
                        cardzip: undefined,
                        initiator: undefined,
                        method: "card",
                        saveIfSuccess: undefined,
                    },
                    source: undefined,
                    subdomain: undefined,
                    subscriptionId: undefined,
                },
            });
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("getpaid (11)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            accountId: undefined,
            customerData: undefined,
            entryPoint: undefined,
            invoiceData: undefined,
            ipaddress: undefined,
            orderDescription: undefined,
            orderId: undefined,
            paymentDetails: {
                categories: undefined,
                checkImage: undefined,
                checkNumber: undefined,
                currency: undefined,
                serviceFee: undefined,
                splitFunding: undefined,
                totalAmount: 1.1,
            },
            paymentMethod: {
                cardcvv: undefined,
                cardexp: "alpha",
                cardHolder: undefined,
                cardnumber: "cardnumber",
                cardzip: undefined,
                initiator: undefined,
                method: "card",
                saveIfSuccess: undefined,
            },
            source: undefined,
            subdomain: undefined,
            subscriptionId: undefined,
        };
        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: "responseText" };
        server
            .mockEndpoint()
            .post("/MoneyIn/getpaid")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.moneyIn.getpaid({
                body: {
                    accountId: undefined,
                    customerData: undefined,
                    entryPoint: undefined,
                    invoiceData: undefined,
                    ipaddress: undefined,
                    orderDescription: undefined,
                    orderId: undefined,
                    paymentDetails: {
                        categories: undefined,
                        checkImage: undefined,
                        checkNumber: undefined,
                        currency: undefined,
                        serviceFee: undefined,
                        splitFunding: undefined,
                        totalAmount: 1.1,
                    },
                    paymentMethod: {
                        cardcvv: undefined,
                        cardexp: "alpha",
                        cardHolder: undefined,
                        cardnumber: "cardnumber",
                        cardzip: undefined,
                        initiator: undefined,
                        method: "card",
                        saveIfSuccess: undefined,
                    },
                    source: undefined,
                    subdomain: undefined,
                    subscriptionId: undefined,
                },
            });
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: "responseText",
            }),
        );
    });

    test("Reverse (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            responseCode: 1,
            pageIdentifier: undefined,
            roomId: 0,
            isSuccess: true,
            responseText: "Success",
            responseData: {
                authCode: "A0000",
                referenceId: "255-fb61db4171334aa79224b019f090e4c5",
                resultCode: 1,
                resultText: "REVERSED",
                avsResponseText: undefined,
                cvvResponseText: null,
                customerId: null,
                methodReferenceId: null,
            },
        };
        server
            .mockEndpoint()
            .get("/MoneyIn/reverse/10-3ffa27df-b171-44e0-b251-e95fbfc7a723/0")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.moneyIn.reverse(0, "10-3ffa27df-b171-44e0-b251-e95fbfc7a723");
        expect(response).toEqual({
            responseCode: 1,
            pageIdentifier: undefined,
            roomId: 0,
            isSuccess: true,
            responseText: "Success",
            responseData: {
                authCode: "A0000",
                referenceId: "255-fb61db4171334aa79224b019f090e4c5",
                resultCode: 1,
                resultText: "REVERSED",
                avsResponseText: undefined,
                cvvResponseText: null,
                customerId: null,
                methodReferenceId: null,
            },
        });
    });

    test("Reverse (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            responseCode: 1,
            pageIdentifier: undefined,
            roomId: 0,
            isSuccess: true,
            responseText: "Success",
            responseData: {
                authCode: "A0000",
                referenceId: "255-fb61db4171334aa79224b019f090e4c5",
                resultCode: 10,
                resultText: "INITIATED",
                avsResponseText: undefined,
                cvvResponseText: null,
                customerId: null,
                methodReferenceId: null,
            },
        };
        server
            .mockEndpoint()
            .get("/MoneyIn/reverse/10-3ffa27df-b171-44e0-b251-e95fbfc7a723/53.76")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.moneyIn.reverse(53.76, "10-3ffa27df-b171-44e0-b251-e95fbfc7a723");
        expect(response).toEqual({
            responseCode: 1,
            pageIdentifier: undefined,
            roomId: 0,
            isSuccess: true,
            responseText: "Success",
            responseData: {
                authCode: "A0000",
                referenceId: "255-fb61db4171334aa79224b019f090e4c5",
                resultCode: 10,
                resultText: "INITIATED",
                avsResponseText: undefined,
                cvvResponseText: null,
                customerId: null,
                methodReferenceId: null,
            },
        });
    });

    test("Reverse (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/MoneyIn/reverse/transId/1.1")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.moneyIn.reverse(1.1, "transId");
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("Reverse (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/MoneyIn/reverse/transId/1.1")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.moneyIn.reverse(1.1, "transId");
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("Reverse (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/MoneyIn/reverse/transId/1.1")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.moneyIn.reverse(1.1, "transId");
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("Reverse (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: "responseText" };
        server
            .mockEndpoint()
            .get("/MoneyIn/reverse/transId/1.1")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.moneyIn.reverse(1.1, "transId");
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: "responseText",
            }),
        );
    });

    test("Refund (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            responseText: "Success",
            isSuccess: true,
            responseData: {
                authCode: "A0000",
                expectedProcessingDateTime: "2025-02-15T10:30:00Z",
                referenceId: "10-3ffa27df-b171-44e0-b251-e95fbfc7a723",
                resultCode: 10,
                resultText: "INITIATED",
                avsResponseText: undefined,
                cvvResponseText: null,
                customerId: null,
                methodReferenceId: null,
            },
            pageidentifier: undefined,
        };
        server
            .mockEndpoint()
            .get("/MoneyIn/refund/10-3ffa27df-b171-44e0-b251-e95fbfc7a723/0")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.moneyIn.refund(0, "10-3ffa27df-b171-44e0-b251-e95fbfc7a723");
        expect(response).toEqual({
            responseText: "Success",
            isSuccess: true,
            responseData: {
                authCode: "A0000",
                expectedProcessingDateTime: "2025-02-15T10:30:00Z",
                referenceId: "10-3ffa27df-b171-44e0-b251-e95fbfc7a723",
                resultCode: 10,
                resultText: "INITIATED",
                avsResponseText: undefined,
                cvvResponseText: null,
                customerId: null,
                methodReferenceId: null,
            },
            pageidentifier: undefined,
        });
    });

    test("Refund (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            responseText: "Success",
            isSuccess: true,
            responseData: {
                authCode: "A0000",
                referenceId: "10-3ffa27df-b171-44e0-b251-e95fbfc7a723",
                resultCode: 1,
                resultText: "CAPTURED",
                avsResponseText: undefined,
                cvvResponseText: null,
                customerId: null,
                methodReferenceId: null,
            },
            pageidentifier: undefined,
        };
        server
            .mockEndpoint()
            .get("/MoneyIn/refund/10-3ffa27df-b171-44e0-b251-e95fbfc7a723/100.99")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.moneyIn.refund(100.99, "10-3ffa27df-b171-44e0-b251-e95fbfc7a723");
        expect(response).toEqual({
            responseText: "Success",
            isSuccess: true,
            responseData: {
                authCode: "A0000",
                referenceId: "10-3ffa27df-b171-44e0-b251-e95fbfc7a723",
                resultCode: 1,
                resultText: "CAPTURED",
                avsResponseText: undefined,
                cvvResponseText: null,
                customerId: null,
                methodReferenceId: null,
            },
            pageidentifier: undefined,
        });
    });

    test("Refund (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/MoneyIn/refund/transId/1.1")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.moneyIn.refund(1.1, "transId");
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("Refund (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/MoneyIn/refund/transId/1.1")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.moneyIn.refund(1.1, "transId");
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("Refund (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/MoneyIn/refund/transId/1.1")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.moneyIn.refund(1.1, "transId");
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("Refund (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: "responseText" };
        server
            .mockEndpoint()
            .get("/MoneyIn/refund/transId/1.1")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.moneyIn.refund(1.1, "transId");
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: "responseText",
            }),
        );
    });

    test("RefundWithInstructions (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            source: "api",
            orderDescription: "Materials deposit",
            amount: 100,
            refundDetails: {
                splitRefunding: [
                    {
                        originationEntryPoint: "7f1a381696",
                        accountId: "187-342",
                        description: "Refunding undelivered materials",
                        amount: 60,
                    },
                    {
                        originationEntryPoint: "7f1a381696",
                        accountId: "187-343",
                        description: "Refunding deposit for undelivered materials",
                        amount: 40,
                    },
                ],
            },
        };
        const rawResponseBody = {
            responseText: "Success",
            isSuccess: true,
            responseData: {
                authCode: "",
                referenceId: "288-a1192b75-99e9-4d43-8af1-7ae9ab7da4f4",
                resultCode: 1,
                resultText: "CAPTURED",
                avsResponseText: undefined,
                cvvResponseText: null,
                customerId: null,
                methodReferenceId: null,
            },
            pageidentifier: undefined,
        };
        server
            .mockEndpoint()
            .post("/MoneyIn/refund/10-3ffa27df-b171-44e0-b251-e95fbfc7a723")
            .header("idempotencyKey", "8A29FC40-CA47-1067-B31D-00DD010662DB")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.moneyIn.refundWithInstructions("10-3ffa27df-b171-44e0-b251-e95fbfc7a723", {
            idempotencyKey: "8A29FC40-CA47-1067-B31D-00DD010662DB",
            source: "api",
            orderDescription: "Materials deposit",
            amount: 100,
            refundDetails: {
                splitRefunding: [
                    {
                        originationEntryPoint: "7f1a381696",
                        accountId: "187-342",
                        description: "Refunding undelivered materials",
                        amount: 60,
                    },
                    {
                        originationEntryPoint: "7f1a381696",
                        accountId: "187-343",
                        description: "Refunding deposit for undelivered materials",
                        amount: 40,
                    },
                ],
            },
        });
        expect(response).toEqual({
            responseText: "Success",
            isSuccess: true,
            responseData: {
                authCode: "",
                referenceId: "288-a1192b75-99e9-4d43-8af1-7ae9ab7da4f4",
                resultCode: 1,
                resultText: "CAPTURED",
                avsResponseText: undefined,
                cvvResponseText: null,
                customerId: null,
                methodReferenceId: null,
            },
            pageidentifier: undefined,
        });
    });

    test("RefundWithInstructions (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            source: "api",
            orderDescription: "Materials deposit",
            amount: 70,
            refundDetails: {
                splitRefunding: [
                    {
                        originationEntryPoint: "7f1a381696",
                        accountId: "187-342",
                        description: "Refunding undelivered materials",
                        amount: 40,
                    },
                    {
                        originationEntryPoint: "7f1a381696",
                        accountId: "187-343",
                        description: "Refunding deposit for undelivered materials",
                        amount: 30,
                    },
                ],
            },
        };
        const rawResponseBody = {
            responseText: "Success",
            isSuccess: true,
            responseData: {
                authCode: "",
                referenceId: "288-a1192b75-99e9-4d43-8af1-7ae9ab7da4f4",
                resultCode: 1,
                resultText: "CAPTURED",
                avsResponseText: undefined,
                cvvResponseText: null,
                customerId: null,
                methodReferenceId: null,
            },
            pageidentifier: undefined,
        };
        server
            .mockEndpoint()
            .post("/MoneyIn/refund/10-3ffa27df-b171-44e0-b251-e95fbfc7a723")
            .header("idempotencyKey", "8A29FC40-CA47-1067-B31D-00DD010662DB")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.moneyIn.refundWithInstructions("10-3ffa27df-b171-44e0-b251-e95fbfc7a723", {
            idempotencyKey: "8A29FC40-CA47-1067-B31D-00DD010662DB",
            source: "api",
            orderDescription: "Materials deposit",
            amount: 70,
            refundDetails: {
                splitRefunding: [
                    {
                        originationEntryPoint: "7f1a381696",
                        accountId: "187-342",
                        description: "Refunding undelivered materials",
                        amount: 40,
                    },
                    {
                        originationEntryPoint: "7f1a381696",
                        accountId: "187-343",
                        description: "Refunding deposit for undelivered materials",
                        amount: 30,
                    },
                ],
            },
        });
        expect(response).toEqual({
            responseText: "Success",
            isSuccess: true,
            responseData: {
                authCode: "",
                referenceId: "288-a1192b75-99e9-4d43-8af1-7ae9ab7da4f4",
                resultCode: 1,
                resultText: "CAPTURED",
                avsResponseText: undefined,
                cvvResponseText: null,
                customerId: null,
                methodReferenceId: null,
            },
            pageidentifier: undefined,
        });
    });

    test("RefundWithInstructions (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            amount: undefined,
            ipaddress: undefined,
            orderDescription: undefined,
            orderId: undefined,
            refundDetails: undefined,
            source: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/MoneyIn/refund/transId")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.moneyIn.refundWithInstructions("transId", {
                amount: undefined,
                ipaddress: undefined,
                orderDescription: undefined,
                orderId: undefined,
                refundDetails: undefined,
                source: undefined,
            });
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("RefundWithInstructions (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            amount: undefined,
            ipaddress: undefined,
            orderDescription: undefined,
            orderId: undefined,
            refundDetails: undefined,
            source: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/MoneyIn/refund/transId")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.moneyIn.refundWithInstructions("transId", {
                amount: undefined,
                ipaddress: undefined,
                orderDescription: undefined,
                orderId: undefined,
                refundDetails: undefined,
                source: undefined,
            });
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("RefundWithInstructions (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            amount: undefined,
            ipaddress: undefined,
            orderDescription: undefined,
            orderId: undefined,
            refundDetails: undefined,
            source: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/MoneyIn/refund/transId")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.moneyIn.refundWithInstructions("transId", {
                amount: undefined,
                ipaddress: undefined,
                orderDescription: undefined,
                orderId: undefined,
                refundDetails: undefined,
                source: undefined,
            });
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("RefundWithInstructions (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            amount: undefined,
            ipaddress: undefined,
            orderDescription: undefined,
            orderId: undefined,
            refundDetails: undefined,
            source: undefined,
        };
        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: "responseText" };
        server
            .mockEndpoint()
            .post("/MoneyIn/refund/transId")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.moneyIn.refundWithInstructions("transId", {
                amount: undefined,
                ipaddress: undefined,
                orderDescription: undefined,
                orderId: undefined,
                refundDetails: undefined,
                source: undefined,
            });
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: "responseText",
            }),
        );
    });

    test("ReverseCredit (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            isSuccess: true,
            responseData: {
                authCode: null,
                avsResponseText: null,
                customerId: 4440,
                cvvResponseText: null,
                referenceId: "148-7e1528b9b7ab56d0bf3b837237b84479",
                resultCode: 1,
                resultText: "transaction processed.",
            },
            responseText: "Success",
        };
        server
            .mockEndpoint()
            .get("/MoneyIn/reverseCredit/45-as456777hhhhhhhhhh77777777-324")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.moneyIn.reverseCredit("45-as456777hhhhhhhhhh77777777-324");
        expect(response).toEqual({
            isSuccess: true,
            responseData: {
                authCode: null,
                avsResponseText: null,
                customerId: 4440,
                cvvResponseText: null,
                referenceId: "148-7e1528b9b7ab56d0bf3b837237b84479",
                resultCode: 1,
                resultText: "transaction processed.",
            },
            responseText: "Success",
        });
    });

    test("ReverseCredit (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/MoneyIn/reverseCredit/transId")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.moneyIn.reverseCredit("transId");
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("ReverseCredit (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/MoneyIn/reverseCredit/transId")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.moneyIn.reverseCredit("transId");
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("ReverseCredit (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/MoneyIn/reverseCredit/transId")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.moneyIn.reverseCredit("transId");
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("ReverseCredit (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: "responseText" };
        server
            .mockEndpoint()
            .get("/MoneyIn/reverseCredit/transId")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.moneyIn.reverseCredit("transId");
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: "responseText",
            }),
        );
    });

    test("SendReceipt2Trans (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: true, pageIdentifier: "null", responseText: "Success" };
        server
            .mockEndpoint()
            .get("/MoneyIn/sendreceipt/45-as456777hhhhhhhhhh77777777-324")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.moneyIn.sendReceipt2Trans("45-as456777hhhhhhhhhh77777777-324", {
            email: "example@email.com",
        });
        expect(response).toEqual({
            isSuccess: true,
            pageIdentifier: "null",
            responseText: "Success",
        });
    });

    test("SendReceipt2Trans (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/MoneyIn/sendreceipt/transId")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.moneyIn.sendReceipt2Trans("transId");
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("SendReceipt2Trans (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/MoneyIn/sendreceipt/transId")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.moneyIn.sendReceipt2Trans("transId");
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("SendReceipt2Trans (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/MoneyIn/sendreceipt/transId")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.moneyIn.sendReceipt2Trans("transId");
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("SendReceipt2Trans (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: "responseText" };
        server
            .mockEndpoint()
            .get("/MoneyIn/sendreceipt/transId")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.moneyIn.sendReceipt2Trans("transId");
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: "responseText",
            }),
        );
    });

    test("Validate (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            entryPoint: "entry132",
            paymentMethod: {
                method: "card",
                cardnumber: "4360000001000005",
                cardexp: "12/29",
                cardzip: "14602-8328",
                cardHolder: "Dianne Becker-Smith",
            },
        };
        const rawResponseBody = {
            isSuccess: true,
            responseData: {
                authCode: "",
                referenceId: "",
                resultCode: 1,
                resultText: "Validated",
                avsResponseText: "Zip code provided",
                cvvResponseText: "",
                customerId: 0,
                methodReferenceId: undefined,
            },
            responseText: "Success",
        };
        server
            .mockEndpoint()
            .post("/MoneyIn/validate")
            .header("idempotencyKey", "6B29FC40-CA47-1067-B31D-00DD010662DA")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.moneyIn.validate({
            idempotencyKey: "6B29FC40-CA47-1067-B31D-00DD010662DA",
            entryPoint: "entry132",
            paymentMethod: {
                method: "card",
                cardnumber: "4360000001000005",
                cardexp: "12/29",
                cardzip: "14602-8328",
                cardHolder: "Dianne Becker-Smith",
            },
        });
        expect(response).toEqual({
            isSuccess: true,
            responseData: {
                authCode: "",
                referenceId: "",
                resultCode: 1,
                resultText: "Validated",
                avsResponseText: "Zip code provided",
                cvvResponseText: "",
                customerId: 0,
                methodReferenceId: undefined,
            },
            responseText: "Success",
        });
    });

    test("Validate (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            accountId: undefined,
            entryPoint: "entryPoint",
            orderDescription: undefined,
            orderId: undefined,
            paymentMethod: {
                method: "card",
                cardnumber: "cardnumber",
                cardexp: "alpha",
                cardzip: "cardzip",
                cardHolder: "cardHolder",
            },
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/MoneyIn/validate")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.moneyIn.validate({
                accountId: undefined,
                entryPoint: "entryPoint",
                orderDescription: undefined,
                orderId: undefined,
                paymentMethod: {
                    method: "card",
                    cardnumber: "cardnumber",
                    cardexp: "alpha",
                    cardzip: "cardzip",
                    cardHolder: "cardHolder",
                },
            });
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("Validate (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            accountId: undefined,
            entryPoint: "entryPoint",
            orderDescription: undefined,
            orderId: undefined,
            paymentMethod: {
                method: "card",
                cardnumber: "cardnumber",
                cardexp: "alpha",
                cardzip: "cardzip",
                cardHolder: "cardHolder",
            },
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/MoneyIn/validate")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.moneyIn.validate({
                accountId: undefined,
                entryPoint: "entryPoint",
                orderDescription: undefined,
                orderId: undefined,
                paymentMethod: {
                    method: "card",
                    cardnumber: "cardnumber",
                    cardexp: "alpha",
                    cardzip: "cardzip",
                    cardHolder: "cardHolder",
                },
            });
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("Validate (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            accountId: undefined,
            entryPoint: "entryPoint",
            orderDescription: undefined,
            orderId: undefined,
            paymentMethod: {
                method: "card",
                cardnumber: "cardnumber",
                cardexp: "alpha",
                cardzip: "cardzip",
                cardHolder: "cardHolder",
            },
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/MoneyIn/validate")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.moneyIn.validate({
                accountId: undefined,
                entryPoint: "entryPoint",
                orderDescription: undefined,
                orderId: undefined,
                paymentMethod: {
                    method: "card",
                    cardnumber: "cardnumber",
                    cardexp: "alpha",
                    cardzip: "cardzip",
                    cardHolder: "cardHolder",
                },
            });
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("Validate (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            accountId: undefined,
            entryPoint: "entryPoint",
            orderDescription: undefined,
            orderId: undefined,
            paymentMethod: {
                method: "card",
                cardnumber: "cardnumber",
                cardexp: "alpha",
                cardzip: "cardzip",
                cardHolder: "cardHolder",
            },
        };
        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: "responseText" };
        server
            .mockEndpoint()
            .post("/MoneyIn/validate")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.moneyIn.validate({
                accountId: undefined,
                entryPoint: "entryPoint",
                orderDescription: undefined,
                orderId: undefined,
                paymentMethod: {
                    method: "card",
                    cardnumber: "cardnumber",
                    cardexp: "alpha",
                    cardzip: "cardzip",
                    cardHolder: "cardHolder",
                },
            });
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: "responseText",
            }),
        );
    });

    test("Void (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            responseCode: 1,
            pageIdentifier: undefined,
            roomId: 0,
            isSuccess: true,
            responseText: "Success",
            responseData: {
                authCode: "123456",
                referenceId: "132-9eab3dfe958146639944aebcab3e9e28",
                resultCode: 1,
                resultText: "Transaction Void Successful",
                avsResponseText: undefined,
                cvvResponseText: undefined,
                customerId: undefined,
                methodReferenceId: undefined,
            },
        };
        server
            .mockEndpoint()
            .get("/MoneyIn/void/10-3ffa27df-b171-44e0-b251-e95fbfc7a723")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.moneyIn.void("10-3ffa27df-b171-44e0-b251-e95fbfc7a723");
        expect(response).toEqual({
            responseCode: 1,
            pageIdentifier: undefined,
            roomId: 0,
            isSuccess: true,
            responseText: "Success",
            responseData: {
                authCode: "123456",
                referenceId: "132-9eab3dfe958146639944aebcab3e9e28",
                resultCode: 1,
                resultText: "Transaction Void Successful",
                avsResponseText: undefined,
                cvvResponseText: undefined,
                customerId: undefined,
                methodReferenceId: undefined,
            },
        });
    });

    test("Void (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/MoneyIn/void/transId")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.moneyIn.void("transId");
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("Void (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/MoneyIn/void/transId")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.moneyIn.void("transId");
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("Void (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/MoneyIn/void/transId")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.moneyIn.void("transId");
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("Void (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: "responseText" };
        server
            .mockEndpoint()
            .get("/MoneyIn/void/transId")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.moneyIn.void("transId");
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: "responseText",
            }),
        );
    });
});
