/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { PayabliClient } from "../../src/Client";
import * as Payabli from "../../src/api/index";

describe("Query", () => {
    test("ListBatchDetails (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            Records: [
                {
                    Id: 25048,
                    Method: "ach",
                    WalletType: null,
                    SettledAmount: 0.5,
                    Type: "credit",
                    BatchNumber: "batch-100-20-2024",
                    BatchAmount: 32,
                    PaymentTransId: "245-9e4072eef77e45979ea0e49f680000X",
                    PaymentTransStatus: 1,
                    ScheduleReference: 0,
                    GatewayTransId: "TRN_XXXXX",
                    OrderId: "",
                    TransMethod: "ach",
                    PaymentData: {
                        AccountType: "Checking",
                        HolderName: "Lydia Marshall",
                        MaskedAccount: "1XXXXXX5678",
                        paymentDetails: {
                            categories: [{ amount: 1000, label: "Deposit" }],
                            currency: "USD",
                            serviceFee: 0,
                            splitFunding: [{}],
                            totalAmount: 2,
                        },
                    },
                    NetAmount: 2,
                    Operation: "Sale",
                    Category: "auth",
                    Source: "api",
                    Status: 1,
                    TransactionTime: "2024-11-19T15:58:01Z",
                    Customer: {
                        AdditionalData: undefined,
                        BillingAddress1: "100 Golden Ridge Drive",
                        BillingAddress2: "STE 100",
                        BillingCity: "Mendota",
                        BillingCountry: "US",
                        BillingEmail: "lydia@example.com",
                        BillingPhone: "+12345678",
                        BillingState: "VA",
                        BillingZip: "20147",
                        customerId: 2707,
                        CustomerNumber: "901102",
                        customerStatus: 1,
                        FirstName: "Lydia",
                        LastName: "Marshall",
                    },
                    SettlementDate: "2024-11-20T00:00:00Z",
                    PaymentSettlementStatus: 1,
                    BatchStatus: 1,
                    DepositDate: "2024-11-22T00:00:00Z",
                    ExpectedDepositDate: "2024-11-22T00:00:00Z",
                    MaskedAccount: "1XXXXXX5678",
                    CreatedAt: "2024-11-19T15:58:01Z",
                    PaypointLegalname: "Gruzya Adventure Outfitters, LLC",
                    ResponseData: {
                        authcode: "",
                        avsresponse_text: "",
                        cvvresponse_text: "",
                        response_code: "100",
                        response_code_text: "Operation successful.",
                        responsetext: "CAPTURED",
                        transactionid: "TRN_XXXXX",
                    },
                    PaypointDbaname: "Gruzya Adventure Outfitters, LLC",
                    ParentOrgName: "Pilgrim Planner",
                    ParentOrgId: 123,
                    PaypointEntryname: "7f1a3816XX",
                    DeviceId: "",
                    RetrievalId: 0,
                    ChargebackId: 0,
                    AchHolderType: "personal",
                    AchSecCode: "PPD",
                    ConnectorName: "DefaultConnector",
                    EntrypageId: 0,
                    FeeAmount: 0,
                    OrgId: 123,
                    PayorId: 2707,
                    PaypointId: 123,
                    PendingFeeAmount: 0,
                    RefundId: 0,
                    ReturnedId: 0,
                    splitFundingInstructions: [],
                    TotalAmount: 2,
                    CfeeTransactions: [],
                    invoiceData: null,
                    TransactionEvents: [
                        { EventTime: "2024-11-19T15:57:40Z", TransEvent: "Created" },
                        {
                            EventData: {
                                account_id: "TRA_XXXXX",
                                account_name: "123456",
                                action: {
                                    app_id: "XXXXX",
                                    app_name: "PayAbli",
                                    id: "ACT_XXXXX",
                                    result_code: "SUCCESS",
                                    time_created: "2024-11-19T20:58:01.583Z",
                                    type: "AUTHORIZE",
                                },
                                amount: "200",
                                batch_id: "",
                                capture_mode: "AUTO",
                                channel: "CNP",
                                country: "US",
                                currency: "USD",
                                fees: { amount: "0", rate: "0.00", total_amount: "0" },
                                id: "TRN_XXXXX",
                                merchant_amount: "200",
                                merchant_id: "MER_XXXXX",
                                merchant_name: "Henriette97",
                                order: { reference: "" },
                                payment_method: {
                                    bank_transfer: {
                                        account_type: "CHECKING",
                                        bank: { name: "" },
                                        masked_account_number_last4: "XXXX5678",
                                    },
                                    entry_mode: "ECOM",
                                    message: "Success",
                                    narrative: "Lydia Marshall",
                                    result: "00",
                                },
                                reference: "245-XXXXX",
                                status: "CAPTURED",
                                time_created: "2024-11-19T20:58:01.583Z",
                                type: "SALE",
                            },
                            EventTime: "2024-11-19T20:58:01Z",
                            TransEvent: "Approved",
                        },
                        { EventTime: "2024-11-20T03:05:10Z", TransEvent: "ClosedBatch" },
                    ],
                    externalPaypointID: "ext-paypoint-123",
                    isHold: 0,
                },
            ],
            Summary: {
                serviceFees: 852.48,
                transferAmount: 0,
                refunds: -3521.85,
                heldAmount: 3.7,
                totalRecords: 21872,
                totalAmount: 61645.74,
                totalNetAmount: 61645.74,
                totalPages: 21872,
                pageSize: 0,
                pageidentifier: null,
            },
        };
        server
            .mockEndpoint()
            .get("/Query/batchDetails/8cfec329267")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.query.listBatchDetails("8cfec329267", {
            fromRecord: 251,
            limitRecord: 0,
            sortBy: "desc(field_name)",
        });
        expect(response).toEqual({
            Records: [
                {
                    Id: 25048,
                    Method: "ach",
                    WalletType: null,
                    SettledAmount: 0.5,
                    Type: "credit",
                    BatchNumber: "batch-100-20-2024",
                    BatchAmount: 32,
                    PaymentTransId: "245-9e4072eef77e45979ea0e49f680000X",
                    PaymentTransStatus: 1,
                    ScheduleReference: 0,
                    GatewayTransId: "TRN_XXXXX",
                    OrderId: "",
                    TransMethod: "ach",
                    PaymentData: {
                        AccountType: "Checking",
                        HolderName: "Lydia Marshall",
                        MaskedAccount: "1XXXXXX5678",
                        paymentDetails: {
                            categories: [
                                {
                                    amount: 1000,
                                    label: "Deposit",
                                },
                            ],
                            currency: "USD",
                            serviceFee: 0,
                            splitFunding: [{}],
                            totalAmount: 2,
                        },
                    },
                    NetAmount: 2,
                    Operation: "Sale",
                    Category: "auth",
                    Source: "api",
                    Status: 1,
                    TransactionTime: "2024-11-19T15:58:01Z",
                    Customer: {
                        AdditionalData: undefined,
                        BillingAddress1: "100 Golden Ridge Drive",
                        BillingAddress2: "STE 100",
                        BillingCity: "Mendota",
                        BillingCountry: "US",
                        BillingEmail: "lydia@example.com",
                        BillingPhone: "+12345678",
                        BillingState: "VA",
                        BillingZip: "20147",
                        customerId: 2707,
                        CustomerNumber: "901102",
                        customerStatus: 1,
                        FirstName: "Lydia",
                        LastName: "Marshall",
                    },
                    SettlementDate: "2024-11-20T00:00:00Z",
                    PaymentSettlementStatus: 1,
                    BatchStatus: 1,
                    DepositDate: "2024-11-22T00:00:00Z",
                    ExpectedDepositDate: "2024-11-22T00:00:00Z",
                    MaskedAccount: "1XXXXXX5678",
                    CreatedAt: "2024-11-19T15:58:01Z",
                    PaypointLegalname: "Gruzya Adventure Outfitters, LLC",
                    ResponseData: {
                        authcode: "",
                        avsresponse_text: "",
                        cvvresponse_text: "",
                        response_code: "100",
                        response_code_text: "Operation successful.",
                        responsetext: "CAPTURED",
                        transactionid: "TRN_XXXXX",
                    },
                    PaypointDbaname: "Gruzya Adventure Outfitters, LLC",
                    ParentOrgName: "Pilgrim Planner",
                    ParentOrgId: 123,
                    PaypointEntryname: "7f1a3816XX",
                    DeviceId: "",
                    RetrievalId: 0,
                    ChargebackId: 0,
                    AchHolderType: "personal",
                    AchSecCode: "PPD",
                    ConnectorName: "DefaultConnector",
                    EntrypageId: 0,
                    FeeAmount: 0,
                    OrgId: 123,
                    PayorId: 2707,
                    PaypointId: 123,
                    PendingFeeAmount: 0,
                    RefundId: 0,
                    ReturnedId: 0,
                    splitFundingInstructions: [],
                    TotalAmount: 2,
                    CfeeTransactions: [],
                    invoiceData: null,
                    TransactionEvents: [
                        {
                            EventTime: "2024-11-19T15:57:40Z",
                            TransEvent: "Created",
                        },
                        {
                            EventData: {
                                account_id: "TRA_XXXXX",
                                account_name: "123456",
                                action: {
                                    app_id: "XXXXX",
                                    app_name: "PayAbli",
                                    id: "ACT_XXXXX",
                                    result_code: "SUCCESS",
                                    time_created: "2024-11-19T20:58:01.583Z",
                                    type: "AUTHORIZE",
                                },
                                amount: "200",
                                batch_id: "",
                                capture_mode: "AUTO",
                                channel: "CNP",
                                country: "US",
                                currency: "USD",
                                fees: {
                                    amount: "0",
                                    rate: "0.00",
                                    total_amount: "0",
                                },
                                id: "TRN_XXXXX",
                                merchant_amount: "200",
                                merchant_id: "MER_XXXXX",
                                merchant_name: "Henriette97",
                                order: {
                                    reference: "",
                                },
                                payment_method: {
                                    bank_transfer: {
                                        account_type: "CHECKING",
                                        bank: {
                                            name: "",
                                        },
                                        masked_account_number_last4: "XXXX5678",
                                    },
                                    entry_mode: "ECOM",
                                    message: "Success",
                                    narrative: "Lydia Marshall",
                                    result: "00",
                                },
                                reference: "245-XXXXX",
                                status: "CAPTURED",
                                time_created: "2024-11-19T20:58:01.583Z",
                                type: "SALE",
                            },
                            EventTime: "2024-11-19T20:58:01Z",
                            TransEvent: "Approved",
                        },
                        {
                            EventTime: "2024-11-20T03:05:10Z",
                            TransEvent: "ClosedBatch",
                        },
                    ],
                    externalPaypointID: "ext-paypoint-123",
                    isHold: 0,
                },
            ],
            Summary: {
                serviceFees: 852.48,
                transferAmount: 0,
                refunds: -3521.85,
                heldAmount: 3.7,
                totalRecords: 21872,
                totalAmount: 61645.74,
                totalNetAmount: 61645.74,
                totalPages: 21872,
                pageSize: 0,
                pageidentifier: null,
            },
        });
    });

    test("ListBatchDetails (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/batchDetails/entry")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listBatchDetails("entry");
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("ListBatchDetails (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/batchDetails/entry")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listBatchDetails("entry");
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("ListBatchDetails (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/batchDetails/entry")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listBatchDetails("entry");
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("ListBatchDetails (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: "responseText" };
        server
            .mockEndpoint()
            .get("/Query/batchDetails/entry")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listBatchDetails("entry");
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: "responseText",
            }),
        );
    });

    test("ListBatchDetailsOrg (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            Records: [
                {
                    BatchAmount: 32,
                    BatchNumber: "batch-100-20-2024",
                    Category: "auth",
                    CreatedAt: "2024-11-19T15:58:01Z",
                    Customer: {
                        AdditionalData: "AdditionalData",
                        BillingAddress1: "100 Golden Ridge Drive",
                        BillingAddress2: "STE 100",
                        BillingCity: "Mendota",
                        BillingCountry: "US",
                        BillingEmail: "lydia@example.com",
                        BillingPhone: "+12345678",
                        BillingState: "VA",
                        BillingZip: "20147",
                        customerId: 2707,
                        CustomerNumber: "901102",
                        customerStatus: 1,
                        FirstName: "Lydia",
                        LastName: "Marshall",
                    },
                    ExpectedDepositDate: "2024-11-22T00:00:00Z",
                    GatewayTransId: "TRN_XXXXX",
                    Id: 25048,
                    isHold: 0,
                    MaskedAccount: "1XXXXXX5678",
                    Method: "ach",
                    NetAmount: 2,
                    Operation: "Sale",
                    OrderId: "",
                    ParentOrgName: "Pilgrim Planner",
                    PaymentData: {
                        AccountType: "Checking",
                        HolderName: "Lydia Marshall",
                        MaskedAccount: "1XXXXXX5678",
                        paymentDetails: {
                            categories: [{ amount: 1000, label: "Deposit" }],
                            currency: "USD",
                            serviceFee: 0,
                            splitFunding: [{}],
                            totalAmount: 2,
                        },
                    },
                    PaymentTransId: "245-9e4072eef77e45979ea0e49f680000X",
                    PaymentTransStatus: 1,
                    PaypointDbaname: "Gruzya Adventure Outfitters, LLC",
                    PaypointEntryname: "7f1a3816XX",
                    PaypointLegalname: "Gruzya Adventure Outfitters, LLC",
                    ResponseData: {
                        authcode: "",
                        avsresponse_text: "",
                        cvvresponse_text: "",
                        response_code: "100",
                        response_code_text: "Operation successful.",
                        responsetext: "CAPTURED",
                        transactionid: "TRN_XXXXX",
                    },
                    ScheduleReference: 0,
                    SettledAmount: 0.5,
                    SettlementDate: "2024-11-20T00:00:00Z",
                    Source: "api",
                    Status: 1,
                    TransactionEvents: [
                        { EventTime: "2024-11-19T15:57:40Z", TransEvent: "Created" },
                        {
                            EventData: {
                                account_id: "TRA_XXXXX",
                                account_name: "123456",
                                action: {
                                    app_id: "XXXXX",
                                    app_name: "PayAbli",
                                    id: "ACT_XXXXX",
                                    result_code: "SUCCESS",
                                    time_created: "2024-11-19T20:58:01.583Z",
                                    type: "AUTHORIZE",
                                },
                                amount: "200",
                                batch_id: "",
                                capture_mode: "AUTO",
                                channel: "CNP",
                                country: "US",
                                currency: "USD",
                                fees: { amount: "0", rate: "0.00", total_amount: "0" },
                                id: "TRN_XXXXX",
                                merchant_amount: "200",
                                merchant_id: "MER_XXXXX",
                                merchant_name: "Henriette97",
                                order: { reference: "" },
                                payment_method: {
                                    bank_transfer: {
                                        account_type: "CHECKING",
                                        bank: { name: "" },
                                        masked_account_number_last4: "XXXX5678",
                                    },
                                    entry_mode: "ECOM",
                                    message: "Success",
                                    narrative: "Lydia Marshall",
                                    result: "00",
                                },
                                reference: "245-XXXXX",
                                status: "CAPTURED",
                                time_created: "2024-11-19T20:58:01.583Z",
                                type: "SALE",
                            },
                            EventTime: "2024-11-19T20:58:01Z",
                            TransEvent: "Approved",
                        },
                        { EventTime: "2024-11-20T03:05:10Z", TransEvent: "ClosedBatch" },
                    ],
                    TransactionTime: "2024-11-19T15:58:01Z",
                    TransMethod: "ach",
                    Type: "credit",
                },
            ],
            Summary: {
                heldAmount: 3.7,
                pageSize: 0,
                refunds: -3521.85,
                serviceFees: 852.48,
                totalAmount: 61645.74,
                totalNetAmount: 61645.74,
                totalPages: 21872,
                totalRecords: 21872,
                transferAmount: 0,
            },
        };
        server
            .mockEndpoint()
            .get("/Query/batchDetails/org/123")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.query.listBatchDetailsOrg(123, {
            fromRecord: 251,
            limitRecord: 0,
            sortBy: "desc(field_name)",
        });
        expect(response).toEqual({
            Records: [
                {
                    BatchAmount: 32,
                    BatchNumber: "batch-100-20-2024",
                    Category: "auth",
                    CreatedAt: "2024-11-19T15:58:01Z",
                    Customer: {
                        AdditionalData: "AdditionalData",
                        BillingAddress1: "100 Golden Ridge Drive",
                        BillingAddress2: "STE 100",
                        BillingCity: "Mendota",
                        BillingCountry: "US",
                        BillingEmail: "lydia@example.com",
                        BillingPhone: "+12345678",
                        BillingState: "VA",
                        BillingZip: "20147",
                        customerId: 2707,
                        CustomerNumber: "901102",
                        customerStatus: 1,
                        FirstName: "Lydia",
                        LastName: "Marshall",
                    },
                    ExpectedDepositDate: "2024-11-22T00:00:00Z",
                    GatewayTransId: "TRN_XXXXX",
                    Id: 25048,
                    isHold: 0,
                    MaskedAccount: "1XXXXXX5678",
                    Method: "ach",
                    NetAmount: 2,
                    Operation: "Sale",
                    OrderId: "",
                    ParentOrgName: "Pilgrim Planner",
                    PaymentData: {
                        AccountType: "Checking",
                        HolderName: "Lydia Marshall",
                        MaskedAccount: "1XXXXXX5678",
                        paymentDetails: {
                            categories: [
                                {
                                    amount: 1000,
                                    label: "Deposit",
                                },
                            ],
                            currency: "USD",
                            serviceFee: 0,
                            splitFunding: [{}],
                            totalAmount: 2,
                        },
                    },
                    PaymentTransId: "245-9e4072eef77e45979ea0e49f680000X",
                    PaymentTransStatus: 1,
                    PaypointDbaname: "Gruzya Adventure Outfitters, LLC",
                    PaypointEntryname: "7f1a3816XX",
                    PaypointLegalname: "Gruzya Adventure Outfitters, LLC",
                    ResponseData: {
                        authcode: "",
                        avsresponse_text: "",
                        cvvresponse_text: "",
                        response_code: "100",
                        response_code_text: "Operation successful.",
                        responsetext: "CAPTURED",
                        transactionid: "TRN_XXXXX",
                    },
                    ScheduleReference: 0,
                    SettledAmount: 0.5,
                    SettlementDate: "2024-11-20T00:00:00Z",
                    Source: "api",
                    Status: 1,
                    TransactionEvents: [
                        {
                            EventTime: "2024-11-19T15:57:40Z",
                            TransEvent: "Created",
                        },
                        {
                            EventData: {
                                account_id: "TRA_XXXXX",
                                account_name: "123456",
                                action: {
                                    app_id: "XXXXX",
                                    app_name: "PayAbli",
                                    id: "ACT_XXXXX",
                                    result_code: "SUCCESS",
                                    time_created: "2024-11-19T20:58:01.583Z",
                                    type: "AUTHORIZE",
                                },
                                amount: "200",
                                batch_id: "",
                                capture_mode: "AUTO",
                                channel: "CNP",
                                country: "US",
                                currency: "USD",
                                fees: {
                                    amount: "0",
                                    rate: "0.00",
                                    total_amount: "0",
                                },
                                id: "TRN_XXXXX",
                                merchant_amount: "200",
                                merchant_id: "MER_XXXXX",
                                merchant_name: "Henriette97",
                                order: {
                                    reference: "",
                                },
                                payment_method: {
                                    bank_transfer: {
                                        account_type: "CHECKING",
                                        bank: {
                                            name: "",
                                        },
                                        masked_account_number_last4: "XXXX5678",
                                    },
                                    entry_mode: "ECOM",
                                    message: "Success",
                                    narrative: "Lydia Marshall",
                                    result: "00",
                                },
                                reference: "245-XXXXX",
                                status: "CAPTURED",
                                time_created: "2024-11-19T20:58:01.583Z",
                                type: "SALE",
                            },
                            EventTime: "2024-11-19T20:58:01Z",
                            TransEvent: "Approved",
                        },
                        {
                            EventTime: "2024-11-20T03:05:10Z",
                            TransEvent: "ClosedBatch",
                        },
                    ],
                    TransactionTime: "2024-11-19T15:58:01Z",
                    TransMethod: "ach",
                    Type: "credit",
                },
            ],
            Summary: {
                heldAmount: 3.7,
                pageSize: 0,
                refunds: -3521.85,
                serviceFees: 852.48,
                totalAmount: 61645.74,
                totalNetAmount: 61645.74,
                totalPages: 21872,
                totalRecords: 21872,
                transferAmount: 0,
            },
        });
    });

    test("ListBatchDetailsOrg (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/batchDetails/org/1")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listBatchDetailsOrg(1);
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("ListBatchDetailsOrg (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/batchDetails/org/1")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listBatchDetailsOrg(1);
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("ListBatchDetailsOrg (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/batchDetails/org/1")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listBatchDetailsOrg(1);
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("ListBatchDetailsOrg (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: "responseText" };
        server
            .mockEndpoint()
            .get("/Query/batchDetails/org/1")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listBatchDetailsOrg(1);
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: "responseText",
            }),
        );
    });

    test("ListBatches (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            Summary: {
                pageidentifier: undefined,
                pageSize: 20,
                totalAmount: 54049.71,
                totalNetAmount: 0,
                totalPages: 3,
                totalRecords: 3,
            },
            Records: [
                {
                    IdBatch: 1049,
                    BatchNumber: "batch_2857_combined_08-26-2025_001",
                    TransferIdentifier: null,
                    EventsData: [
                        {
                            description: "Created",
                            eventTime: "2025-08-25T03:19:27.6190027-04:00",
                            refData: undefined,
                            extraData: undefined,
                            source: "api",
                        },
                    ],
                    ConnectorName: "GP",
                    BatchDate: "2025-08-25T20:00:00",
                    BatchAmount: 0,
                    BatchFeesAmount: 0,
                    BatchAuthAmount: 0,
                    BatchReleasedAmount: 0,
                    BatchHoldAmount: 0,
                    BatchReturnedAmount: 0,
                    BatchRefundAmount: 0,
                    BatchSplitAmount: 0,
                    BatchStatus: 2,
                    BatchRecords: 2,
                    PaypointId: 187,
                    PaypointName: "Gruzya Adventure Outfitters, LLC",
                    PaypointDba: "Gruzya Adventure Outfitters",
                    ParentOrgName: "Pilgrim Planner",
                    ParentOrgId: 105,
                    externalPaypointID: null,
                    EntryName: "47f4f8c7e1",
                    BankName: null,
                    BatchType: 0,
                    Method: "combined",
                    ExpectedDepositDate: "2025-08-26T00:00:00Z",
                    DepositDate: null,
                    TransferDate: "2025-08-26T00:00:00Z",
                    Transfer: null,
                },
                {
                    IdBatch: 1043,
                    BatchNumber: "BT-2023041817-187",
                    TransferIdentifier: null,
                    EventsData: null,
                    ConnectorName: null,
                    BatchDate: "2023-04-18T17:01:03Z",
                    BatchAmount: 219.02,
                    BatchFeesAmount: 0,
                    BatchAuthAmount: 0,
                    BatchReleasedAmount: 0,
                    BatchHoldAmount: 0,
                    BatchReturnedAmount: 0,
                    BatchRefundAmount: 0,
                    BatchSplitAmount: 0,
                    BatchStatus: 2,
                    BatchRecords: 1,
                    PaypointId: 187,
                    PaypointName: "Gruzya Adventure Outfitters, LLC",
                    PaypointDba: "Gruzya Adventure Outfitters",
                    ParentOrgName: "Pilgrim Planner",
                    ParentOrgId: 105,
                    externalPaypointID: null,
                    EntryName: "d193cf9a46",
                    BankName: null,
                    BatchType: 0,
                    Method: "card",
                    ExpectedDepositDate: "2023-04-19T00:00:00Z",
                    DepositDate: null,
                    TransferDate: "2025-09-02T00:00:00Z",
                    Transfer: null,
                },
                {
                    IdBatch: 1012,
                    BatchNumber: "BT-2023041421-187",
                    TransferIdentifier: "ec310c3d-d4bf-4670-9524-00fcc4ab6a2a",
                    EventsData: [
                        {
                            description: "Created",
                            eventTime: "2023-04-14T21:01:03Z",
                            refData: undefined,
                            extraData: undefined,
                            source: "api",
                        },
                        {
                            description: "Closed",
                            eventTime: "2023-04-15T03:05:10Z",
                            refData: "batchId: 1012",
                            extraData: undefined,
                            source: "worker",
                        },
                    ],
                    ConnectorName: "GP",
                    BatchDate: "2023-04-14T21:01:03Z",
                    BatchAmount: 1080.44,
                    BatchFeesAmount: 0,
                    BatchAuthAmount: 1080.44,
                    BatchReleasedAmount: 0,
                    BatchHoldAmount: 0,
                    BatchReturnedAmount: 0,
                    BatchRefundAmount: 0,
                    BatchSplitAmount: 0,
                    BatchStatus: 2,
                    BatchRecords: 4,
                    PaypointId: 187,
                    PaypointName: "Gruzya Adventure Outfitters, LLC",
                    PaypointDba: "Gruzya Adventure Outfitters",
                    ParentOrgName: "Pilgrim Planner",
                    ParentOrgId: 105,
                    externalPaypointID: null,
                    EntryName: "d193cf9a46",
                    BankName: null,
                    BatchType: 0,
                    Method: "card",
                    ExpectedDepositDate: "2023-04-15T00:00:00Z",
                    DepositDate: null,
                    TransferDate: "2025-09-02T00:00:00Z",
                    Transfer: {
                        TransferId: 5998,
                        TransferDate: "2025-09-02T00:00:00Z",
                        Processor: "gp",
                        TransferStatus: 1,
                        GrossAmount: 1080.44,
                        ChargeBackAmount: 0,
                        ReturnedAmount: 0,
                        RefundAmount: 0,
                        HoldAmount: 0,
                        ReleasedAmount: 0,
                        BillingFeesAmount: 0,
                        ThirdPartyPaidAmount: 0,
                        AdjustmentsAmount: 0,
                        NetFundedAmount: 1080.44,
                    },
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/Query/batches/8cfec329267")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.query.listBatches("8cfec329267", {
            fromRecord: 251,
            limitRecord: 0,
            sortBy: "desc(field_name)",
        });
        expect(response).toEqual({
            Summary: {
                pageidentifier: undefined,
                pageSize: 20,
                totalAmount: 54049.71,
                totalNetAmount: 0,
                totalPages: 3,
                totalRecords: 3,
            },
            Records: [
                {
                    IdBatch: 1049,
                    BatchNumber: "batch_2857_combined_08-26-2025_001",
                    TransferIdentifier: null,
                    EventsData: [
                        {
                            description: "Created",
                            eventTime: "2025-08-25T03:19:27.6190027-04:00",
                            refData: undefined,
                            extraData: undefined,
                            source: "api",
                        },
                    ],
                    ConnectorName: "GP",
                    BatchDate: "2025-08-25T20:00:00",
                    BatchAmount: 0,
                    BatchFeesAmount: 0,
                    BatchAuthAmount: 0,
                    BatchReleasedAmount: 0,
                    BatchHoldAmount: 0,
                    BatchReturnedAmount: 0,
                    BatchRefundAmount: 0,
                    BatchSplitAmount: 0,
                    BatchStatus: 2,
                    BatchRecords: 2,
                    PaypointId: 187,
                    PaypointName: "Gruzya Adventure Outfitters, LLC",
                    PaypointDba: "Gruzya Adventure Outfitters",
                    ParentOrgName: "Pilgrim Planner",
                    ParentOrgId: 105,
                    externalPaypointID: null,
                    EntryName: "47f4f8c7e1",
                    BankName: null,
                    BatchType: 0,
                    Method: "combined",
                    ExpectedDepositDate: "2025-08-26T00:00:00Z",
                    DepositDate: null,
                    TransferDate: "2025-08-26T00:00:00Z",
                    Transfer: null,
                },
                {
                    IdBatch: 1043,
                    BatchNumber: "BT-2023041817-187",
                    TransferIdentifier: null,
                    EventsData: null,
                    ConnectorName: null,
                    BatchDate: "2023-04-18T17:01:03Z",
                    BatchAmount: 219.02,
                    BatchFeesAmount: 0,
                    BatchAuthAmount: 0,
                    BatchReleasedAmount: 0,
                    BatchHoldAmount: 0,
                    BatchReturnedAmount: 0,
                    BatchRefundAmount: 0,
                    BatchSplitAmount: 0,
                    BatchStatus: 2,
                    BatchRecords: 1,
                    PaypointId: 187,
                    PaypointName: "Gruzya Adventure Outfitters, LLC",
                    PaypointDba: "Gruzya Adventure Outfitters",
                    ParentOrgName: "Pilgrim Planner",
                    ParentOrgId: 105,
                    externalPaypointID: null,
                    EntryName: "d193cf9a46",
                    BankName: null,
                    BatchType: 0,
                    Method: "card",
                    ExpectedDepositDate: "2023-04-19T00:00:00Z",
                    DepositDate: null,
                    TransferDate: "2025-09-02T00:00:00Z",
                    Transfer: null,
                },
                {
                    IdBatch: 1012,
                    BatchNumber: "BT-2023041421-187",
                    TransferIdentifier: "ec310c3d-d4bf-4670-9524-00fcc4ab6a2a",
                    EventsData: [
                        {
                            description: "Created",
                            eventTime: "2023-04-14T21:01:03Z",
                            refData: undefined,
                            extraData: undefined,
                            source: "api",
                        },
                        {
                            description: "Closed",
                            eventTime: "2023-04-15T03:05:10Z",
                            refData: "batchId: 1012",
                            extraData: undefined,
                            source: "worker",
                        },
                    ],
                    ConnectorName: "GP",
                    BatchDate: "2023-04-14T21:01:03Z",
                    BatchAmount: 1080.44,
                    BatchFeesAmount: 0,
                    BatchAuthAmount: 1080.44,
                    BatchReleasedAmount: 0,
                    BatchHoldAmount: 0,
                    BatchReturnedAmount: 0,
                    BatchRefundAmount: 0,
                    BatchSplitAmount: 0,
                    BatchStatus: 2,
                    BatchRecords: 4,
                    PaypointId: 187,
                    PaypointName: "Gruzya Adventure Outfitters, LLC",
                    PaypointDba: "Gruzya Adventure Outfitters",
                    ParentOrgName: "Pilgrim Planner",
                    ParentOrgId: 105,
                    externalPaypointID: null,
                    EntryName: "d193cf9a46",
                    BankName: null,
                    BatchType: 0,
                    Method: "card",
                    ExpectedDepositDate: "2023-04-15T00:00:00Z",
                    DepositDate: null,
                    TransferDate: "2025-09-02T00:00:00Z",
                    Transfer: {
                        TransferId: 5998,
                        TransferDate: "2025-09-02T00:00:00Z",
                        Processor: "gp",
                        TransferStatus: 1,
                        GrossAmount: 1080.44,
                        ChargeBackAmount: 0,
                        ReturnedAmount: 0,
                        RefundAmount: 0,
                        HoldAmount: 0,
                        ReleasedAmount: 0,
                        BillingFeesAmount: 0,
                        ThirdPartyPaidAmount: 0,
                        AdjustmentsAmount: 0,
                        NetFundedAmount: 1080.44,
                    },
                },
            ],
        });
    });

    test("ListBatches (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/batches/entry")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listBatches("entry");
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("ListBatches (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/batches/entry")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listBatches("entry");
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("ListBatches (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/batches/entry")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listBatches("entry");
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("ListBatches (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: "responseText" };
        server
            .mockEndpoint()
            .get("/Query/batches/entry")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listBatches("entry");
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: "responseText",
            }),
        );
    });

    test("ListBatchesOrg (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            Summary: {
                pageidentifier: undefined,
                pageSize: 20,
                totalAmount: 54049.71,
                totalNetAmount: 0,
                totalPages: 3,
                totalRecords: 3,
            },
            Records: [
                {
                    IdBatch: 1049,
                    BatchNumber: "batch_2857_combined_08-26-2025_001",
                    TransferIdentifier: null,
                    EventsData: [
                        {
                            description: "Created",
                            eventTime: "2025-08-25T03:19:27.6190027-04:00",
                            refData: undefined,
                            extraData: undefined,
                            source: "api",
                        },
                    ],
                    ConnectorName: "GP",
                    BatchDate: "2025-08-25T20:00:00",
                    BatchAmount: 0,
                    BatchFeesAmount: 0,
                    BatchAuthAmount: 0,
                    BatchReleasedAmount: 0,
                    BatchHoldAmount: 0,
                    BatchReturnedAmount: 0,
                    BatchRefundAmount: 0,
                    BatchSplitAmount: 0,
                    BatchStatus: 2,
                    BatchRecords: 2,
                    PaypointId: 187,
                    PaypointName: "Gruzya Adventure Outfitters, LLC",
                    PaypointDba: "Gruzya Adventure Outfitters",
                    ParentOrgName: "Pilgrim Planner",
                    ParentOrgId: 105,
                    externalPaypointID: null,
                    EntryName: "47f4f8c7e1",
                    BankName: null,
                    BatchType: 0,
                    Method: "combined",
                    ExpectedDepositDate: "2025-08-26T00:00:00Z",
                    DepositDate: null,
                    TransferDate: "2025-08-26T00:00:00Z",
                    Transfer: null,
                },
                {
                    IdBatch: 1043,
                    BatchNumber: "BT-2023041817-187",
                    TransferIdentifier: null,
                    EventsData: null,
                    ConnectorName: null,
                    BatchDate: "2023-04-18T17:01:03Z",
                    BatchAmount: 219.02,
                    BatchFeesAmount: 0,
                    BatchAuthAmount: 0,
                    BatchReleasedAmount: 0,
                    BatchHoldAmount: 0,
                    BatchReturnedAmount: 0,
                    BatchRefundAmount: 0,
                    BatchSplitAmount: 0,
                    BatchStatus: 2,
                    BatchRecords: 1,
                    PaypointId: 187,
                    PaypointName: "Gruzya Adventure Outfitters, LLC",
                    PaypointDba: "Gruzya Adventure Outfitters",
                    ParentOrgName: "Pilgrim Planner",
                    ParentOrgId: 105,
                    externalPaypointID: null,
                    EntryName: "d193cf9a46",
                    BankName: null,
                    BatchType: 0,
                    Method: "card",
                    ExpectedDepositDate: "2023-04-19T00:00:00Z",
                    DepositDate: null,
                    TransferDate: "2025-09-02T00:00:00Z",
                    Transfer: null,
                },
                {
                    IdBatch: 1012,
                    BatchNumber: "BT-2023041421-187",
                    TransferIdentifier: "ec310c3d-d4bf-4670-9524-00fcc4ab6a2a",
                    EventsData: [
                        {
                            description: "Created",
                            eventTime: "2023-04-14T21:01:03Z",
                            refData: undefined,
                            extraData: undefined,
                            source: "api",
                        },
                        {
                            description: "Closed",
                            eventTime: "2023-04-15T03:05:10Z",
                            refData: "batchId: 1012",
                            extraData: undefined,
                            source: "worker",
                        },
                    ],
                    ConnectorName: "GP",
                    BatchDate: "2023-04-14T21:01:03Z",
                    BatchAmount: 1080.44,
                    BatchFeesAmount: 0,
                    BatchAuthAmount: 1080.44,
                    BatchReleasedAmount: 0,
                    BatchHoldAmount: 0,
                    BatchReturnedAmount: 0,
                    BatchRefundAmount: 0,
                    BatchSplitAmount: 0,
                    BatchStatus: 2,
                    BatchRecords: 4,
                    PaypointId: 187,
                    PaypointName: "Gruzya Adventure Outfitters, LLC",
                    PaypointDba: "Gruzya Adventure Outfitters",
                    ParentOrgName: "Pilgrim Planner",
                    ParentOrgId: 105,
                    externalPaypointID: null,
                    EntryName: "d193cf9a46",
                    BankName: null,
                    BatchType: 0,
                    Method: "card",
                    ExpectedDepositDate: "2023-04-15T00:00:00Z",
                    DepositDate: null,
                    TransferDate: "2025-09-02T00:00:00Z",
                    Transfer: {
                        TransferId: 5998,
                        TransferDate: "2025-09-02T00:00:00Z",
                        Processor: "gp",
                        TransferStatus: 1,
                        GrossAmount: 1080.44,
                        ChargeBackAmount: 0,
                        ReturnedAmount: 0,
                        RefundAmount: 0,
                        HoldAmount: 0,
                        ReleasedAmount: 0,
                        BillingFeesAmount: 0,
                        ThirdPartyPaidAmount: 0,
                        AdjustmentsAmount: 0,
                        NetFundedAmount: 1080.44,
                    },
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/Query/batches/org/123")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.query.listBatchesOrg(123, {
            fromRecord: 251,
            limitRecord: 0,
            sortBy: "desc(field_name)",
        });
        expect(response).toEqual({
            Summary: {
                pageidentifier: undefined,
                pageSize: 20,
                totalAmount: 54049.71,
                totalNetAmount: 0,
                totalPages: 3,
                totalRecords: 3,
            },
            Records: [
                {
                    IdBatch: 1049,
                    BatchNumber: "batch_2857_combined_08-26-2025_001",
                    TransferIdentifier: null,
                    EventsData: [
                        {
                            description: "Created",
                            eventTime: "2025-08-25T03:19:27.6190027-04:00",
                            refData: undefined,
                            extraData: undefined,
                            source: "api",
                        },
                    ],
                    ConnectorName: "GP",
                    BatchDate: "2025-08-25T20:00:00",
                    BatchAmount: 0,
                    BatchFeesAmount: 0,
                    BatchAuthAmount: 0,
                    BatchReleasedAmount: 0,
                    BatchHoldAmount: 0,
                    BatchReturnedAmount: 0,
                    BatchRefundAmount: 0,
                    BatchSplitAmount: 0,
                    BatchStatus: 2,
                    BatchRecords: 2,
                    PaypointId: 187,
                    PaypointName: "Gruzya Adventure Outfitters, LLC",
                    PaypointDba: "Gruzya Adventure Outfitters",
                    ParentOrgName: "Pilgrim Planner",
                    ParentOrgId: 105,
                    externalPaypointID: null,
                    EntryName: "47f4f8c7e1",
                    BankName: null,
                    BatchType: 0,
                    Method: "combined",
                    ExpectedDepositDate: "2025-08-26T00:00:00Z",
                    DepositDate: null,
                    TransferDate: "2025-08-26T00:00:00Z",
                    Transfer: null,
                },
                {
                    IdBatch: 1043,
                    BatchNumber: "BT-2023041817-187",
                    TransferIdentifier: null,
                    EventsData: null,
                    ConnectorName: null,
                    BatchDate: "2023-04-18T17:01:03Z",
                    BatchAmount: 219.02,
                    BatchFeesAmount: 0,
                    BatchAuthAmount: 0,
                    BatchReleasedAmount: 0,
                    BatchHoldAmount: 0,
                    BatchReturnedAmount: 0,
                    BatchRefundAmount: 0,
                    BatchSplitAmount: 0,
                    BatchStatus: 2,
                    BatchRecords: 1,
                    PaypointId: 187,
                    PaypointName: "Gruzya Adventure Outfitters, LLC",
                    PaypointDba: "Gruzya Adventure Outfitters",
                    ParentOrgName: "Pilgrim Planner",
                    ParentOrgId: 105,
                    externalPaypointID: null,
                    EntryName: "d193cf9a46",
                    BankName: null,
                    BatchType: 0,
                    Method: "card",
                    ExpectedDepositDate: "2023-04-19T00:00:00Z",
                    DepositDate: null,
                    TransferDate: "2025-09-02T00:00:00Z",
                    Transfer: null,
                },
                {
                    IdBatch: 1012,
                    BatchNumber: "BT-2023041421-187",
                    TransferIdentifier: "ec310c3d-d4bf-4670-9524-00fcc4ab6a2a",
                    EventsData: [
                        {
                            description: "Created",
                            eventTime: "2023-04-14T21:01:03Z",
                            refData: undefined,
                            extraData: undefined,
                            source: "api",
                        },
                        {
                            description: "Closed",
                            eventTime: "2023-04-15T03:05:10Z",
                            refData: "batchId: 1012",
                            extraData: undefined,
                            source: "worker",
                        },
                    ],
                    ConnectorName: "GP",
                    BatchDate: "2023-04-14T21:01:03Z",
                    BatchAmount: 1080.44,
                    BatchFeesAmount: 0,
                    BatchAuthAmount: 1080.44,
                    BatchReleasedAmount: 0,
                    BatchHoldAmount: 0,
                    BatchReturnedAmount: 0,
                    BatchRefundAmount: 0,
                    BatchSplitAmount: 0,
                    BatchStatus: 2,
                    BatchRecords: 4,
                    PaypointId: 187,
                    PaypointName: "Gruzya Adventure Outfitters, LLC",
                    PaypointDba: "Gruzya Adventure Outfitters",
                    ParentOrgName: "Pilgrim Planner",
                    ParentOrgId: 105,
                    externalPaypointID: null,
                    EntryName: "d193cf9a46",
                    BankName: null,
                    BatchType: 0,
                    Method: "card",
                    ExpectedDepositDate: "2023-04-15T00:00:00Z",
                    DepositDate: null,
                    TransferDate: "2025-09-02T00:00:00Z",
                    Transfer: {
                        TransferId: 5998,
                        TransferDate: "2025-09-02T00:00:00Z",
                        Processor: "gp",
                        TransferStatus: 1,
                        GrossAmount: 1080.44,
                        ChargeBackAmount: 0,
                        ReturnedAmount: 0,
                        RefundAmount: 0,
                        HoldAmount: 0,
                        ReleasedAmount: 0,
                        BillingFeesAmount: 0,
                        ThirdPartyPaidAmount: 0,
                        AdjustmentsAmount: 0,
                        NetFundedAmount: 1080.44,
                    },
                },
            ],
        });
    });

    test("ListBatchesOrg (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/batches/org/1")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listBatchesOrg(1);
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("ListBatchesOrg (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/batches/org/1")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listBatchesOrg(1);
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("ListBatchesOrg (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/batches/org/1")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listBatchesOrg(1);
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("ListBatchesOrg (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: "responseText" };
        server
            .mockEndpoint()
            .get("/Query/batches/org/1")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listBatchesOrg(1);
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: "responseText",
            }),
        );
    });

    test("ListBatchesOut (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            Records: [
                {
                    AchAmount: 0,
                    AchRecords: 0,
                    AchStatus: 0,
                    AchStatusText: "AchStatusText",
                    BatchAmount: 4,
                    BatchCancelledAmount: 0,
                    BatchCancelledRecords: 0,
                    BatchDate: "2024-01-01T00:00:00Z",
                    BatchNumber: "10-20240101-PAYABLITST",
                    BatchPaidAmount: 0,
                    BatchPaidRecords: 0,
                    BatchProcessedAmount: 0,
                    BatchProcessedRecords: 0,
                    BatchProcessingAmount: 0,
                    BatchProcessingRecords: 0,
                    BatchRecords: 1,
                    BatchStatus: 1,
                    BatchStatusText: "Waiting Funds",
                    CardAmount: 0,
                    CardRecords: 0,
                    CardStatus: 0,
                    CardStatusText: "CardStatusText",
                    CheckAmount: 0,
                    CheckRecords: 0,
                    CheckStatus: 0,
                    CheckStatusText: "CheckStatusText",
                    EntryName: "d193cf9a46",
                    externalPaypointID: "Paypoint-100",
                    IdBatch: 239,
                    ParentOrgName: "FitnessManager",
                    PaypointDba: "Athlete Factory LLC",
                    PaypointId: 123,
                    PaypointName: "Athlete Factory LLC",
                    VcardAmount: 0,
                    VcardRecords: 0,
                    VcardStatus: 0,
                    VcardStatusText: "VcardStatusText",
                    WireAmount: 0,
                    WireRecords: 0,
                    WireStatus: 0,
                    WireStatusText: "WireStatusText",
                },
            ],
            Summary: {
                pageidentifier: "null",
                pageSize: 20,
                totalAmount: 0.01,
                totalNetAmount: 0,
                totalPages: 1,
                totalRecords: 46,
            },
        };
        server
            .mockEndpoint()
            .get("/Query/batchesOut/8cfec329267")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.query.listBatchesOut("8cfec329267", {
            fromRecord: 251,
            limitRecord: 0,
            sortBy: "desc(field_name)",
        });
        expect(response).toEqual({
            Records: [
                {
                    AchAmount: 0,
                    AchRecords: 0,
                    AchStatus: 0,
                    AchStatusText: "AchStatusText",
                    BatchAmount: 4,
                    BatchCancelledAmount: 0,
                    BatchCancelledRecords: 0,
                    BatchDate: "2024-01-01T00:00:00Z",
                    BatchNumber: "10-20240101-PAYABLITST",
                    BatchPaidAmount: 0,
                    BatchPaidRecords: 0,
                    BatchProcessedAmount: 0,
                    BatchProcessedRecords: 0,
                    BatchProcessingAmount: 0,
                    BatchProcessingRecords: 0,
                    BatchRecords: 1,
                    BatchStatus: 1,
                    BatchStatusText: "Waiting Funds",
                    CardAmount: 0,
                    CardRecords: 0,
                    CardStatus: 0,
                    CardStatusText: "CardStatusText",
                    CheckAmount: 0,
                    CheckRecords: 0,
                    CheckStatus: 0,
                    CheckStatusText: "CheckStatusText",
                    EntryName: "d193cf9a46",
                    externalPaypointID: "Paypoint-100",
                    IdBatch: 239,
                    ParentOrgName: "FitnessManager",
                    PaypointDba: "Athlete Factory LLC",
                    PaypointId: 123,
                    PaypointName: "Athlete Factory LLC",
                    VcardAmount: 0,
                    VcardRecords: 0,
                    VcardStatus: 0,
                    VcardStatusText: "VcardStatusText",
                    WireAmount: 0,
                    WireRecords: 0,
                    WireStatus: 0,
                    WireStatusText: "WireStatusText",
                },
            ],
            Summary: {
                pageidentifier: "null",
                pageSize: 20,
                totalAmount: 0.01,
                totalNetAmount: 0,
                totalPages: 1,
                totalRecords: 46,
            },
        });
    });

    test("ListBatchesOut (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/batchesOut/entry")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listBatchesOut("entry");
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("ListBatchesOut (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/batchesOut/entry")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listBatchesOut("entry");
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("ListBatchesOut (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/batchesOut/entry")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listBatchesOut("entry");
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("ListBatchesOut (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: "responseText" };
        server
            .mockEndpoint()
            .get("/Query/batchesOut/entry")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listBatchesOut("entry");
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: "responseText",
            }),
        );
    });

    test("ListBatchesOutOrg (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            Records: [
                {
                    AchAmount: 0,
                    AchRecords: 0,
                    AchStatus: 0,
                    AchStatusText: "AchStatusText",
                    BatchAmount: 4,
                    BatchCancelledAmount: 0,
                    BatchCancelledRecords: 0,
                    BatchDate: "2024-01-01T00:00:00Z",
                    BatchNumber: "10-20240101-PAYABLITST",
                    BatchPaidAmount: 0,
                    BatchPaidRecords: 0,
                    BatchProcessedAmount: 0,
                    BatchProcessedRecords: 0,
                    BatchProcessingAmount: 0,
                    BatchProcessingRecords: 0,
                    BatchRecords: 1,
                    BatchStatus: 1,
                    BatchStatusText: "Waiting Funds",
                    CardAmount: 0,
                    CardRecords: 0,
                    CardStatus: 0,
                    CardStatusText: "CardStatusText",
                    CheckAmount: 0,
                    CheckRecords: 0,
                    CheckStatus: 0,
                    CheckStatusText: "CheckStatusText",
                    EntryName: "d193cf9a46",
                    externalPaypointID: "Paypoint-100",
                    IdBatch: 239,
                    ParentOrgName: "FitnessManager",
                    PaypointDba: "Athlete Factory LLC",
                    PaypointId: 123,
                    PaypointName: "Athlete Factory LLC",
                    VcardAmount: 0,
                    VcardRecords: 0,
                    VcardStatus: 0,
                    VcardStatusText: "VcardStatusText",
                    WireAmount: 0,
                    WireRecords: 0,
                    WireStatus: 0,
                    WireStatusText: "WireStatusText",
                },
            ],
            Summary: {
                pageidentifier: "null",
                pageSize: 20,
                totalAmount: 0.01,
                totalNetAmount: 0,
                totalPages: 1,
                totalRecords: 46,
            },
        };
        server
            .mockEndpoint()
            .get("/Query/batchesOut/org/123")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.query.listBatchesOutOrg(123, {
            fromRecord: 251,
            limitRecord: 0,
            sortBy: "desc(field_name)",
        });
        expect(response).toEqual({
            Records: [
                {
                    AchAmount: 0,
                    AchRecords: 0,
                    AchStatus: 0,
                    AchStatusText: "AchStatusText",
                    BatchAmount: 4,
                    BatchCancelledAmount: 0,
                    BatchCancelledRecords: 0,
                    BatchDate: "2024-01-01T00:00:00Z",
                    BatchNumber: "10-20240101-PAYABLITST",
                    BatchPaidAmount: 0,
                    BatchPaidRecords: 0,
                    BatchProcessedAmount: 0,
                    BatchProcessedRecords: 0,
                    BatchProcessingAmount: 0,
                    BatchProcessingRecords: 0,
                    BatchRecords: 1,
                    BatchStatus: 1,
                    BatchStatusText: "Waiting Funds",
                    CardAmount: 0,
                    CardRecords: 0,
                    CardStatus: 0,
                    CardStatusText: "CardStatusText",
                    CheckAmount: 0,
                    CheckRecords: 0,
                    CheckStatus: 0,
                    CheckStatusText: "CheckStatusText",
                    EntryName: "d193cf9a46",
                    externalPaypointID: "Paypoint-100",
                    IdBatch: 239,
                    ParentOrgName: "FitnessManager",
                    PaypointDba: "Athlete Factory LLC",
                    PaypointId: 123,
                    PaypointName: "Athlete Factory LLC",
                    VcardAmount: 0,
                    VcardRecords: 0,
                    VcardStatus: 0,
                    VcardStatusText: "VcardStatusText",
                    WireAmount: 0,
                    WireRecords: 0,
                    WireStatus: 0,
                    WireStatusText: "WireStatusText",
                },
            ],
            Summary: {
                pageidentifier: "null",
                pageSize: 20,
                totalAmount: 0.01,
                totalNetAmount: 0,
                totalPages: 1,
                totalRecords: 46,
            },
        });
    });

    test("ListBatchesOutOrg (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/batchesOut/org/1")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listBatchesOutOrg(1);
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("ListBatchesOutOrg (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/batchesOut/org/1")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listBatchesOutOrg(1);
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("ListBatchesOutOrg (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/batchesOut/org/1")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listBatchesOutOrg(1);
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("ListBatchesOutOrg (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: "responseText" };
        server
            .mockEndpoint()
            .get("/Query/batchesOut/org/1")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listBatchesOutOrg(1);
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: "responseText",
            }),
        );
    });

    test("ListChargebacks (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            Records: [
                {
                    AccountType: "4XXXXXX0003",
                    CaseNumber: "00001",
                    ChargebackDate: "2023-02-08T00:00:00Z",
                    CreatedAt: "2023-02-20T15:36:49Z",
                    Customer: {
                        AdditionalData: "AdditionalData",
                        BillingAddress1: "321 Big Sky Road",
                        BillingAddress2: "",
                        BillingCity: "Helena",
                        BillingCountry: "US",
                        BillingEmail: "janis.berzins@example.com",
                        BillingPhone: "406-555-0123",
                        BillingState: "MT",
                        BillingZip: "59601",
                        CompanyName: "Big Sky Imports",
                        customerId: 1324,
                        CustomerNumber: "12345",
                        customerStatus: 1,
                        FirstName: "Janis",
                        Identifiers: ["firstname", "email"],
                        LastName: "Berzins",
                        ShippingAddress1: "321 Big Sky Road",
                        ShippingAddress2: "",
                        ShippingCity: "Helena",
                        ShippingCountry: "US",
                        ShippingState: "MT",
                        ShippingZip: "59601",
                    },
                    externalPaypointID: "f743aed24a-10",
                    Id: 578,
                    LastFour: "4XXXXXX0003",
                    Method: "card",
                    NetAmount: 1.5,
                    OrderId: "",
                    ParentOrgName: "Par",
                    PaymentData: {
                        AccountExp: "0330",
                        AccountType: "visa",
                        HolderName: "Janis Berzins",
                        MaskedAccount: "4XXXXXX0003",
                        paymentDetails: { totalAmount: 100 },
                        StoredId: "stored-id-123",
                    },
                    PaymentTransId: "10-bfcd5a17861d4a8690ca53c00000X",
                    PaypointDbaname: "Global Factory LLC",
                    PaypointEntryname: "f743aed24a",
                    PaypointLegalname: "Global Factory LLC",
                    Reason: "Testing",
                    ReasonCode: "00001",
                    ReferenceNumber: "10-bfcd5a17861d4a8690ca53c00000X",
                    ReplyBy: "2023-03-02T15:36:49Z",
                    ScheduleReference: 0,
                    Status: 3,
                    Transaction: {
                        BatchAmount: 0,
                        Customer: {
                            AdditionalData: "AdditionalData",
                            BillingAddress1: "321 Big Sky Road",
                            BillingAddress2: "",
                            BillingCity: "Helena",
                            BillingCountry: "US",
                            BillingEmail: "janis.berzins@example.com",
                            BillingPhone: "406-555-0123",
                            BillingState: "MT",
                            BillingZip: "59601",
                            CompanyName: "Big Sky Imports",
                            customerId: 1324,
                            CustomerNumber: "12345",
                            customerStatus: 1,
                            FirstName: "Janis",
                            Identifiers: ["firstname", "email"],
                            LastName: "Berzins",
                            ShippingAddress1: "321 Big Sky Road",
                            ShippingAddress2: "",
                            ShippingCity: "Helena",
                            ShippingCountry: "US",
                            ShippingState: "MT",
                            ShippingZip: "59601",
                        },
                        EntrypageId: 0,
                        FeeAmount: 0.06,
                        GatewayTransId: "8082800000",
                        Method: "card",
                        NetAmount: 1.5,
                        Operation: "Sale",
                        OrderId: "",
                        OrgId: 0,
                        PaymentData: {
                            AccountExp: "0330",
                            AccountType: "visa",
                            HolderName: "Lisandra Sosa",
                            MaskedAccount: "4XXXXXX0003",
                            paymentDetails: { currency: "USD", serviceFee: 0.06, totalAmount: 1.56 },
                        },
                        PaymentTransId: "10-bfcd5a17861d4a8690ca53c00000X",
                        PayorId: 0,
                        PaypointId: 0,
                        RefundId: 0,
                        ResponseData: {
                            authcode: "123456",
                            avsresponse: "N",
                            avsresponse_text: "No address or ZIP match only",
                            cvvresponse: "N",
                            cvvresponse_text: "CVV2/CVC2 no match",
                            orderid: "10-bfcd5a17861d4a8690ca53c00000X",
                            response_code: "100",
                            response_code_text: "Transaction was approved.",
                            responsetext: "SUCCESS",
                            transactionid: "8082800000",
                        },
                        ReturnedId: 0,
                        ScheduleReference: 0,
                        SettlementStatus: 0,
                        Source: "api",
                        TotalAmount: 1.56,
                        TransactionEvents: [
                            { EventTime: "2023-02-20T15:36:47Z", TransEvent: "created" },
                            {
                                EventData:
                                    "response=1&responsetext=SUCCESS&authcode=123456&transactionid=8082800000&avsresponse=N&cvvresponse=N&orderid=10-bfcd5a17861d4a8690ca53c00000X&type=sale&response_code=100",
                                EventTime: "2023-02-20T15:36:49Z",
                                TransEvent: "Approved",
                            },
                        ],
                        TransactionTime: "2023-02-20T15:36:47Z",
                        TransStatus: 1,
                    },
                    TransactionTime: "2023-02-20T15:36:47Z",
                },
            ],
            Summary: {
                pageIdentifier: "null",
                pageSize: 20,
                totalAmount: 1.56,
                totalNetAmount: 1.5,
                totalPages: 1,
                totalRecords: 1,
            },
        };
        server
            .mockEndpoint()
            .get("/Query/chargebacks/8cfec329267")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.query.listChargebacks("8cfec329267", {
            fromRecord: 251,
            limitRecord: 0,
            sortBy: "desc(field_name)",
        });
        expect(response).toEqual({
            Records: [
                {
                    AccountType: "4XXXXXX0003",
                    CaseNumber: "00001",
                    ChargebackDate: "2023-02-08T00:00:00Z",
                    CreatedAt: "2023-02-20T15:36:49Z",
                    Customer: {
                        AdditionalData: "AdditionalData",
                        BillingAddress1: "321 Big Sky Road",
                        BillingAddress2: "",
                        BillingCity: "Helena",
                        BillingCountry: "US",
                        BillingEmail: "janis.berzins@example.com",
                        BillingPhone: "406-555-0123",
                        BillingState: "MT",
                        BillingZip: "59601",
                        CompanyName: "Big Sky Imports",
                        customerId: 1324,
                        CustomerNumber: "12345",
                        customerStatus: 1,
                        FirstName: "Janis",
                        Identifiers: ["firstname", "email"],
                        LastName: "Berzins",
                        ShippingAddress1: "321 Big Sky Road",
                        ShippingAddress2: "",
                        ShippingCity: "Helena",
                        ShippingCountry: "US",
                        ShippingState: "MT",
                        ShippingZip: "59601",
                    },
                    externalPaypointID: "f743aed24a-10",
                    Id: 578,
                    LastFour: "4XXXXXX0003",
                    Method: "card",
                    NetAmount: 1.5,
                    OrderId: "",
                    ParentOrgName: "Par",
                    PaymentData: {
                        AccountExp: "0330",
                        AccountType: "visa",
                        HolderName: "Janis Berzins",
                        MaskedAccount: "4XXXXXX0003",
                        paymentDetails: {
                            totalAmount: 100,
                        },
                        StoredId: "stored-id-123",
                    },
                    PaymentTransId: "10-bfcd5a17861d4a8690ca53c00000X",
                    PaypointDbaname: "Global Factory LLC",
                    PaypointEntryname: "f743aed24a",
                    PaypointLegalname: "Global Factory LLC",
                    Reason: "Testing",
                    ReasonCode: "00001",
                    ReferenceNumber: "10-bfcd5a17861d4a8690ca53c00000X",
                    ReplyBy: "2023-03-02T15:36:49Z",
                    ScheduleReference: 0,
                    Status: 3,
                    Transaction: {
                        BatchAmount: 0,
                        Customer: {
                            AdditionalData: "AdditionalData",
                            BillingAddress1: "321 Big Sky Road",
                            BillingAddress2: "",
                            BillingCity: "Helena",
                            BillingCountry: "US",
                            BillingEmail: "janis.berzins@example.com",
                            BillingPhone: "406-555-0123",
                            BillingState: "MT",
                            BillingZip: "59601",
                            CompanyName: "Big Sky Imports",
                            customerId: 1324,
                            CustomerNumber: "12345",
                            customerStatus: 1,
                            FirstName: "Janis",
                            Identifiers: ["firstname", "email"],
                            LastName: "Berzins",
                            ShippingAddress1: "321 Big Sky Road",
                            ShippingAddress2: "",
                            ShippingCity: "Helena",
                            ShippingCountry: "US",
                            ShippingState: "MT",
                            ShippingZip: "59601",
                        },
                        EntrypageId: 0,
                        FeeAmount: 0.06,
                        GatewayTransId: "8082800000",
                        Method: "card",
                        NetAmount: 1.5,
                        Operation: "Sale",
                        OrderId: "",
                        OrgId: 0,
                        PaymentData: {
                            AccountExp: "0330",
                            AccountType: "visa",
                            HolderName: "Lisandra Sosa",
                            MaskedAccount: "4XXXXXX0003",
                            paymentDetails: {
                                currency: "USD",
                                serviceFee: 0.06,
                                totalAmount: 1.56,
                            },
                        },
                        PaymentTransId: "10-bfcd5a17861d4a8690ca53c00000X",
                        PayorId: 0,
                        PaypointId: 0,
                        RefundId: 0,
                        ResponseData: {
                            authcode: "123456",
                            avsresponse: "N",
                            avsresponse_text: "No address or ZIP match only",
                            cvvresponse: "N",
                            cvvresponse_text: "CVV2/CVC2 no match",
                            orderid: "10-bfcd5a17861d4a8690ca53c00000X",
                            response_code: "100",
                            response_code_text: "Transaction was approved.",
                            responsetext: "SUCCESS",
                            transactionid: "8082800000",
                        },
                        ReturnedId: 0,
                        ScheduleReference: 0,
                        SettlementStatus: 0,
                        Source: "api",
                        TotalAmount: 1.56,
                        TransactionEvents: [
                            {
                                EventTime: "2023-02-20T15:36:47Z",
                                TransEvent: "created",
                            },
                            {
                                EventData:
                                    "response=1&responsetext=SUCCESS&authcode=123456&transactionid=8082800000&avsresponse=N&cvvresponse=N&orderid=10-bfcd5a17861d4a8690ca53c00000X&type=sale&response_code=100",
                                EventTime: "2023-02-20T15:36:49Z",
                                TransEvent: "Approved",
                            },
                        ],
                        TransactionTime: "2023-02-20T15:36:47Z",
                        TransStatus: 1,
                    },
                    TransactionTime: "2023-02-20T15:36:47Z",
                },
            ],
            Summary: {
                pageIdentifier: "null",
                pageSize: 20,
                totalAmount: 1.56,
                totalNetAmount: 1.5,
                totalPages: 1,
                totalRecords: 1,
            },
        });
    });

    test("ListChargebacks (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/chargebacks/entry")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listChargebacks("entry");
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("ListChargebacks (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/chargebacks/entry")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listChargebacks("entry");
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("ListChargebacks (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/chargebacks/entry")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listChargebacks("entry");
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("ListChargebacks (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: "responseText" };
        server
            .mockEndpoint()
            .get("/Query/chargebacks/entry")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listChargebacks("entry");
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: "responseText",
            }),
        );
    });

    test("ListChargebacksOrg (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            Records: [
                {
                    AccountType: "4XXXXXX0003",
                    CaseNumber: "00001",
                    ChargebackDate: "2023-02-08T00:00:00Z",
                    CreatedAt: "2022-07-01T15:00:01Z",
                    externalPaypointID: "Paypoint-100",
                    Id: 578,
                    LastFour: "4XXXXXX0003",
                    Method: "card",
                    NetAmount: 1.5,
                    OrderId: "O-5140",
                    pageidentifier: "null",
                    ParentOrgName: "PropertyManager Pro",
                    PaymentData: { paymentDetails: { totalAmount: 100 } },
                    PaymentTransId: "10-bfcd5a17861d4a8690ca53c142ca3810",
                    PaypointDbaname: "Sunshine Gutters",
                    PaypointEntryname: "d193cf9a46",
                    PaypointLegalname: "Sunshine Services, LLC",
                    Reason: "Testing",
                    ReasonCode: "00001",
                    ReferenceNumber: "10-bfcd5a17861d4a8690ca53c142ca3810",
                    ReplyBy: "2022-07-11T15:00:01Z",
                    Responses: "Responses",
                    ScheduleReference: 0,
                    Status: 3,
                    Transaction: {
                        EntrypageId: 0,
                        FeeAmount: 1,
                        PayorId: 1551,
                        PaypointId: 226,
                        SettlementStatus: 2,
                        TotalAmount: 30.22,
                        TransStatus: 1,
                    },
                    TransactionTime: "2024-01-15T09:30:00Z",
                },
            ],
            Summary: {
                pageIdentifier: "null",
                pageSize: 20,
                totalAmount: 77.22,
                totalNetAmount: 77.22,
                totalPages: 2,
                totalRecords: 2,
            },
        };
        server
            .mockEndpoint()
            .get("/Query/chargebacks/org/123")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.query.listChargebacksOrg(123, {
            fromRecord: 251,
            limitRecord: 0,
            sortBy: "desc(field_name)",
        });
        expect(response).toEqual({
            Records: [
                {
                    AccountType: "4XXXXXX0003",
                    CaseNumber: "00001",
                    ChargebackDate: "2023-02-08T00:00:00Z",
                    CreatedAt: "2022-07-01T15:00:01Z",
                    externalPaypointID: "Paypoint-100",
                    Id: 578,
                    LastFour: "4XXXXXX0003",
                    Method: "card",
                    NetAmount: 1.5,
                    OrderId: "O-5140",
                    pageidentifier: "null",
                    ParentOrgName: "PropertyManager Pro",
                    PaymentData: {
                        paymentDetails: {
                            totalAmount: 100,
                        },
                    },
                    PaymentTransId: "10-bfcd5a17861d4a8690ca53c142ca3810",
                    PaypointDbaname: "Sunshine Gutters",
                    PaypointEntryname: "d193cf9a46",
                    PaypointLegalname: "Sunshine Services, LLC",
                    Reason: "Testing",
                    ReasonCode: "00001",
                    ReferenceNumber: "10-bfcd5a17861d4a8690ca53c142ca3810",
                    ReplyBy: "2022-07-11T15:00:01Z",
                    Responses: "Responses",
                    ScheduleReference: 0,
                    Status: 3,
                    Transaction: {
                        EntrypageId: 0,
                        FeeAmount: 1,
                        PayorId: 1551,
                        PaypointId: 226,
                        SettlementStatus: 2,
                        TotalAmount: 30.22,
                        TransStatus: 1,
                    },
                    TransactionTime: "2024-01-15T09:30:00Z",
                },
            ],
            Summary: {
                pageIdentifier: "null",
                pageSize: 20,
                totalAmount: 77.22,
                totalNetAmount: 77.22,
                totalPages: 2,
                totalRecords: 2,
            },
        });
    });

    test("ListChargebacksOrg (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/chargebacks/org/1")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listChargebacksOrg(1);
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("ListChargebacksOrg (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/chargebacks/org/1")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listChargebacksOrg(1);
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("ListChargebacksOrg (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/chargebacks/org/1")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listChargebacksOrg(1);
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("ListChargebacksOrg (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: "responseText" };
        server
            .mockEndpoint()
            .get("/Query/chargebacks/org/1")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listChargebacksOrg(1);
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: "responseText",
            }),
        );
    });

    test("ListCustomers (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            Records: [
                {
                    Address: "1234 Bayou Road",
                    Address1: "Suite 2",
                    Balance: 0,
                    City: "Lafayette",
                    Company: "Boudreaux's Shop",
                    Country: "US",
                    Created: "2023-12-20T13:07:48Z",
                    customerId: 2876,
                    customerNumber: "425436530000",
                    customerStatus: 0,
                    customerSummary: {
                        numberofTransactions: 30,
                        totalAmountTransactions: 1500,
                        totalNetAmountTransactions: 1500,
                    },
                    Email: "thibodeaux.hebert@bayoumail.com",
                    externalPaypointID: "pay-10",
                    Firstname: "Thibodeaux",
                    IdentifierFields: ["email"],
                    Lastname: "Hebert",
                    LastUpdated: "2023-12-20T13:07:48Z",
                    MFA: false,
                    MFAMode: 0,
                    ParentOrgName: "SupplyPro",
                    PaypointDbaname: "Global Factory LLC",
                    PaypointEntryname: "4872acb376a",
                    PaypointLegalname: "Global Factory LLC",
                    Phone: "(504) 823-4566",
                    ShippingAddress: "1234 Bayou Road",
                    ShippingAddress1: "Suite 2",
                    ShippingCity: "Lafayette",
                    ShippingCountry: "US",
                    ShippingState: "LA",
                    ShippingZip: "70501",
                    State: "LA",
                    TimeZone: 0,
                    Zip: "70501",
                },
            ],
            Summary: {
                pageIdentifier: "XXXXXXXXXXXXXX",
                pageSize: 20,
                totalAmount: 0,
                totalNetAmount: 0,
                totalPages: 26,
                totalRecords: 510,
            },
        };
        server
            .mockEndpoint()
            .get("/Query/customers/8cfec329267")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.query.listCustomers("8cfec329267", {
            fromRecord: 251,
            limitRecord: 0,
            sortBy: "desc(field_name)",
        });
        expect(response).toEqual({
            Records: [
                {
                    Address: "1234 Bayou Road",
                    Address1: "Suite 2",
                    Balance: 0,
                    City: "Lafayette",
                    Company: "Boudreaux's Shop",
                    Country: "US",
                    Created: "2023-12-20T13:07:48Z",
                    customerId: 2876,
                    customerNumber: "425436530000",
                    customerStatus: 0,
                    customerSummary: {
                        numberofTransactions: 30,
                        totalAmountTransactions: 1500,
                        totalNetAmountTransactions: 1500,
                    },
                    Email: "thibodeaux.hebert@bayoumail.com",
                    externalPaypointID: "pay-10",
                    Firstname: "Thibodeaux",
                    IdentifierFields: ["email"],
                    Lastname: "Hebert",
                    LastUpdated: "2023-12-20T13:07:48Z",
                    MFA: false,
                    MFAMode: 0,
                    ParentOrgName: "SupplyPro",
                    PaypointDbaname: "Global Factory LLC",
                    PaypointEntryname: "4872acb376a",
                    PaypointLegalname: "Global Factory LLC",
                    Phone: "(504) 823-4566",
                    ShippingAddress: "1234 Bayou Road",
                    ShippingAddress1: "Suite 2",
                    ShippingCity: "Lafayette",
                    ShippingCountry: "US",
                    ShippingState: "LA",
                    ShippingZip: "70501",
                    State: "LA",
                    TimeZone: 0,
                    Zip: "70501",
                },
            ],
            Summary: {
                pageIdentifier: "XXXXXXXXXXXXXX",
                pageSize: 20,
                totalAmount: 0,
                totalNetAmount: 0,
                totalPages: 26,
                totalRecords: 510,
            },
        });
    });

    test("ListCustomers (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/customers/entry")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listCustomers("entry");
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("ListCustomers (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/customers/entry")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listCustomers("entry");
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("ListCustomers (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/customers/entry")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listCustomers("entry");
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("ListCustomers (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: "responseText" };
        server
            .mockEndpoint()
            .get("/Query/customers/entry")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listCustomers("entry");
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: "responseText",
            }),
        );
    });

    test("ListCustomersOrg (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            Records: [
                {
                    Address: "1234 Bayou Road",
                    Address1: "Suite 2",
                    Balance: 0,
                    City: "Lafayette",
                    Company: "Boudreaux's Shop",
                    Country: "US",
                    Created: "2023-12-20T13:07:48Z",
                    customerId: 2876,
                    customerNumber: "425436530000",
                    customerStatus: 0,
                    customerSummary: {
                        numberofTransactions: 30,
                        totalAmountTransactions: 1500,
                        totalNetAmountTransactions: 1500,
                    },
                    Email: "thibodeaux.hebert@bayoumail.com",
                    externalPaypointID: "pay-10",
                    Firstname: "Thibodeaux",
                    IdentifierFields: ["email"],
                    Lastname: "Hebert",
                    LastUpdated: "2023-12-20T13:07:48Z",
                    MFA: false,
                    MFAMode: 0,
                    ParentOrgName: "SupplyPro",
                    PaypointDbaname: "Global Factory LLC",
                    PaypointEntryname: "4872acb376a",
                    PaypointLegalname: "Global Factory LLC",
                    Phone: "(504) 823-4566",
                    ShippingAddress: "1234 Bayou Road",
                    ShippingAddress1: "Suite 2",
                    ShippingCity: "Lafayette",
                    ShippingCountry: "US",
                    ShippingState: "LA",
                    ShippingZip: "70501",
                    State: "LA",
                    TimeZone: 0,
                    Zip: "70501",
                },
            ],
            Summary: {
                pageIdentifier: "XXXXXXXXXXXXXX",
                pageSize: 20,
                totalAmount: 0,
                totalNetAmount: 0,
                totalPages: 26,
                totalRecords: 510,
            },
        };
        server
            .mockEndpoint()
            .get("/Query/customers/org/123")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.query.listCustomersOrg(123, {
            fromRecord: 251,
            limitRecord: 0,
            sortBy: "desc(field_name)",
        });
        expect(response).toEqual({
            Records: [
                {
                    Address: "1234 Bayou Road",
                    Address1: "Suite 2",
                    Balance: 0,
                    City: "Lafayette",
                    Company: "Boudreaux's Shop",
                    Country: "US",
                    Created: "2023-12-20T13:07:48Z",
                    customerId: 2876,
                    customerNumber: "425436530000",
                    customerStatus: 0,
                    customerSummary: {
                        numberofTransactions: 30,
                        totalAmountTransactions: 1500,
                        totalNetAmountTransactions: 1500,
                    },
                    Email: "thibodeaux.hebert@bayoumail.com",
                    externalPaypointID: "pay-10",
                    Firstname: "Thibodeaux",
                    IdentifierFields: ["email"],
                    Lastname: "Hebert",
                    LastUpdated: "2023-12-20T13:07:48Z",
                    MFA: false,
                    MFAMode: 0,
                    ParentOrgName: "SupplyPro",
                    PaypointDbaname: "Global Factory LLC",
                    PaypointEntryname: "4872acb376a",
                    PaypointLegalname: "Global Factory LLC",
                    Phone: "(504) 823-4566",
                    ShippingAddress: "1234 Bayou Road",
                    ShippingAddress1: "Suite 2",
                    ShippingCity: "Lafayette",
                    ShippingCountry: "US",
                    ShippingState: "LA",
                    ShippingZip: "70501",
                    State: "LA",
                    TimeZone: 0,
                    Zip: "70501",
                },
            ],
            Summary: {
                pageIdentifier: "XXXXXXXXXXXXXX",
                pageSize: 20,
                totalAmount: 0,
                totalNetAmount: 0,
                totalPages: 26,
                totalRecords: 510,
            },
        });
    });

    test("ListCustomersOrg (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/customers/org/1")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listCustomersOrg(1);
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("ListCustomersOrg (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/customers/org/1")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listCustomersOrg(1);
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("ListCustomersOrg (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/customers/org/1")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listCustomersOrg(1);
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("ListCustomersOrg (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: "responseText" };
        server
            .mockEndpoint()
            .get("/Query/customers/org/1")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listCustomersOrg(1);
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: "responseText",
            }),
        );
    });

    test("ListNotificationReports (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            Records: [
                {
                    createdAt: "2024-02-20T01:48:04Z",
                    id: 4881,
                    isDownloadable: true,
                    reportName: "Transaction-2024-02-20-000000-0-2.csv",
                },
            ],
            Summary: {
                pageIdentifier: "null",
                pageSize: 20,
                totalAmount: 0,
                totalNetAmount: 0,
                totalPages: 1,
                totalRecords: 1,
            },
        };
        server
            .mockEndpoint()
            .get("/Query/notificationReports/8cfec329267")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.query.listNotificationReports("8cfec329267", {
            fromRecord: 251,
            limitRecord: 0,
            sortBy: "desc(field_name)",
        });
        expect(response).toEqual({
            Records: [
                {
                    createdAt: "2024-02-20T01:48:04Z",
                    id: 4881,
                    isDownloadable: true,
                    reportName: "Transaction-2024-02-20-000000-0-2.csv",
                },
            ],
            Summary: {
                pageIdentifier: "null",
                pageSize: 20,
                totalAmount: 0,
                totalNetAmount: 0,
                totalPages: 1,
                totalRecords: 1,
            },
        });
    });

    test("ListNotificationReports (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/notificationReports/entry")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listNotificationReports("entry");
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("ListNotificationReports (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/notificationReports/entry")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listNotificationReports("entry");
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("ListNotificationReports (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/notificationReports/entry")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listNotificationReports("entry");
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("ListNotificationReports (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: "responseText" };
        server
            .mockEndpoint()
            .get("/Query/notificationReports/entry")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listNotificationReports("entry");
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: "responseText",
            }),
        );
    });

    test("ListNotificationReportsOrg (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            Records: [
                {
                    createdAt: "2024-02-20T01:48:04Z",
                    id: 4881,
                    isDownloadable: true,
                    reportName: "Transaction-2024-02-20-000000-0-2.csv",
                },
            ],
            Summary: {
                pageIdentifier: "null",
                pageSize: 20,
                totalAmount: 0,
                totalNetAmount: 0,
                totalPages: 1,
                totalRecords: 1,
            },
        };
        server
            .mockEndpoint()
            .get("/Query/notificationReports/org/123")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.query.listNotificationReportsOrg(123, {
            fromRecord: 251,
            limitRecord: 0,
            sortBy: "desc(field_name)",
        });
        expect(response).toEqual({
            Records: [
                {
                    createdAt: "2024-02-20T01:48:04Z",
                    id: 4881,
                    isDownloadable: true,
                    reportName: "Transaction-2024-02-20-000000-0-2.csv",
                },
            ],
            Summary: {
                pageIdentifier: "null",
                pageSize: 20,
                totalAmount: 0,
                totalNetAmount: 0,
                totalPages: 1,
                totalRecords: 1,
            },
        });
    });

    test("ListNotificationReportsOrg (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/notificationReports/org/1")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listNotificationReportsOrg(1);
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("ListNotificationReportsOrg (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/notificationReports/org/1")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listNotificationReportsOrg(1);
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("ListNotificationReportsOrg (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/notificationReports/org/1")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listNotificationReportsOrg(1);
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("ListNotificationReportsOrg (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: "responseText" };
        server
            .mockEndpoint()
            .get("/Query/notificationReports/org/1")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listNotificationReportsOrg(1);
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: "responseText",
            }),
        );
    });

    test("ListNotifications (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            Records: [
                {
                    content: { eventType: "ReceivedChargeBack", timeZone: 0 },
                    createdAt: "2022-06-07T05:00:00Z",
                    frequency: "untilcancelled",
                    lastUpdated: "2022-06-07T05:00:00Z",
                    method: "email",
                    notificationId: 88976,
                    ownerId: "123",
                    ownerName: "Pilgrim Planner",
                    ownerType: 2,
                    source: "api",
                    status: 1,
                    target: "example@example.com",
                },
                {
                    content: { eventType: "ReceivedAchReturn", timeZone: 0 },
                    createdAt: "2022-06-07T05:00:00Z",
                    frequency: "untilcancelled",
                    lastUpdated: "2022-06-07T05:00:00Z",
                    method: "email",
                    notificationId: 88975,
                    ownerId: "123",
                    ownerName: "Pilgrim Planner",
                    ownerType: 2,
                    source: "api",
                    status: 1,
                    target: "example@example.com",
                },
            ],
            Summary: { pageSize: 20, totalAmount: 0, totalNetAmount: 0, totalPages: 1, totalRecords: 2 },
        };
        server
            .mockEndpoint()
            .get("/Query/notifications/8cfec329267")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.query.listNotifications("8cfec329267", {
            fromRecord: 251,
            limitRecord: 0,
            sortBy: "desc(field_name)",
        });
        expect(response).toEqual({
            Records: [
                {
                    content: {
                        eventType: "ReceivedChargeBack",
                        timeZone: 0,
                    },
                    createdAt: "2022-06-07T05:00:00Z",
                    frequency: "untilcancelled",
                    lastUpdated: "2022-06-07T05:00:00Z",
                    method: "email",
                    notificationId: 88976,
                    ownerId: "123",
                    ownerName: "Pilgrim Planner",
                    ownerType: 2,
                    source: "api",
                    status: 1,
                    target: "example@example.com",
                },
                {
                    content: {
                        eventType: "ReceivedAchReturn",
                        timeZone: 0,
                    },
                    createdAt: "2022-06-07T05:00:00Z",
                    frequency: "untilcancelled",
                    lastUpdated: "2022-06-07T05:00:00Z",
                    method: "email",
                    notificationId: 88975,
                    ownerId: "123",
                    ownerName: "Pilgrim Planner",
                    ownerType: 2,
                    source: "api",
                    status: 1,
                    target: "example@example.com",
                },
            ],
            Summary: {
                pageSize: 20,
                totalAmount: 0,
                totalNetAmount: 0,
                totalPages: 1,
                totalRecords: 2,
            },
        });
    });

    test("ListNotifications (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/notifications/entry")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listNotifications("entry");
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("ListNotifications (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/notifications/entry")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listNotifications("entry");
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("ListNotifications (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/notifications/entry")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listNotifications("entry");
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("ListNotifications (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: "responseText" };
        server
            .mockEndpoint()
            .get("/Query/notifications/entry")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listNotifications("entry");
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: "responseText",
            }),
        );
    });

    test("ListNotificationsOrg (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            Records: [
                {
                    content: { eventType: "ReceivedChargeBack", timeZone: 0 },
                    createdAt: "2022-06-07T05:00:00Z",
                    frequency: "untilcancelled",
                    lastUpdated: "2022-06-07T05:00:00Z",
                    method: "email",
                    notificationId: 88976,
                    ownerId: "123",
                    ownerName: "Pilgrim Planner",
                    ownerType: 2,
                    source: "api",
                    status: 1,
                    target: "example@example.com",
                },
                {
                    content: { eventType: "ReceivedAchReturn", timeZone: 0 },
                    createdAt: "2022-06-07T05:00:00Z",
                    frequency: "untilcancelled",
                    lastUpdated: "2022-06-07T05:00:00Z",
                    method: "email",
                    notificationId: 88975,
                    ownerId: "123",
                    ownerName: "Pilgrim Planner",
                    ownerType: 2,
                    source: "api",
                    status: 1,
                    target: "example@example.com",
                },
            ],
            Summary: { pageSize: 20, totalAmount: 0, totalNetAmount: 0, totalPages: 1, totalRecords: 2 },
        };
        server
            .mockEndpoint()
            .get("/Query/notifications/org/123")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.query.listNotificationsOrg(123, {
            fromRecord: 251,
            limitRecord: 0,
            sortBy: "desc(field_name)",
        });
        expect(response).toEqual({
            Records: [
                {
                    content: {
                        eventType: "ReceivedChargeBack",
                        timeZone: 0,
                    },
                    createdAt: "2022-06-07T05:00:00Z",
                    frequency: "untilcancelled",
                    lastUpdated: "2022-06-07T05:00:00Z",
                    method: "email",
                    notificationId: 88976,
                    ownerId: "123",
                    ownerName: "Pilgrim Planner",
                    ownerType: 2,
                    source: "api",
                    status: 1,
                    target: "example@example.com",
                },
                {
                    content: {
                        eventType: "ReceivedAchReturn",
                        timeZone: 0,
                    },
                    createdAt: "2022-06-07T05:00:00Z",
                    frequency: "untilcancelled",
                    lastUpdated: "2022-06-07T05:00:00Z",
                    method: "email",
                    notificationId: 88975,
                    ownerId: "123",
                    ownerName: "Pilgrim Planner",
                    ownerType: 2,
                    source: "api",
                    status: 1,
                    target: "example@example.com",
                },
            ],
            Summary: {
                pageSize: 20,
                totalAmount: 0,
                totalNetAmount: 0,
                totalPages: 1,
                totalRecords: 2,
            },
        });
    });

    test("ListNotificationsOrg (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/notifications/org/1")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listNotificationsOrg(1);
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("ListNotificationsOrg (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/notifications/org/1")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listNotificationsOrg(1);
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("ListNotificationsOrg (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/notifications/org/1")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listNotificationsOrg(1);
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("ListNotificationsOrg (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: "responseText" };
        server
            .mockEndpoint()
            .get("/Query/notifications/org/1")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listNotificationsOrg(1);
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: "responseText",
            }),
        );
    });

    test("ListOrganizations (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            Records: [
                {
                    services: [{}],
                    contacts: [{}],
                    createdAt: "2022-07-01T15:00:01Z",
                    hasBilling: true,
                    hasResidual: true,
                    idOrg: 123,
                    isRoot: false,
                    orgAddress: "123 Walnut Street",
                    orgCity: "Johnson City",
                    orgCountry: "US",
                    orgEntryName: "pilgrim-planner",
                    orgId: "I-123",
                    orgName: "Pilgrim Planner",
                    orgParentId: 236,
                    orgParentName: "PropertyManager Pro",
                    orgState: "TN",
                    orgTimezone: -5,
                    orgType: 0,
                    orgWebsite: "www.pilgrimageplanner.com",
                    orgZip: "orgZip",
                    recipientEmailNotification: true,
                    replyToEmail: "example@email.com",
                    resumable: false,
                    users: [{ createdAt: "2022-07-01T15:00:01Z", UsrMFAMode: 0 }],
                },
            ],
            Summary: {
                pageIdentifier: "null",
                pageSize: 20,
                totalAmount: 77.22,
                totalNetAmount: 77.22,
                totalPages: 2,
                totalRecords: 2,
            },
        };
        server
            .mockEndpoint()
            .get("/Query/organizations/123")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.query.listOrganizations(123, {
            fromRecord: 251,
            limitRecord: 0,
            sortBy: "desc(field_name)",
        });
        expect(response).toEqual({
            Records: [
                {
                    services: [{}],
                    contacts: [{}],
                    createdAt: "2022-07-01T15:00:01Z",
                    hasBilling: true,
                    hasResidual: true,
                    idOrg: 123,
                    isRoot: false,
                    orgAddress: "123 Walnut Street",
                    orgCity: "Johnson City",
                    orgCountry: "US",
                    orgEntryName: "pilgrim-planner",
                    orgId: "I-123",
                    orgName: "Pilgrim Planner",
                    orgParentId: 236,
                    orgParentName: "PropertyManager Pro",
                    orgState: "TN",
                    orgTimezone: -5,
                    orgType: 0,
                    orgWebsite: "www.pilgrimageplanner.com",
                    orgZip: "orgZip",
                    recipientEmailNotification: true,
                    replyToEmail: "example@email.com",
                    resumable: false,
                    users: [
                        {
                            createdAt: "2022-07-01T15:00:01Z",
                            UsrMFAMode: 0,
                        },
                    ],
                },
            ],
            Summary: {
                pageIdentifier: "null",
                pageSize: 20,
                totalAmount: 77.22,
                totalNetAmount: 77.22,
                totalPages: 2,
                totalRecords: 2,
            },
        });
    });

    test("ListOrganizations (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/organizations/1")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listOrganizations(1);
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("ListOrganizations (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/organizations/1")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listOrganizations(1);
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("ListOrganizations (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/organizations/1")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listOrganizations(1);
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("ListOrganizations (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: "responseText" };
        server
            .mockEndpoint()
            .get("/Query/organizations/1")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listOrganizations(1);
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: "responseText",
            }),
        );
    });

    test("ListPayout (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            Records: [
                {
                    BatchNumber: "BT-2024321",
                    Bills: [{}],
                    CardToken: "CardToken",
                    CheckNumber: "12345",
                    Comments: "Deposit for materials",
                    CreatedAt: "2022-07-01T15:00:01Z",
                    EntryName: "d193cf9a46",
                    Events: [{}],
                    externalPaypointID: "Paypoint-100",
                    FeeAmount: 10.25,
                    Gateway: "TSYS",
                    IdOut: 236,
                    LastUpdated: "2022-07-01T15:00:01Z",
                    NetAmount: 3762.87,
                    ParentOrgName: "PropertyManager Pro",
                    PaymentData: { paymentDetails: { totalAmount: 100 } },
                    PaymentId: "12345678910",
                    PaymentMethod: "ach",
                    PaymentStatus: "Processed",
                    PaypointDbaname: "Sunshine Gutters",
                    PaypointLegalname: "Sunshine Services, LLC",
                    Source: "api",
                    Status: 1,
                    TotalAmount: 110.25,
                    Vendor: {
                        additionalData: { key1: { key: "value" }, key2: { key: "value" }, key3: { key: "value" } },
                        CreatedDate: "2022-07-01T15:00:01Z",
                    },
                },
            ],
            Summary: {
                totalPages: 391,
                totalRecords: 7803,
                totalAmount: 21435.95,
                totalNetAmount: 21435.95,
                totalPaid: 1,
                totalPaidAmount: 4,
                totalCanceled: 1743,
                totalCanceledAmount: 4515,
                totalCaptured: 138,
                totalCapturedAmount: 542,
                totalAuthorized: 4139,
                totalAuthorizedAmount: 11712.35,
                totalProcessing: 1780,
                totalProcessingAmount: 4660.6,
                totalOpen: 2,
                totalOpenAmount: 2,
                totalOnHold: 0,
                totalOnHoldAmount: 0,
                pageSize: 20,
            },
        };
        server
            .mockEndpoint()
            .get("/Query/payouts/8cfec329267")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.query.listPayout("8cfec329267", {
            fromRecord: 251,
            limitRecord: 0,
            sortBy: "desc(field_name)",
        });
        expect(response).toEqual({
            Records: [
                {
                    BatchNumber: "BT-2024321",
                    Bills: [{}],
                    CardToken: "CardToken",
                    CheckNumber: "12345",
                    Comments: "Deposit for materials",
                    CreatedAt: "2022-07-01T15:00:01Z",
                    EntryName: "d193cf9a46",
                    Events: [{}],
                    externalPaypointID: "Paypoint-100",
                    FeeAmount: 10.25,
                    Gateway: "TSYS",
                    IdOut: 236,
                    LastUpdated: "2022-07-01T15:00:01Z",
                    NetAmount: 3762.87,
                    ParentOrgName: "PropertyManager Pro",
                    PaymentData: {
                        paymentDetails: {
                            totalAmount: 100,
                        },
                    },
                    PaymentId: "12345678910",
                    PaymentMethod: "ach",
                    PaymentStatus: "Processed",
                    PaypointDbaname: "Sunshine Gutters",
                    PaypointLegalname: "Sunshine Services, LLC",
                    Source: "api",
                    Status: 1,
                    TotalAmount: 110.25,
                    Vendor: {
                        additionalData: {
                            key1: {
                                key: "value",
                            },
                            key2: {
                                key: "value",
                            },
                            key3: {
                                key: "value",
                            },
                        },
                        CreatedDate: "2022-07-01T15:00:01Z",
                    },
                },
            ],
            Summary: {
                totalPages: 391,
                totalRecords: 7803,
                totalAmount: 21435.95,
                totalNetAmount: 21435.95,
                totalPaid: 1,
                totalPaidAmount: 4,
                totalCanceled: 1743,
                totalCanceledAmount: 4515,
                totalCaptured: 138,
                totalCapturedAmount: 542,
                totalAuthorized: 4139,
                totalAuthorizedAmount: 11712.35,
                totalProcessing: 1780,
                totalProcessingAmount: 4660.6,
                totalOpen: 2,
                totalOpenAmount: 2,
                totalOnHold: 0,
                totalOnHoldAmount: 0,
                pageSize: 20,
            },
        });
    });

    test("ListPayout (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/payouts/entry")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listPayout("entry");
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("ListPayout (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/payouts/entry")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listPayout("entry");
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("ListPayout (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/payouts/entry")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listPayout("entry");
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("ListPayout (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: "responseText" };
        server
            .mockEndpoint()
            .get("/Query/payouts/entry")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listPayout("entry");
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: "responseText",
            }),
        );
    });

    test("ListPayoutOrg (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            Records: [
                {
                    BatchNumber: "BT-2024321",
                    Bills: [{}],
                    CardToken: "CardToken",
                    CheckNumber: "12345",
                    Comments: "Deposit for materials",
                    CreatedAt: "2022-07-01T15:00:01Z",
                    EntryName: "d193cf9a46",
                    Events: [{}],
                    externalPaypointID: "Paypoint-100",
                    FeeAmount: 10.25,
                    Gateway: "TSYS",
                    IdOut: 236,
                    LastUpdated: "2022-07-01T15:00:01Z",
                    NetAmount: 3762.87,
                    ParentOrgName: "PropertyManager Pro",
                    PaymentData: { paymentDetails: { totalAmount: 100 } },
                    PaymentId: "12345678910",
                    PaymentMethod: "ach",
                    PaymentStatus: "Processed",
                    PaypointDbaname: "Sunshine Gutters",
                    PaypointLegalname: "Sunshine Services, LLC",
                    Source: "api",
                    Status: 1,
                    TotalAmount: 110.25,
                    Vendor: {
                        additionalData: { key1: { key: "value" }, key2: { key: "value" }, key3: { key: "value" } },
                        CreatedDate: "2022-07-01T15:00:01Z",
                    },
                },
            ],
            Summary: {
                totalPages: 391,
                totalRecords: 7803,
                totalAmount: 21435.95,
                totalNetAmount: 21435.95,
                totalPaid: 1,
                totalPaidAmount: 4,
                totalCanceled: 1743,
                totalCanceledAmount: 4515,
                totalCaptured: 138,
                totalCapturedAmount: 542,
                totalAuthorized: 4139,
                totalAuthorizedAmount: 11712.35,
                totalProcessing: 1780,
                totalProcessingAmount: 4660.6,
                totalOpen: 2,
                totalOpenAmount: 2,
                totalOnHold: 0,
                totalOnHoldAmount: 0,
                pageSize: 20,
            },
        };
        server
            .mockEndpoint()
            .get("/Query/payouts/org/123")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.query.listPayoutOrg(123, {
            fromRecord: 251,
            limitRecord: 0,
            sortBy: "desc(field_name)",
        });
        expect(response).toEqual({
            Records: [
                {
                    BatchNumber: "BT-2024321",
                    Bills: [{}],
                    CardToken: "CardToken",
                    CheckNumber: "12345",
                    Comments: "Deposit for materials",
                    CreatedAt: "2022-07-01T15:00:01Z",
                    EntryName: "d193cf9a46",
                    Events: [{}],
                    externalPaypointID: "Paypoint-100",
                    FeeAmount: 10.25,
                    Gateway: "TSYS",
                    IdOut: 236,
                    LastUpdated: "2022-07-01T15:00:01Z",
                    NetAmount: 3762.87,
                    ParentOrgName: "PropertyManager Pro",
                    PaymentData: {
                        paymentDetails: {
                            totalAmount: 100,
                        },
                    },
                    PaymentId: "12345678910",
                    PaymentMethod: "ach",
                    PaymentStatus: "Processed",
                    PaypointDbaname: "Sunshine Gutters",
                    PaypointLegalname: "Sunshine Services, LLC",
                    Source: "api",
                    Status: 1,
                    TotalAmount: 110.25,
                    Vendor: {
                        additionalData: {
                            key1: {
                                key: "value",
                            },
                            key2: {
                                key: "value",
                            },
                            key3: {
                                key: "value",
                            },
                        },
                        CreatedDate: "2022-07-01T15:00:01Z",
                    },
                },
            ],
            Summary: {
                totalPages: 391,
                totalRecords: 7803,
                totalAmount: 21435.95,
                totalNetAmount: 21435.95,
                totalPaid: 1,
                totalPaidAmount: 4,
                totalCanceled: 1743,
                totalCanceledAmount: 4515,
                totalCaptured: 138,
                totalCapturedAmount: 542,
                totalAuthorized: 4139,
                totalAuthorizedAmount: 11712.35,
                totalProcessing: 1780,
                totalProcessingAmount: 4660.6,
                totalOpen: 2,
                totalOpenAmount: 2,
                totalOnHold: 0,
                totalOnHoldAmount: 0,
                pageSize: 20,
            },
        });
    });

    test("ListPayoutOrg (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/payouts/org/1")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listPayoutOrg(1);
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("ListPayoutOrg (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/payouts/org/1")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listPayoutOrg(1);
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("ListPayoutOrg (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/payouts/org/1")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listPayoutOrg(1);
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("ListPayoutOrg (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: "responseText" };
        server
            .mockEndpoint()
            .get("/Query/payouts/org/1")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listPayoutOrg(1);
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: "responseText",
            }),
        );
    });

    test("ListPaypoints (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            Records: [
                {
                    AverageMonthlyVolume: 1000,
                    AverageTicketAmount: 1000,
                    BAddress1: "123 Walnut Street",
                    BAddress2: "Suite 103",
                    BankData: [
                        {
                            bankAccountFunction: 0,
                            bankAccountHolderName: "Gruzya Adventure Outfitters LLC",
                            nickname: "Business Checking 1234",
                        },
                    ],
                    BCity: "New Vegas",
                    BCountry: "US",
                    BFax: "5551234567",
                    BinPerson: 60,
                    BinPhone: 20,
                    BinWeb: 20,
                    BoardingId: 340,
                    BPhone: "5551234567",
                    BStartdate: "01/01/1990",
                    BState: "FL",
                    BSummary: "Brick and mortar store that sells office supplies",
                    BTimeZone: -5,
                    BZip: "33000",
                    ContactData: [{}],
                    CreatedAt: "2022-07-01T15:00:01Z",
                    DbaName: "Sunshine Gutters",
                    DocumentsRef: "DocumentsRef",
                    Ein: "123456789",
                    EntryPoints: [{}],
                    externalPaypointID: "Paypoint-100",
                    ExternalProcessorInformation: "[MER_xxxxxxxxxxxxxx]/[NNNNNNNNN]",
                    HighTicketAmount: 1000,
                    IdPaypoint: 1000000,
                    LastModified: "2022-07-01T15:00:01Z",
                    LegalName: "Sunshine Services, LLC",
                    License: "2222222FFG",
                    LicenseState: "CA",
                    MAddress1: "123 Walnut Street",
                    MAddress2: "STE 900",
                    Mccid: "Mccid",
                    MCity: "Johnson City",
                    MCountry: "US",
                    MState: "TN",
                    MZip: "37615",
                    OrgId: 123,
                    OrgParentName: "PropertyManager Pro",
                    OwnerData: [{}],
                    OwnType: "Limited Liability Company",
                    PaypointStatus: 1,
                    SalesCode: "SalesCode",
                    Taxfillname: "Sunshine LLC",
                    TemplateId: 22,
                    WebsiteAddress: "www.example.com",
                    Whencharged: "When Service Provided",
                    Whendelivered: "0-7 Days",
                    Whenprovided: "30 Days or Less",
                    Whenrefund: "Exchange Only",
                },
            ],
            Summary: {
                pageIdentifier: "null",
                pageSize: 20,
                totalAmount: 77.22,
                totalNetAmount: 77.22,
                totalPages: 2,
                totalRecords: 2,
            },
        };
        server
            .mockEndpoint()
            .get("/Query/paypoints/123")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.query.listPaypoints(123, {
            fromRecord: 251,
            limitRecord: 0,
            sortBy: "desc(field_name)",
        });
        expect(response).toEqual({
            Records: [
                {
                    AverageMonthlyVolume: 1000,
                    AverageTicketAmount: 1000,
                    BAddress1: "123 Walnut Street",
                    BAddress2: "Suite 103",
                    BankData: [
                        {
                            bankAccountFunction: 0,
                            bankAccountHolderName: "Gruzya Adventure Outfitters LLC",
                            nickname: "Business Checking 1234",
                        },
                    ],
                    BCity: "New Vegas",
                    BCountry: "US",
                    BFax: "5551234567",
                    BinPerson: 60,
                    BinPhone: 20,
                    BinWeb: 20,
                    BoardingId: 340,
                    BPhone: "5551234567",
                    BStartdate: "01/01/1990",
                    BState: "FL",
                    BSummary: "Brick and mortar store that sells office supplies",
                    BTimeZone: -5,
                    BZip: "33000",
                    ContactData: [{}],
                    CreatedAt: "2022-07-01T15:00:01Z",
                    DbaName: "Sunshine Gutters",
                    DocumentsRef: "DocumentsRef",
                    Ein: "123456789",
                    EntryPoints: [{}],
                    externalPaypointID: "Paypoint-100",
                    ExternalProcessorInformation: "[MER_xxxxxxxxxxxxxx]/[NNNNNNNNN]",
                    HighTicketAmount: 1000,
                    IdPaypoint: 1000000,
                    LastModified: "2022-07-01T15:00:01Z",
                    LegalName: "Sunshine Services, LLC",
                    License: "2222222FFG",
                    LicenseState: "CA",
                    MAddress1: "123 Walnut Street",
                    MAddress2: "STE 900",
                    Mccid: "Mccid",
                    MCity: "Johnson City",
                    MCountry: "US",
                    MState: "TN",
                    MZip: "37615",
                    OrgId: 123,
                    OrgParentName: "PropertyManager Pro",
                    OwnerData: [{}],
                    OwnType: "Limited Liability Company",
                    PaypointStatus: 1,
                    SalesCode: "SalesCode",
                    Taxfillname: "Sunshine LLC",
                    TemplateId: 22,
                    WebsiteAddress: "www.example.com",
                    Whencharged: "When Service Provided",
                    Whendelivered: "0-7 Days",
                    Whenprovided: "30 Days or Less",
                    Whenrefund: "Exchange Only",
                },
            ],
            Summary: {
                pageIdentifier: "null",
                pageSize: 20,
                totalAmount: 77.22,
                totalNetAmount: 77.22,
                totalPages: 2,
                totalRecords: 2,
            },
        });
    });

    test("ListPaypoints (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/Query/paypoints/1").respondWith().statusCode(400).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.query.listPaypoints(1);
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("ListPaypoints (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/Query/paypoints/1").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.query.listPaypoints(1);
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("ListPaypoints (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/Query/paypoints/1").respondWith().statusCode(500).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.query.listPaypoints(1);
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("ListPaypoints (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: "responseText" };
        server.mockEndpoint().get("/Query/paypoints/1").respondWith().statusCode(503).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.query.listPaypoints(1);
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: "responseText",
            }),
        );
    });

    test("ListSettlements (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            Records: [
                {
                    BatchAmount: 32,
                    BatchNumber: "batch-100-20-2024",
                    Category: "auth",
                    CreatedAt: "2024-11-19T15:58:01Z",
                    Customer: {
                        AdditionalData: "AdditionalData",
                        BillingAddress1: "100 Golden Ridge Drive",
                        BillingAddress2: "STE 100",
                        BillingCity: "Mendota",
                        BillingCountry: "US",
                        BillingEmail: "lydia@example.com",
                        BillingPhone: "+12345678",
                        BillingState: "VA",
                        BillingZip: "20147",
                        customerId: 2707,
                        CustomerNumber: "901102",
                        customerStatus: 1,
                        FirstName: "Lydia",
                        LastName: "Marshall",
                    },
                    ExpectedDepositDate: "2024-11-22T00:00:00Z",
                    GatewayTransId: "TRN_XXXXX",
                    Id: 25048,
                    isHold: 0,
                    MaskedAccount: "1XXXXXX5678",
                    Method: "ach",
                    NetAmount: 2,
                    Operation: "Sale",
                    OrderId: "",
                    ParentOrgName: "Pilgrim Planner",
                    PaymentData: {
                        AccountType: "Checking",
                        HolderName: "Lydia Marshall",
                        MaskedAccount: "1XXXXXX5678",
                        paymentDetails: {
                            categories: [{ amount: 1000, label: "Deposit" }],
                            currency: "USD",
                            serviceFee: 0,
                            splitFunding: [{}],
                            totalAmount: 2,
                        },
                    },
                    PaymentTransId: "245-9e4072eef77e45979ea0e49f680000X",
                    PaymentTransStatus: 1,
                    PaypointDbaname: "Gruzya Adventure Outfitters, LLC",
                    PaypointEntryname: "7f1a3816XX",
                    PaypointLegalname: "Gruzya Adventure Outfitters, LLC",
                    ResponseData: {
                        authcode: "",
                        avsresponse_text: "",
                        cvvresponse_text: "",
                        response_code: "100",
                        response_code_text: "Operation successful.",
                        responsetext: "CAPTURED",
                        transactionid: "TRN_XXXXX",
                    },
                    ScheduleReference: 0,
                    SettledAmount: 0.5,
                    SettlementDate: "2024-11-20T00:00:00Z",
                    Source: "api",
                    Status: 1,
                    TransactionEvents: [
                        { EventTime: "2024-11-19T15:57:40Z", TransEvent: "Created" },
                        {
                            EventData: {
                                account_id: "TRA_XXXXX",
                                account_name: "123456",
                                action: {
                                    app_id: "XXXXX",
                                    app_name: "PayAbli",
                                    id: "ACT_XXXXX",
                                    result_code: "SUCCESS",
                                    time_created: "2024-11-19T20:58:01.583Z",
                                    type: "AUTHORIZE",
                                },
                                amount: "200",
                                batch_id: "",
                                capture_mode: "AUTO",
                                channel: "CNP",
                                country: "US",
                                currency: "USD",
                                fees: { amount: "0", rate: "0.00", total_amount: "0" },
                                id: "TRN_XXXXX",
                                merchant_amount: "200",
                                merchant_id: "MER_XXXXX",
                                merchant_name: "Henriette97",
                                order: { reference: "" },
                                payment_method: {
                                    bank_transfer: {
                                        account_type: "CHECKING",
                                        bank: { name: "" },
                                        masked_account_number_last4: "XXXX5678",
                                    },
                                    entry_mode: "ECOM",
                                    message: "Success",
                                    narrative: "Lydia Marshall",
                                    result: "00",
                                },
                                reference: "245-XXXXX",
                                status: "CAPTURED",
                                time_created: "2024-11-19T20:58:01.583Z",
                                type: "SALE",
                            },
                            EventTime: "2024-11-19T20:58:01Z",
                            TransEvent: "Approved",
                        },
                        { EventTime: "2024-11-20T03:05:10Z", TransEvent: "ClosedBatch" },
                    ],
                    TransactionTime: "2024-11-19T15:58:01Z",
                    TransMethod: "ach",
                    Type: "credit",
                },
            ],
            Summary: {
                heldAmount: 3.7,
                pageSize: 0,
                refunds: -3521.85,
                serviceFees: 852.48,
                totalAmount: 61645.74,
                totalNetAmount: 61645.74,
                totalPages: 21872,
                totalRecords: 21872,
                transferAmount: 0,
            },
        };
        server
            .mockEndpoint()
            .get("/Query/settlements/8cfec329267")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.query.listSettlements("8cfec329267", {
            fromRecord: 251,
            limitRecord: 0,
            sortBy: "desc(field_name)",
        });
        expect(response).toEqual({
            Records: [
                {
                    BatchAmount: 32,
                    BatchNumber: "batch-100-20-2024",
                    Category: "auth",
                    CreatedAt: "2024-11-19T15:58:01Z",
                    Customer: {
                        AdditionalData: "AdditionalData",
                        BillingAddress1: "100 Golden Ridge Drive",
                        BillingAddress2: "STE 100",
                        BillingCity: "Mendota",
                        BillingCountry: "US",
                        BillingEmail: "lydia@example.com",
                        BillingPhone: "+12345678",
                        BillingState: "VA",
                        BillingZip: "20147",
                        customerId: 2707,
                        CustomerNumber: "901102",
                        customerStatus: 1,
                        FirstName: "Lydia",
                        LastName: "Marshall",
                    },
                    ExpectedDepositDate: "2024-11-22T00:00:00Z",
                    GatewayTransId: "TRN_XXXXX",
                    Id: 25048,
                    isHold: 0,
                    MaskedAccount: "1XXXXXX5678",
                    Method: "ach",
                    NetAmount: 2,
                    Operation: "Sale",
                    OrderId: "",
                    ParentOrgName: "Pilgrim Planner",
                    PaymentData: {
                        AccountType: "Checking",
                        HolderName: "Lydia Marshall",
                        MaskedAccount: "1XXXXXX5678",
                        paymentDetails: {
                            categories: [
                                {
                                    amount: 1000,
                                    label: "Deposit",
                                },
                            ],
                            currency: "USD",
                            serviceFee: 0,
                            splitFunding: [{}],
                            totalAmount: 2,
                        },
                    },
                    PaymentTransId: "245-9e4072eef77e45979ea0e49f680000X",
                    PaymentTransStatus: 1,
                    PaypointDbaname: "Gruzya Adventure Outfitters, LLC",
                    PaypointEntryname: "7f1a3816XX",
                    PaypointLegalname: "Gruzya Adventure Outfitters, LLC",
                    ResponseData: {
                        authcode: "",
                        avsresponse_text: "",
                        cvvresponse_text: "",
                        response_code: "100",
                        response_code_text: "Operation successful.",
                        responsetext: "CAPTURED",
                        transactionid: "TRN_XXXXX",
                    },
                    ScheduleReference: 0,
                    SettledAmount: 0.5,
                    SettlementDate: "2024-11-20T00:00:00Z",
                    Source: "api",
                    Status: 1,
                    TransactionEvents: [
                        {
                            EventTime: "2024-11-19T15:57:40Z",
                            TransEvent: "Created",
                        },
                        {
                            EventData: {
                                account_id: "TRA_XXXXX",
                                account_name: "123456",
                                action: {
                                    app_id: "XXXXX",
                                    app_name: "PayAbli",
                                    id: "ACT_XXXXX",
                                    result_code: "SUCCESS",
                                    time_created: "2024-11-19T20:58:01.583Z",
                                    type: "AUTHORIZE",
                                },
                                amount: "200",
                                batch_id: "",
                                capture_mode: "AUTO",
                                channel: "CNP",
                                country: "US",
                                currency: "USD",
                                fees: {
                                    amount: "0",
                                    rate: "0.00",
                                    total_amount: "0",
                                },
                                id: "TRN_XXXXX",
                                merchant_amount: "200",
                                merchant_id: "MER_XXXXX",
                                merchant_name: "Henriette97",
                                order: {
                                    reference: "",
                                },
                                payment_method: {
                                    bank_transfer: {
                                        account_type: "CHECKING",
                                        bank: {
                                            name: "",
                                        },
                                        masked_account_number_last4: "XXXX5678",
                                    },
                                    entry_mode: "ECOM",
                                    message: "Success",
                                    narrative: "Lydia Marshall",
                                    result: "00",
                                },
                                reference: "245-XXXXX",
                                status: "CAPTURED",
                                time_created: "2024-11-19T20:58:01.583Z",
                                type: "SALE",
                            },
                            EventTime: "2024-11-19T20:58:01Z",
                            TransEvent: "Approved",
                        },
                        {
                            EventTime: "2024-11-20T03:05:10Z",
                            TransEvent: "ClosedBatch",
                        },
                    ],
                    TransactionTime: "2024-11-19T15:58:01Z",
                    TransMethod: "ach",
                    Type: "credit",
                },
            ],
            Summary: {
                heldAmount: 3.7,
                pageSize: 0,
                refunds: -3521.85,
                serviceFees: 852.48,
                totalAmount: 61645.74,
                totalNetAmount: 61645.74,
                totalPages: 21872,
                totalRecords: 21872,
                transferAmount: 0,
            },
        });
    });

    test("ListSettlements (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/settlements/entry")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listSettlements("entry");
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("ListSettlements (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/settlements/entry")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listSettlements("entry");
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("ListSettlements (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/settlements/entry")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listSettlements("entry");
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("ListSettlements (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: "responseText" };
        server
            .mockEndpoint()
            .get("/Query/settlements/entry")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listSettlements("entry");
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: "responseText",
            }),
        );
    });

    test("ListSettlementsOrg (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            Records: [
                {
                    BatchAmount: 32,
                    BatchNumber: "batch-100-20-2024",
                    Category: "auth",
                    CreatedAt: "2024-11-19T15:58:01Z",
                    Customer: {
                        AdditionalData: "AdditionalData",
                        BillingAddress1: "100 Golden Ridge Drive",
                        BillingAddress2: "STE 100",
                        BillingCity: "Mendota",
                        BillingCountry: "US",
                        BillingEmail: "lydia@example.com",
                        BillingPhone: "+12345678",
                        BillingState: "VA",
                        BillingZip: "20147",
                        customerId: 2707,
                        CustomerNumber: "901102",
                        customerStatus: 1,
                        FirstName: "Lydia",
                        LastName: "Marshall",
                    },
                    ExpectedDepositDate: "2024-11-22T00:00:00Z",
                    GatewayTransId: "TRN_XXXXX",
                    Id: 25048,
                    isHold: 0,
                    MaskedAccount: "1XXXXXX5678",
                    Method: "ach",
                    NetAmount: 2,
                    Operation: "Sale",
                    OrderId: "",
                    ParentOrgName: "Pilgrim Planner",
                    PaymentData: {
                        AccountType: "Checking",
                        HolderName: "Lydia Marshall",
                        MaskedAccount: "1XXXXXX5678",
                        paymentDetails: {
                            categories: [{ amount: 1000, label: "Deposit" }],
                            currency: "USD",
                            serviceFee: 0,
                            splitFunding: [{}],
                            totalAmount: 2,
                        },
                    },
                    PaymentTransId: "245-9e4072eef77e45979ea0e49f680000X",
                    PaymentTransStatus: 1,
                    PaypointDbaname: "Gruzya Adventure Outfitters, LLC",
                    PaypointEntryname: "7f1a3816XX",
                    PaypointLegalname: "Gruzya Adventure Outfitters, LLC",
                    ResponseData: {
                        authcode: "",
                        avsresponse_text: "",
                        cvvresponse_text: "",
                        response_code: "100",
                        response_code_text: "Operation successful.",
                        responsetext: "CAPTURED",
                        transactionid: "TRN_XXXXX",
                    },
                    ScheduleReference: 0,
                    SettledAmount: 0.5,
                    SettlementDate: "2024-11-20T00:00:00Z",
                    Source: "api",
                    Status: 1,
                    TransactionEvents: [
                        { EventTime: "2024-11-19T15:57:40Z", TransEvent: "Created" },
                        {
                            EventData: {
                                account_id: "TRA_XXXXX",
                                account_name: "123456",
                                action: {
                                    app_id: "XXXXX",
                                    app_name: "PayAbli",
                                    id: "ACT_XXXXX",
                                    result_code: "SUCCESS",
                                    time_created: "2024-11-19T20:58:01.583Z",
                                    type: "AUTHORIZE",
                                },
                                amount: "200",
                                batch_id: "",
                                capture_mode: "AUTO",
                                channel: "CNP",
                                country: "US",
                                currency: "USD",
                                fees: { amount: "0", rate: "0.00", total_amount: "0" },
                                id: "TRN_XXXXX",
                                merchant_amount: "200",
                                merchant_id: "MER_XXXXX",
                                merchant_name: "Henriette97",
                                order: { reference: "" },
                                payment_method: {
                                    bank_transfer: {
                                        account_type: "CHECKING",
                                        bank: { name: "" },
                                        masked_account_number_last4: "XXXX5678",
                                    },
                                    entry_mode: "ECOM",
                                    message: "Success",
                                    narrative: "Lydia Marshall",
                                    result: "00",
                                },
                                reference: "245-XXXXX",
                                status: "CAPTURED",
                                time_created: "2024-11-19T20:58:01.583Z",
                                type: "SALE",
                            },
                            EventTime: "2024-11-19T20:58:01Z",
                            TransEvent: "Approved",
                        },
                        { EventTime: "2024-11-20T03:05:10Z", TransEvent: "ClosedBatch" },
                    ],
                    TransactionTime: "2024-11-19T15:58:01Z",
                    TransMethod: "ach",
                    Type: "credit",
                },
            ],
            Summary: {
                heldAmount: 3.7,
                pageSize: 0,
                refunds: -3521.85,
                serviceFees: 852.48,
                totalAmount: 61645.74,
                totalNetAmount: 61645.74,
                totalPages: 21872,
                totalRecords: 21872,
                transferAmount: 0,
            },
        };
        server
            .mockEndpoint()
            .get("/Query/settlements/org/123")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.query.listSettlementsOrg(123, {
            fromRecord: 251,
            limitRecord: 0,
            sortBy: "desc(field_name)",
        });
        expect(response).toEqual({
            Records: [
                {
                    BatchAmount: 32,
                    BatchNumber: "batch-100-20-2024",
                    Category: "auth",
                    CreatedAt: "2024-11-19T15:58:01Z",
                    Customer: {
                        AdditionalData: "AdditionalData",
                        BillingAddress1: "100 Golden Ridge Drive",
                        BillingAddress2: "STE 100",
                        BillingCity: "Mendota",
                        BillingCountry: "US",
                        BillingEmail: "lydia@example.com",
                        BillingPhone: "+12345678",
                        BillingState: "VA",
                        BillingZip: "20147",
                        customerId: 2707,
                        CustomerNumber: "901102",
                        customerStatus: 1,
                        FirstName: "Lydia",
                        LastName: "Marshall",
                    },
                    ExpectedDepositDate: "2024-11-22T00:00:00Z",
                    GatewayTransId: "TRN_XXXXX",
                    Id: 25048,
                    isHold: 0,
                    MaskedAccount: "1XXXXXX5678",
                    Method: "ach",
                    NetAmount: 2,
                    Operation: "Sale",
                    OrderId: "",
                    ParentOrgName: "Pilgrim Planner",
                    PaymentData: {
                        AccountType: "Checking",
                        HolderName: "Lydia Marshall",
                        MaskedAccount: "1XXXXXX5678",
                        paymentDetails: {
                            categories: [
                                {
                                    amount: 1000,
                                    label: "Deposit",
                                },
                            ],
                            currency: "USD",
                            serviceFee: 0,
                            splitFunding: [{}],
                            totalAmount: 2,
                        },
                    },
                    PaymentTransId: "245-9e4072eef77e45979ea0e49f680000X",
                    PaymentTransStatus: 1,
                    PaypointDbaname: "Gruzya Adventure Outfitters, LLC",
                    PaypointEntryname: "7f1a3816XX",
                    PaypointLegalname: "Gruzya Adventure Outfitters, LLC",
                    ResponseData: {
                        authcode: "",
                        avsresponse_text: "",
                        cvvresponse_text: "",
                        response_code: "100",
                        response_code_text: "Operation successful.",
                        responsetext: "CAPTURED",
                        transactionid: "TRN_XXXXX",
                    },
                    ScheduleReference: 0,
                    SettledAmount: 0.5,
                    SettlementDate: "2024-11-20T00:00:00Z",
                    Source: "api",
                    Status: 1,
                    TransactionEvents: [
                        {
                            EventTime: "2024-11-19T15:57:40Z",
                            TransEvent: "Created",
                        },
                        {
                            EventData: {
                                account_id: "TRA_XXXXX",
                                account_name: "123456",
                                action: {
                                    app_id: "XXXXX",
                                    app_name: "PayAbli",
                                    id: "ACT_XXXXX",
                                    result_code: "SUCCESS",
                                    time_created: "2024-11-19T20:58:01.583Z",
                                    type: "AUTHORIZE",
                                },
                                amount: "200",
                                batch_id: "",
                                capture_mode: "AUTO",
                                channel: "CNP",
                                country: "US",
                                currency: "USD",
                                fees: {
                                    amount: "0",
                                    rate: "0.00",
                                    total_amount: "0",
                                },
                                id: "TRN_XXXXX",
                                merchant_amount: "200",
                                merchant_id: "MER_XXXXX",
                                merchant_name: "Henriette97",
                                order: {
                                    reference: "",
                                },
                                payment_method: {
                                    bank_transfer: {
                                        account_type: "CHECKING",
                                        bank: {
                                            name: "",
                                        },
                                        masked_account_number_last4: "XXXX5678",
                                    },
                                    entry_mode: "ECOM",
                                    message: "Success",
                                    narrative: "Lydia Marshall",
                                    result: "00",
                                },
                                reference: "245-XXXXX",
                                status: "CAPTURED",
                                time_created: "2024-11-19T20:58:01.583Z",
                                type: "SALE",
                            },
                            EventTime: "2024-11-19T20:58:01Z",
                            TransEvent: "Approved",
                        },
                        {
                            EventTime: "2024-11-20T03:05:10Z",
                            TransEvent: "ClosedBatch",
                        },
                    ],
                    TransactionTime: "2024-11-19T15:58:01Z",
                    TransMethod: "ach",
                    Type: "credit",
                },
            ],
            Summary: {
                heldAmount: 3.7,
                pageSize: 0,
                refunds: -3521.85,
                serviceFees: 852.48,
                totalAmount: 61645.74,
                totalNetAmount: 61645.74,
                totalPages: 21872,
                totalRecords: 21872,
                transferAmount: 0,
            },
        });
    });

    test("ListSettlementsOrg (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/settlements/org/1")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listSettlementsOrg(1);
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("ListSettlementsOrg (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/settlements/org/1")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listSettlementsOrg(1);
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("ListSettlementsOrg (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/settlements/org/1")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listSettlementsOrg(1);
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("ListSettlementsOrg (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: "responseText" };
        server
            .mockEndpoint()
            .get("/Query/settlements/org/1")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listSettlementsOrg(1);
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: "responseText",
            }),
        );
    });

    test("ListSubscriptions (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            Records: {
                CreatedAt: "2023-12-14T08:51:10Z",
                Customer: {
                    AdditionalData: "AdditionalData",
                    BillingAddress1: "68 Golden Drive",
                    BillingAddress2: "",
                    BillingCity: "Johnson City",
                    BillingCountry: "US",
                    BillingEmail: "company@payabli.com",
                    BillingPhone: "",
                    BillingState: "TN",
                    BillingZip: "37612",
                    CompanyName: "Sunshine LLC",
                    customerId: 1323,
                    CustomerNumber: "1234",
                    customerStatus: 1,
                    FirstName: "Lisandra",
                    Identifiers: ['\\"firstname\\"', '\\"lastname\\"', '\\"email\\"'],
                    LastName: "Smitch",
                    ShippingAddress1: "68 Golden Drive",
                    ShippingCity: "Johnson City",
                    ShippingCountry: "US",
                    ShippingState: "TN",
                    ShippingZip: "37612",
                },
                EndDate: "2026-03-20T00:00:00Z",
                EntrypageId: 0,
                ExternalPaypointID: "f743aed24a-10",
                FeeAmount: 0,
                Frequency: "monthly",
                IdSub: 580,
                InvoiceData: {
                    AdditionalData: "AdditionalData",
                    frequency: "one-time",
                    invoiceAmount: 100,
                    invoiceNumber: "QA-1702561870",
                    invoiceStatus: 1,
                    invoiceType: 1,
                    items: [
                        {
                            itemCost: 10,
                            itemDescription: "service",
                            itemMode: 1,
                            itemProductName: "Mat replacement",
                            itemQty: 5,
                            itemTotalAmount: 50,
                        },
                        {
                            itemCost: 5,
                            itemDescription: "service",
                            itemMode: 1,
                            itemProductName: "Mat clean",
                            itemQty: 10,
                            itemTotalAmount: 50,
                        },
                    ],
                },
                LastRun: "2024-01-02T14:32:11Z",
                LastUpdated: "2023-12-14T08:51:10Z",
                LeftCycles: 20,
                Method: "card",
                NetAmount: 10,
                NextDate: "2024-07-20T00:00:00Z",
                ParentOrgName: "FitnessManager",
                PaymentData: {
                    AccountExp: "0924",
                    AccountType: "unknown",
                    AccountZip: "90210",
                    binData: {
                        binMatchedLength: "6",
                        binCardBrand: "Visa",
                        binCardType: "Credit",
                        binCardCategory: "PLATINUM",
                        binCardIssuer: "Bank of Example",
                        binCardIssuerCountry: "United States",
                        binCardIssuerCountryCodeA2: "US",
                        binCardIssuerCountryNumber: "840",
                        binCardIsRegulated: "false",
                        binCardUseCategory: "Consumer",
                        binCardIssuerCountryCodeA3: "USA",
                    },
                    HolderName: "Mr. Michael Abernathy",
                    Initiator: "payor",
                    MaskedAccount: "2222 4XXXXXX0010",
                    paymentDetails: { currency: "USD", serviceFee: 0, totalAmount: 100 },
                    Sequence: "subsequent",
                    StoredMethodUsageType: "subscription",
                },
                PaypointDbaname: "Athlete Factory LLC",
                PaypointEntryname: "473ac58b0",
                PaypointId: 10,
                PaypointLegalname: "Athlete Factory LLC",
                PlanId: 1,
                StartDate: "2024-07-20T00:00:00Z",
                SubEvents: [
                    {
                        description: "created",
                        eventTime: "2023-12-14T13:51:10Z",
                        refData: "00-3470dfe2658b492811630255602f3fb5-d06fe0f72110000-00",
                    },
                    {
                        description: "updated",
                        eventTime: "2023-12-15T10:30:00Z",
                        refData: "01-1234abcde6789fghij4567klmnopqr89-abcdefghi12345678-01",
                        source: "web app",
                    },
                ],
                SubStatus: 1,
                TotalAmount: 100,
                TotalCycles: 20,
                UntilCancelled: false,
            },
            Summary: {
                pageIdentifier: "XXXXXXXXXXXXXXXXXXX",
                pageSize: 20,
                totalAmount: 150.22,
                totalNetAmount: 150.22,
                totalPages: 1,
                totalRecords: 2,
            },
        };
        server
            .mockEndpoint()
            .get("/Query/subscriptions/8cfec329267")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.query.listSubscriptions("8cfec329267", {
            fromRecord: 251,
            limitRecord: 0,
            sortBy: "desc(field_name)",
        });
        expect(response).toEqual({
            Records: {
                CreatedAt: "2023-12-14T08:51:10Z",
                Customer: {
                    AdditionalData: "AdditionalData",
                    BillingAddress1: "68 Golden Drive",
                    BillingAddress2: "",
                    BillingCity: "Johnson City",
                    BillingCountry: "US",
                    BillingEmail: "company@payabli.com",
                    BillingPhone: "",
                    BillingState: "TN",
                    BillingZip: "37612",
                    CompanyName: "Sunshine LLC",
                    customerId: 1323,
                    CustomerNumber: "1234",
                    customerStatus: 1,
                    FirstName: "Lisandra",
                    Identifiers: ['\\"firstname\\"', '\\"lastname\\"', '\\"email\\"'],
                    LastName: "Smitch",
                    ShippingAddress1: "68 Golden Drive",
                    ShippingCity: "Johnson City",
                    ShippingCountry: "US",
                    ShippingState: "TN",
                    ShippingZip: "37612",
                },
                EndDate: "2026-03-20T00:00:00Z",
                EntrypageId: 0,
                ExternalPaypointID: "f743aed24a-10",
                FeeAmount: 0,
                Frequency: "monthly",
                IdSub: 580,
                InvoiceData: {
                    AdditionalData: "AdditionalData",
                    frequency: "one-time",
                    invoiceAmount: 100,
                    invoiceNumber: "QA-1702561870",
                    invoiceStatus: 1,
                    invoiceType: 1,
                    items: [
                        {
                            itemCost: 10,
                            itemDescription: "service",
                            itemMode: 1,
                            itemProductName: "Mat replacement",
                            itemQty: 5,
                            itemTotalAmount: 50,
                        },
                        {
                            itemCost: 5,
                            itemDescription: "service",
                            itemMode: 1,
                            itemProductName: "Mat clean",
                            itemQty: 10,
                            itemTotalAmount: 50,
                        },
                    ],
                },
                LastRun: "2024-01-02T14:32:11Z",
                LastUpdated: "2023-12-14T08:51:10Z",
                LeftCycles: 20,
                Method: "card",
                NetAmount: 10,
                NextDate: "2024-07-20T00:00:00Z",
                ParentOrgName: "FitnessManager",
                PaymentData: {
                    AccountExp: "0924",
                    AccountType: "unknown",
                    AccountZip: "90210",
                    binData: {
                        binMatchedLength: "6",
                        binCardBrand: "Visa",
                        binCardType: "Credit",
                        binCardCategory: "PLATINUM",
                        binCardIssuer: "Bank of Example",
                        binCardIssuerCountry: "United States",
                        binCardIssuerCountryCodeA2: "US",
                        binCardIssuerCountryNumber: "840",
                        binCardIsRegulated: "false",
                        binCardUseCategory: "Consumer",
                        binCardIssuerCountryCodeA3: "USA",
                    },
                    HolderName: "Mr. Michael Abernathy",
                    Initiator: "payor",
                    MaskedAccount: "2222 4XXXXXX0010",
                    paymentDetails: {
                        currency: "USD",
                        serviceFee: 0,
                        totalAmount: 100,
                    },
                    Sequence: "subsequent",
                    StoredMethodUsageType: "subscription",
                },
                PaypointDbaname: "Athlete Factory LLC",
                PaypointEntryname: "473ac58b0",
                PaypointId: 10,
                PaypointLegalname: "Athlete Factory LLC",
                PlanId: 1,
                StartDate: "2024-07-20T00:00:00Z",
                SubEvents: [
                    {
                        description: "created",
                        eventTime: "2023-12-14T13:51:10Z",
                        refData: "00-3470dfe2658b492811630255602f3fb5-d06fe0f72110000-00",
                    },
                    {
                        description: "updated",
                        eventTime: "2023-12-15T10:30:00Z",
                        refData: "01-1234abcde6789fghij4567klmnopqr89-abcdefghi12345678-01",
                        source: "web app",
                    },
                ],
                SubStatus: 1,
                TotalAmount: 100,
                TotalCycles: 20,
                UntilCancelled: false,
            },
            Summary: {
                pageIdentifier: "XXXXXXXXXXXXXXXXXXX",
                pageSize: 20,
                totalAmount: 150.22,
                totalNetAmount: 150.22,
                totalPages: 1,
                totalRecords: 2,
            },
        });
    });

    test("ListSubscriptions (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/subscriptions/entry")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listSubscriptions("entry");
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("ListSubscriptions (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/subscriptions/entry")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listSubscriptions("entry");
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("ListSubscriptions (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/subscriptions/entry")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listSubscriptions("entry");
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("ListSubscriptions (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: "responseText" };
        server
            .mockEndpoint()
            .get("/Query/subscriptions/entry")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listSubscriptions("entry");
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: "responseText",
            }),
        );
    });

    test("ListSubscriptionsOrg (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            Records: {
                CreatedAt: "2023-12-14T08:51:10Z",
                Customer: {
                    AdditionalData: "AdditionalData",
                    BillingAddress1: "68 Golden Drive",
                    BillingAddress2: "",
                    BillingCity: "Johnson City",
                    BillingCountry: "US",
                    BillingEmail: "company@payabli.com",
                    BillingPhone: "",
                    BillingState: "TN",
                    BillingZip: "37612",
                    CompanyName: "Sunshine LLC",
                    customerId: 1323,
                    CustomerNumber: "1234",
                    customerStatus: 1,
                    FirstName: "Lisandra",
                    Identifiers: ['\\"firstname\\"', '\\"lastname\\"', '\\"email\\"'],
                    LastName: "Smitch",
                    ShippingAddress1: "68 Golden Drive",
                    ShippingCity: "Johnson City",
                    ShippingCountry: "US",
                    ShippingState: "TN",
                    ShippingZip: "37612",
                },
                EndDate: "2026-03-20T00:00:00Z",
                EntrypageId: 0,
                ExternalPaypointID: "f743aed24a-10",
                FeeAmount: 0,
                Frequency: "monthly",
                IdSub: 580,
                InvoiceData: {
                    AdditionalData: "AdditionalData",
                    frequency: "one-time",
                    invoiceAmount: 100,
                    invoiceNumber: "QA-1702561870",
                    invoiceStatus: 1,
                    invoiceType: 1,
                    items: [
                        {
                            itemCost: 10,
                            itemDescription: "service",
                            itemMode: 1,
                            itemProductName: "Mat replacement",
                            itemQty: 5,
                            itemTotalAmount: 50,
                        },
                        {
                            itemCost: 5,
                            itemDescription: "service",
                            itemMode: 1,
                            itemProductName: "Mat clean",
                            itemQty: 10,
                            itemTotalAmount: 50,
                        },
                    ],
                },
                LastRun: "2024-01-02T14:32:11Z",
                LastUpdated: "2023-12-14T08:51:10Z",
                LeftCycles: 20,
                Method: "card",
                NetAmount: 10,
                NextDate: "2024-07-20T00:00:00Z",
                ParentOrgName: "FitnessManager",
                PaymentData: {
                    AccountExp: "0924",
                    AccountType: "unknow",
                    AccountZip: "90210",
                    binData: {
                        binMatchedLength: "6",
                        binCardBrand: "Visa",
                        binCardType: "Credit",
                        binCardCategory: "PLATINUM",
                        binCardIssuer: "Bank of Example",
                        binCardIssuerCountry: "United States",
                        binCardIssuerCountryCodeA2: "US",
                        binCardIssuerCountryNumber: "840",
                        binCardIsRegulated: "false",
                        binCardUseCategory: "Consumer",
                        binCardIssuerCountryCodeA3: "USA",
                    },
                    HolderName: "Mr. Michael Abernathy",
                    Initiator: "payor",
                    MaskedAccount: "2222 4XXXXXX0010",
                    paymentDetails: { currency: "USD", serviceFee: 0, totalAmount: 100 },
                    Sequence: "subsequent",
                    StoredMethodUsageType: "subscription",
                },
                PaypointDbaname: "Athlete Factory LLC",
                PaypointEntryname: "473ac58b0",
                PaypointId: 10,
                PaypointLegalname: "Athlete Factory LLC",
                PlanId: 1,
                StartDate: "2024-07-20T00:00:00Z",
                SubEvents: [
                    {
                        description: "created",
                        eventTime: "2023-12-14T13:51:10Z",
                        refData: "00-3470dfe2658b492811630255602f3fb5-d06fe0f72110000-00",
                    },
                    {
                        description: "updated",
                        eventTime: "2023-12-15T10:30:00Z",
                        refData: "01-1234abcde6789fghij4567klmnopqr89-abcdefghi12345678-01",
                        source: "web app",
                    },
                ],
                SubStatus: 1,
                TotalAmount: 100,
                TotalCycles: 20,
                UntilCancelled: false,
            },
            Summary: {
                pageIdentifier: "XXXXXXXXXXXXXXXXXXX",
                pageSize: 20,
                totalAmount: 150.22,
                totalNetAmount: 150.22,
                totalPages: 1,
                totalRecords: 2,
            },
        };
        server
            .mockEndpoint()
            .get("/Query/subscriptions/org/123")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.query.listSubscriptionsOrg(123, {
            fromRecord: 251,
            limitRecord: 0,
            sortBy: "desc(field_name)",
        });
        expect(response).toEqual({
            Records: {
                CreatedAt: "2023-12-14T08:51:10Z",
                Customer: {
                    AdditionalData: "AdditionalData",
                    BillingAddress1: "68 Golden Drive",
                    BillingAddress2: "",
                    BillingCity: "Johnson City",
                    BillingCountry: "US",
                    BillingEmail: "company@payabli.com",
                    BillingPhone: "",
                    BillingState: "TN",
                    BillingZip: "37612",
                    CompanyName: "Sunshine LLC",
                    customerId: 1323,
                    CustomerNumber: "1234",
                    customerStatus: 1,
                    FirstName: "Lisandra",
                    Identifiers: ['\\"firstname\\"', '\\"lastname\\"', '\\"email\\"'],
                    LastName: "Smitch",
                    ShippingAddress1: "68 Golden Drive",
                    ShippingCity: "Johnson City",
                    ShippingCountry: "US",
                    ShippingState: "TN",
                    ShippingZip: "37612",
                },
                EndDate: "2026-03-20T00:00:00Z",
                EntrypageId: 0,
                ExternalPaypointID: "f743aed24a-10",
                FeeAmount: 0,
                Frequency: "monthly",
                IdSub: 580,
                InvoiceData: {
                    AdditionalData: "AdditionalData",
                    frequency: "one-time",
                    invoiceAmount: 100,
                    invoiceNumber: "QA-1702561870",
                    invoiceStatus: 1,
                    invoiceType: 1,
                    items: [
                        {
                            itemCost: 10,
                            itemDescription: "service",
                            itemMode: 1,
                            itemProductName: "Mat replacement",
                            itemQty: 5,
                            itemTotalAmount: 50,
                        },
                        {
                            itemCost: 5,
                            itemDescription: "service",
                            itemMode: 1,
                            itemProductName: "Mat clean",
                            itemQty: 10,
                            itemTotalAmount: 50,
                        },
                    ],
                },
                LastRun: "2024-01-02T14:32:11Z",
                LastUpdated: "2023-12-14T08:51:10Z",
                LeftCycles: 20,
                Method: "card",
                NetAmount: 10,
                NextDate: "2024-07-20T00:00:00Z",
                ParentOrgName: "FitnessManager",
                PaymentData: {
                    AccountExp: "0924",
                    AccountType: "unknow",
                    AccountZip: "90210",
                    binData: {
                        binMatchedLength: "6",
                        binCardBrand: "Visa",
                        binCardType: "Credit",
                        binCardCategory: "PLATINUM",
                        binCardIssuer: "Bank of Example",
                        binCardIssuerCountry: "United States",
                        binCardIssuerCountryCodeA2: "US",
                        binCardIssuerCountryNumber: "840",
                        binCardIsRegulated: "false",
                        binCardUseCategory: "Consumer",
                        binCardIssuerCountryCodeA3: "USA",
                    },
                    HolderName: "Mr. Michael Abernathy",
                    Initiator: "payor",
                    MaskedAccount: "2222 4XXXXXX0010",
                    paymentDetails: {
                        currency: "USD",
                        serviceFee: 0,
                        totalAmount: 100,
                    },
                    Sequence: "subsequent",
                    StoredMethodUsageType: "subscription",
                },
                PaypointDbaname: "Athlete Factory LLC",
                PaypointEntryname: "473ac58b0",
                PaypointId: 10,
                PaypointLegalname: "Athlete Factory LLC",
                PlanId: 1,
                StartDate: "2024-07-20T00:00:00Z",
                SubEvents: [
                    {
                        description: "created",
                        eventTime: "2023-12-14T13:51:10Z",
                        refData: "00-3470dfe2658b492811630255602f3fb5-d06fe0f72110000-00",
                    },
                    {
                        description: "updated",
                        eventTime: "2023-12-15T10:30:00Z",
                        refData: "01-1234abcde6789fghij4567klmnopqr89-abcdefghi12345678-01",
                        source: "web app",
                    },
                ],
                SubStatus: 1,
                TotalAmount: 100,
                TotalCycles: 20,
                UntilCancelled: false,
            },
            Summary: {
                pageIdentifier: "XXXXXXXXXXXXXXXXXXX",
                pageSize: 20,
                totalAmount: 150.22,
                totalNetAmount: 150.22,
                totalPages: 1,
                totalRecords: 2,
            },
        });
    });

    test("ListSubscriptionsOrg (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/subscriptions/org/1")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listSubscriptionsOrg(1);
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("ListSubscriptionsOrg (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/subscriptions/org/1")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listSubscriptionsOrg(1);
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("ListSubscriptionsOrg (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/subscriptions/org/1")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listSubscriptionsOrg(1);
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("ListSubscriptionsOrg (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: "responseText" };
        server
            .mockEndpoint()
            .get("/Query/subscriptions/org/1")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listSubscriptionsOrg(1);
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: "responseText",
            }),
        );
    });

    test("ListTransactions (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            Records: [
                {
                    BatchAmount: 30.22,
                    BatchNumber: "1234567",
                    CfeeTransactions: [
                        {
                            cFeeTransid: "string",
                            feeAmount: 0,
                            operation: "string",
                            refundId: 0,
                            settlementStatus: 0,
                            transactionTime: "2019-08-24T14:15:22Z",
                            transStatus: 0,
                        },
                    ],
                    ConnectorName: "gp",
                    Customer: {
                        AdditionalData: "AdditionalData",
                        BillingAddress1: "1111 street",
                        BillingAddress2: "string",
                        BillingCity: "myCity",
                        BillingCountry: "US",
                        BillingEmail: "customer@mail.com",
                        BillingPhone: "1234567890",
                        BillingState: "CA",
                        BillingZip: "45567",
                        CompanyName: "Sunshine LLC",
                        customerId: 34,
                        CustomerNumber: "3456-7645A",
                        FirstName: "John",
                        LastName: "Doe",
                        ShippingAddress1: "string",
                        ShippingAddress2: "string",
                        ShippingCity: "string",
                        ShippingCountry: "string",
                        ShippingState: "string",
                        ShippingZip: "string",
                    },
                    DeviceId: "6c361c7d-674c-44cc-b790-382b75d1xxx",
                    EntrypageId: 0,
                    ExternalProcessorInformation: " ",
                    FeeAmount: 10.25,
                    GatewayTransId: "string",
                    InvoiceData: {
                        attachments: [
                            {
                                fContent: "TXkgdGVzdCBmaWxlHJ==...",
                                filename: "my-doc.pdf",
                                ftype: "pdf",
                                furl: "https://mysite.com/my-doc.pdf",
                            },
                        ],
                        company: "string",
                        discount: 0,
                        dutyAmount: 0,
                        firstName: "string",
                        freightAmount: 10,
                        frequency: "one-time",
                        invoiceAmount: 105,
                        invoiceDate: "2026-01-01",
                        invoiceDueDate: "2026-01-15",
                        invoiceEndDate: "2026-01-15",
                        invoiceNumber: "INV-2345",
                        invoiceStatus: 0,
                        invoiceType: 0,
                        items: [
                            {
                                itemCategories: ["string"],
                                itemCommodityCode: "string",
                                itemCost: 1,
                                itemDescription: "string",
                                itemMode: 0,
                                itemProductCode: "string",
                                itemProductName: "product 01",
                                itemQty: 1,
                                itemTaxAmount: 0,
                                itemTaxRate: 0,
                                itemTotalAmount: 0,
                                itemUnitOfMeasure: "U",
                            },
                        ],
                        lastName: "string",
                        notes: "string",
                        paymentTerms: "PIA",
                        purchaseOrder: "string",
                        shippingAddress1: "string",
                        shippingAddress2: "string",
                        shippingCity: "string",
                        shippingCountry: "string",
                        shippingEmail: "string",
                        shippingFromZip: "string",
                        shippingPhone: "string",
                        shippingState: "string",
                        shippingZip: "string",
                        summaryCommodityCode: "string",
                        tax: 2.05,
                        termsConditions: "string",
                    },
                    Method: "card",
                    NetAmount: 100,
                    Operation: "Sale",
                    OrderId: "9876543",
                    OrgId: 2,
                    ParentOrgName: "Payabli",
                    PaymentData: {
                        AccountExp: "0426",
                        AccountType: "visa",
                        binData: {
                            binMatchedLength: "6",
                            binCardBrand: "VISA",
                            binCardType: "DEBIT",
                            binCardCategory: "CLASSIC",
                            binCardIssuer: "CONOTOXIA SP. Z O.O",
                            binCardIssuerCountry: "POLAND",
                            binCardIssuerCountryCodeA2: "PL",
                            binCardIssuerCountryNumber: "616",
                            binCardIsRegulated: "true",
                            binCardUseCategory: "Consumer",
                            binCardIssuerCountryCodeA3: "POL",
                        },
                        HolderName: "Billy J Franks",
                        Initiator: "payor",
                        MaskedAccount: "411111XXXXXX1111",
                        paymentDetails: { totalAmount: 100 },
                        Sequence: "first",
                        StoredId: "675b43c1-9867-463c-8dc7-3d6ddb68554b-12812",
                        StoredMethodUsageType: "unscheduled",
                    },
                    PaymentTransId: "2345667-ddd-fff",
                    PayorId: 55,
                    PaypointDbaname: "Sunshine LLC",
                    PaypointEntryname: "7acda8200",
                    PaypointId: 2,
                    PaypointLegalname: "Sunshine LLC",
                    PendingFeeAmount: 2,
                    RefundId: 0,
                    ResponseData: {
                        authcode: "00",
                        response_code: "100",
                        response_code_text: "Transaction was approved.",
                        responsetext: "CAPTURED",
                        transactionid: "TRN_xwCAjQorWAYX1nAhAoHZVfN8iYHbI0",
                    },
                    ReturnedId: 0,
                    ScheduleReference: 0,
                    SettlementStatus: 0,
                    Source: "vterminal",
                    splitFundingInstructions: [{}],
                    TotalAmount: 110.25,
                    TransactionEvents: [{}],
                    TransactionTime: "2019-08-24T14:15:22Z",
                    TransStatus: 1,
                },
            ],
            Summary: {
                pageIdentifier: "XXXXXXXXXXXXXXXXXXX",
                pageSize: 20,
                totalAmount: 177.22,
                totalNetAmount: 177.22,
                totalPages: 1,
                totalRecords: 2,
            },
        };
        server
            .mockEndpoint()
            .get("/Query/transactions/8cfec329267")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.query.listTransactions("8cfec329267", {
            fromRecord: 251,
            limitRecord: 0,
            sortBy: "desc(field_name)",
        });
        expect(response).toEqual({
            Records: [
                {
                    BatchAmount: 30.22,
                    BatchNumber: "1234567",
                    CfeeTransactions: [
                        {
                            cFeeTransid: "string",
                            feeAmount: 0,
                            operation: "string",
                            refundId: 0,
                            settlementStatus: 0,
                            transactionTime: "2019-08-24T14:15:22Z",
                            transStatus: 0,
                        },
                    ],
                    ConnectorName: "gp",
                    Customer: {
                        AdditionalData: "AdditionalData",
                        BillingAddress1: "1111 street",
                        BillingAddress2: "string",
                        BillingCity: "myCity",
                        BillingCountry: "US",
                        BillingEmail: "customer@mail.com",
                        BillingPhone: "1234567890",
                        BillingState: "CA",
                        BillingZip: "45567",
                        CompanyName: "Sunshine LLC",
                        customerId: 34,
                        CustomerNumber: "3456-7645A",
                        FirstName: "John",
                        LastName: "Doe",
                        ShippingAddress1: "string",
                        ShippingAddress2: "string",
                        ShippingCity: "string",
                        ShippingCountry: "string",
                        ShippingState: "string",
                        ShippingZip: "string",
                    },
                    DeviceId: "6c361c7d-674c-44cc-b790-382b75d1xxx",
                    EntrypageId: 0,
                    ExternalProcessorInformation: " ",
                    FeeAmount: 10.25,
                    GatewayTransId: "string",
                    InvoiceData: {
                        attachments: [
                            {
                                fContent: "TXkgdGVzdCBmaWxlHJ==...",
                                filename: "my-doc.pdf",
                                ftype: "pdf",
                                furl: "https://mysite.com/my-doc.pdf",
                            },
                        ],
                        company: "string",
                        discount: 0,
                        dutyAmount: 0,
                        firstName: "string",
                        freightAmount: 10,
                        frequency: "one-time",
                        invoiceAmount: 105,
                        invoiceDate: "2026-01-01",
                        invoiceDueDate: "2026-01-15",
                        invoiceEndDate: "2026-01-15",
                        invoiceNumber: "INV-2345",
                        invoiceStatus: 0,
                        invoiceType: 0,
                        items: [
                            {
                                itemCategories: ["string"],
                                itemCommodityCode: "string",
                                itemCost: 1,
                                itemDescription: "string",
                                itemMode: 0,
                                itemProductCode: "string",
                                itemProductName: "product 01",
                                itemQty: 1,
                                itemTaxAmount: 0,
                                itemTaxRate: 0,
                                itemTotalAmount: 0,
                                itemUnitOfMeasure: "U",
                            },
                        ],
                        lastName: "string",
                        notes: "string",
                        paymentTerms: "PIA",
                        purchaseOrder: "string",
                        shippingAddress1: "string",
                        shippingAddress2: "string",
                        shippingCity: "string",
                        shippingCountry: "string",
                        shippingEmail: "string",
                        shippingFromZip: "string",
                        shippingPhone: "string",
                        shippingState: "string",
                        shippingZip: "string",
                        summaryCommodityCode: "string",
                        tax: 2.05,
                        termsConditions: "string",
                    },
                    Method: "card",
                    NetAmount: 100,
                    Operation: "Sale",
                    OrderId: "9876543",
                    OrgId: 2,
                    ParentOrgName: "Payabli",
                    PaymentData: {
                        AccountExp: "0426",
                        AccountType: "visa",
                        binData: {
                            binMatchedLength: "6",
                            binCardBrand: "VISA",
                            binCardType: "DEBIT",
                            binCardCategory: "CLASSIC",
                            binCardIssuer: "CONOTOXIA SP. Z O.O",
                            binCardIssuerCountry: "POLAND",
                            binCardIssuerCountryCodeA2: "PL",
                            binCardIssuerCountryNumber: "616",
                            binCardIsRegulated: "true",
                            binCardUseCategory: "Consumer",
                            binCardIssuerCountryCodeA3: "POL",
                        },
                        HolderName: "Billy J Franks",
                        Initiator: "payor",
                        MaskedAccount: "411111XXXXXX1111",
                        paymentDetails: {
                            totalAmount: 100,
                        },
                        Sequence: "first",
                        StoredId: "675b43c1-9867-463c-8dc7-3d6ddb68554b-12812",
                        StoredMethodUsageType: "unscheduled",
                    },
                    PaymentTransId: "2345667-ddd-fff",
                    PayorId: 55,
                    PaypointDbaname: "Sunshine LLC",
                    PaypointEntryname: "7acda8200",
                    PaypointId: 2,
                    PaypointLegalname: "Sunshine LLC",
                    PendingFeeAmount: 2,
                    RefundId: 0,
                    ResponseData: {
                        authcode: "00",
                        response_code: "100",
                        response_code_text: "Transaction was approved.",
                        responsetext: "CAPTURED",
                        transactionid: "TRN_xwCAjQorWAYX1nAhAoHZVfN8iYHbI0",
                    },
                    ReturnedId: 0,
                    ScheduleReference: 0,
                    SettlementStatus: 0,
                    Source: "vterminal",
                    splitFundingInstructions: [{}],
                    TotalAmount: 110.25,
                    TransactionEvents: [{}],
                    TransactionTime: "2019-08-24T14:15:22Z",
                    TransStatus: 1,
                },
            ],
            Summary: {
                pageIdentifier: "XXXXXXXXXXXXXXXXXXX",
                pageSize: 20,
                totalAmount: 177.22,
                totalNetAmount: 177.22,
                totalPages: 1,
                totalRecords: 2,
            },
        });
    });

    test("ListTransactions (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/transactions/entry")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listTransactions("entry");
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("ListTransactions (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/transactions/entry")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listTransactions("entry");
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("ListTransactions (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/transactions/entry")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listTransactions("entry");
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("ListTransactions (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: "responseText" };
        server
            .mockEndpoint()
            .get("/Query/transactions/entry")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listTransactions("entry");
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: "responseText",
            }),
        );
    });

    test("ListTransactionsOrg (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            Records: [
                {
                    AchHolderType: "personal",
                    AchSecCode: "AchSecCode",
                    BatchAmount: 30.22,
                    BatchNumber: "batch_226_ach_12-30-2023",
                    CfeeTransactions: [{ transactionTime: "2024-01-15T09:30:00Z" }],
                    ConnectorName: "gp",
                    DeviceId: "6c361c7d-674c-44cc-b790-382b75d1xxx",
                    EntrypageId: 0,
                    ExternalProcessorInformation: "[MER_xxxxxxxxxxxxxx]/[NNNNNNNNN]",
                    FeeAmount: 1,
                    GatewayTransId: "TRN_xwCAjQorWAYX1nAhAoHZVfN8iYHbI0",
                    Method: "ach",
                    NetAmount: 3762.87,
                    Operation: "Sale",
                    OrderId: "O-5140",
                    OrgId: 123,
                    ParentOrgName: "PropertyManager Pro",
                    PaymentData: { paymentDetails: { totalAmount: 100 } },
                    PaymentTransId: "226-fe55ec0348e34702bd91b4be198ce7ec",
                    PayorId: 1551,
                    PaypointDbaname: "Sunshine Gutters",
                    PaypointEntryname: "d193cf9a46",
                    PaypointId: 226,
                    PaypointLegalname: "Sunshine Services, LLC",
                    PendingFeeAmount: 2,
                    RefundId: 0,
                    ResponseData: {
                        response_code: "XXX",
                        response_code_text: "Transaction was approved.",
                        responsetext: "CAPTURED",
                    },
                    ReturnedId: 0,
                    ScheduleReference: 0,
                    SettlementStatus: 2,
                    Source: "api",
                    splitFundingInstructions: [{}],
                    TotalAmount: 30.22,
                    TransactionEvents: [{}],
                    TransactionTime: "2025-10-19T00:00:00Z",
                    TransAdditionalData: { key: "value" },
                    TransStatus: 1,
                },
            ],
            Summary: {
                pageIdentifier: "null",
                pageSize: 20,
                totalAmount: 77.22,
                totalNetAmount: 77.22,
                totalPages: 2,
                totalRecords: 2,
            },
        };
        server
            .mockEndpoint()
            .get("/Query/transactions/org/123")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.query.listTransactionsOrg(123, {
            fromRecord: 251,
            limitRecord: 0,
            sortBy: "desc(field_name)",
        });
        expect(response).toEqual({
            Records: [
                {
                    AchHolderType: "personal",
                    AchSecCode: "AchSecCode",
                    BatchAmount: 30.22,
                    BatchNumber: "batch_226_ach_12-30-2023",
                    CfeeTransactions: [
                        {
                            transactionTime: "2024-01-15T09:30:00Z",
                        },
                    ],
                    ConnectorName: "gp",
                    DeviceId: "6c361c7d-674c-44cc-b790-382b75d1xxx",
                    EntrypageId: 0,
                    ExternalProcessorInformation: "[MER_xxxxxxxxxxxxxx]/[NNNNNNNNN]",
                    FeeAmount: 1,
                    GatewayTransId: "TRN_xwCAjQorWAYX1nAhAoHZVfN8iYHbI0",
                    Method: "ach",
                    NetAmount: 3762.87,
                    Operation: "Sale",
                    OrderId: "O-5140",
                    OrgId: 123,
                    ParentOrgName: "PropertyManager Pro",
                    PaymentData: {
                        paymentDetails: {
                            totalAmount: 100,
                        },
                    },
                    PaymentTransId: "226-fe55ec0348e34702bd91b4be198ce7ec",
                    PayorId: 1551,
                    PaypointDbaname: "Sunshine Gutters",
                    PaypointEntryname: "d193cf9a46",
                    PaypointId: 226,
                    PaypointLegalname: "Sunshine Services, LLC",
                    PendingFeeAmount: 2,
                    RefundId: 0,
                    ResponseData: {
                        response_code: "XXX",
                        response_code_text: "Transaction was approved.",
                        responsetext: "CAPTURED",
                    },
                    ReturnedId: 0,
                    ScheduleReference: 0,
                    SettlementStatus: 2,
                    Source: "api",
                    splitFundingInstructions: [{}],
                    TotalAmount: 30.22,
                    TransactionEvents: [{}],
                    TransactionTime: "2025-10-19T00:00:00Z",
                    TransAdditionalData: {
                        key: "value",
                    },
                    TransStatus: 1,
                },
            ],
            Summary: {
                pageIdentifier: "null",
                pageSize: 20,
                totalAmount: 77.22,
                totalNetAmount: 77.22,
                totalPages: 2,
                totalRecords: 2,
            },
        });
    });

    test("ListTransactionsOrg (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/transactions/org/1")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listTransactionsOrg(1);
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("ListTransactionsOrg (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/transactions/org/1")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listTransactionsOrg(1);
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("ListTransactionsOrg (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/transactions/org/1")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listTransactionsOrg(1);
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("ListTransactionsOrg (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: "responseText" };
        server
            .mockEndpoint()
            .get("/Query/transactions/org/1")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listTransactionsOrg(1);
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: "responseText",
            }),
        );
    });

    test("ListTransferDetails (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            Summary: {
                achReturns: -50,
                adjustments: 10,
                billingFees: 25,
                chargebacks: 0,
                grossTransferAmount: 1000,
                releaseAmount: 0,
                thirdPartyPaid: 0,
                totalNetAmountTransfer: 935,
                serviceFees: 30,
                transferAmount: 935,
                refunds: -20,
                heldAmount: 0,
                totalRecords: 1,
                totalAmount: 1000,
                totalNetAmount: 935,
                netBatchAmount: 935,
                totalPages: 1,
                pageSize: 20,
                pageidentifier: "XYZ123ABC456",
            },
            Records: [
                {
                    transferDetailId: 654321,
                    transferId: 12345,
                    transactionId: "txn-4321hg6543fe",
                    type: "credit",
                    category: "sale",
                    grossAmount: 1000,
                    chargeBackAmount: 0,
                    returnedAmount: 0,
                    refundAmount: 20,
                    holdAmount: 0,
                    releasedAmount: 0,
                    billingFeesAmount: 25,
                    thirdPartyPaidAmount: 0,
                    adjustmentsAmount: 10,
                    netTransferAmount: 935,
                    splitFundingAmount: 0,
                    ParentOrgName: "GadgetPro",
                    PaypointDbaname: "Global Gadgets",
                    PaypointLegalname: "Global Gadgets, LLC",
                    PaypointEntryname: "48ae10920",
                    PaymentTransId: "txn-4321hg6543fe",
                    ConnectorName: "gp",
                    GatewayTransId: "TRN_K6Nz3JxrNKkaPTF4ExCqfO4UwMW4CM",
                    OrderId: "order789",
                    Method: "ach",
                    BatchNumber: "batch_226_ach_12-30-2023",
                    BatchAmount: 30.22,
                    PayorId: 1551,
                    PaymentData: {
                        MaskedAccount: "411812XXXXXX2357",
                        AccountType: "visa",
                        AccountExp: "08/28",
                        HolderName: "Ara Karapetyan",
                        orderDescription: "Electronics Purchase",
                        StoredId: undefined,
                        Initiator: undefined,
                        StoredMethodUsageType: undefined,
                        Sequence: undefined,
                        accountId: undefined,
                        SignatureData: undefined,
                        binData: {
                            binMatchedLength: "6",
                            binCardBrand: "Visa",
                            binCardType: "Credit",
                            binCardCategory: "PLATINUM",
                            binCardIssuer: "Bank of Example",
                            binCardIssuerCountry: "United States",
                            binCardIssuerCountryCodeA2: "US",
                            binCardIssuerCountryNumber: "840",
                            binCardIsRegulated: "false",
                            binCardUseCategory: "Consumer",
                            binCardIssuerCountryCodeA3: "USA",
                        },
                        paymentDetails: undefined,
                    },
                    TransStatus: 1,
                    TotalAmount: 1000,
                    NetAmount: 935,
                    FeeAmount: 1,
                    SettlementStatus: 2,
                    Operation: "Sale",
                    ResponseData: {
                        response: "Approved",
                        responsetext: "Transaction successful",
                        authcode: "123456",
                        transactionid: "TRN_K6Nz3JxrNKkaPTF4ExCqfO4OOOOOX",
                        response_code: "100",
                        response_code_text: "Operation successful.",
                    },
                    Source: "web",
                    ScheduleReference: 0,
                    OrgId: 9876,
                    RefundId: 0,
                    ReturnedId: 0,
                    TransactionTime: "2024-01-05T12:15:30.11",
                    Customer: {
                        Identifiers: ["customerId", "email"],
                        FirstName: "Ara",
                        LastName: "Karapetyan",
                        CompanyName: "Ara's Electronics",
                        BillingAddress1: "7890 Tech Park Drive",
                        BillingCity: "Baltimore",
                        BillingState: "MD",
                        BillingZip: "21230",
                        BillingCountry: "US",
                        BillingEmail: "ara.karapetyan@electronics.com",
                        CustomerNumber: "0010",
                        customerId: 7890,
                    },
                    transactionNumber: null,
                    billingFeesDetails: [],
                    ExternalProcessorInformation: null,
                    PaypointId: 1357,
                    ChargebackId: null,
                    RetrievalId: null,
                    TransAdditionalData: null,
                    invoiceData: null,
                    EntrypageId: null,
                    externalPaypointID: null,
                    IsValidatedACH: true,
                    splitFundingInstructions: [],
                    CfeeTransactions: [],
                    TransactionEvents: [],
                    PendingFeeAmount: 0,
                    RiskFlagged: false,
                    RiskFlaggedOn: null,
                    RiskStatus: "approved",
                    RiskReason: null,
                    RiskAction: null,
                    RiskActionCode: null,
                    DeviceId: null,
                    AchSecCode: "PPD",
                    AchHolderType: "personal",
                    IpAddress: "192.100.1.100",
                    IsSameDayACH: false,
                    WalletType: null,
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/Query/transferDetails/47862acd/123456")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.query.listTransferDetails("47862acd", 123456);
        expect(response).toEqual({
            Summary: {
                achReturns: -50,
                adjustments: 10,
                billingFees: 25,
                chargebacks: 0,
                grossTransferAmount: 1000,
                releaseAmount: 0,
                thirdPartyPaid: 0,
                totalNetAmountTransfer: 935,
                serviceFees: 30,
                transferAmount: 935,
                refunds: -20,
                heldAmount: 0,
                totalRecords: 1,
                totalAmount: 1000,
                totalNetAmount: 935,
                netBatchAmount: 935,
                totalPages: 1,
                pageSize: 20,
                pageidentifier: "XYZ123ABC456",
            },
            Records: [
                {
                    transferDetailId: 654321,
                    transferId: 12345,
                    transactionId: "txn-4321hg6543fe",
                    type: "credit",
                    category: "sale",
                    grossAmount: 1000,
                    chargeBackAmount: 0,
                    returnedAmount: 0,
                    refundAmount: 20,
                    holdAmount: 0,
                    releasedAmount: 0,
                    billingFeesAmount: 25,
                    thirdPartyPaidAmount: 0,
                    adjustmentsAmount: 10,
                    netTransferAmount: 935,
                    splitFundingAmount: 0,
                    ParentOrgName: "GadgetPro",
                    PaypointDbaname: "Global Gadgets",
                    PaypointLegalname: "Global Gadgets, LLC",
                    PaypointEntryname: "48ae10920",
                    PaymentTransId: "txn-4321hg6543fe",
                    ConnectorName: "gp",
                    GatewayTransId: "TRN_K6Nz3JxrNKkaPTF4ExCqfO4UwMW4CM",
                    OrderId: "order789",
                    Method: "ach",
                    BatchNumber: "batch_226_ach_12-30-2023",
                    BatchAmount: 30.22,
                    PayorId: 1551,
                    PaymentData: {
                        MaskedAccount: "411812XXXXXX2357",
                        AccountType: "visa",
                        AccountExp: "08/28",
                        HolderName: "Ara Karapetyan",
                        orderDescription: "Electronics Purchase",
                        StoredId: undefined,
                        Initiator: undefined,
                        StoredMethodUsageType: undefined,
                        Sequence: undefined,
                        accountId: undefined,
                        SignatureData: undefined,
                        binData: {
                            binMatchedLength: "6",
                            binCardBrand: "Visa",
                            binCardType: "Credit",
                            binCardCategory: "PLATINUM",
                            binCardIssuer: "Bank of Example",
                            binCardIssuerCountry: "United States",
                            binCardIssuerCountryCodeA2: "US",
                            binCardIssuerCountryNumber: "840",
                            binCardIsRegulated: "false",
                            binCardUseCategory: "Consumer",
                            binCardIssuerCountryCodeA3: "USA",
                        },
                        paymentDetails: undefined,
                    },
                    TransStatus: 1,
                    TotalAmount: 1000,
                    NetAmount: 935,
                    FeeAmount: 1,
                    SettlementStatus: 2,
                    Operation: "Sale",
                    ResponseData: {
                        response: "Approved",
                        responsetext: "Transaction successful",
                        authcode: "123456",
                        transactionid: "TRN_K6Nz3JxrNKkaPTF4ExCqfO4OOOOOX",
                        response_code: "100",
                        response_code_text: "Operation successful.",
                    },
                    Source: "web",
                    ScheduleReference: 0,
                    OrgId: 9876,
                    RefundId: 0,
                    ReturnedId: 0,
                    TransactionTime: "2024-01-05T12:15:30.11",
                    Customer: {
                        Identifiers: ["customerId", "email"],
                        FirstName: "Ara",
                        LastName: "Karapetyan",
                        CompanyName: "Ara's Electronics",
                        BillingAddress1: "7890 Tech Park Drive",
                        BillingCity: "Baltimore",
                        BillingState: "MD",
                        BillingZip: "21230",
                        BillingCountry: "US",
                        BillingEmail: "ara.karapetyan@electronics.com",
                        CustomerNumber: "0010",
                        customerId: 7890,
                    },
                    transactionNumber: null,
                    billingFeesDetails: [],
                    ExternalProcessorInformation: null,
                    PaypointId: 1357,
                    ChargebackId: null,
                    RetrievalId: null,
                    TransAdditionalData: null,
                    invoiceData: null,
                    EntrypageId: null,
                    externalPaypointID: null,
                    IsValidatedACH: true,
                    splitFundingInstructions: [],
                    CfeeTransactions: [],
                    TransactionEvents: [],
                    PendingFeeAmount: 0,
                    RiskFlagged: false,
                    RiskFlaggedOn: null,
                    RiskStatus: "approved",
                    RiskReason: null,
                    RiskAction: null,
                    RiskActionCode: null,
                    DeviceId: null,
                    AchSecCode: "PPD",
                    AchHolderType: "personal",
                    IpAddress: "192.100.1.100",
                    IsSameDayACH: false,
                    WalletType: null,
                },
            ],
        });
    });

    test("ListTransferDetails (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/transferDetails/entry/1")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listTransferDetails("entry", 1);
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("ListTransferDetails (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/transferDetails/entry/1")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listTransferDetails("entry", 1);
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("ListTransferDetails (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/transferDetails/entry/1")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listTransferDetails("entry", 1);
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("ListTransferDetails (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: "responseText" };
        server
            .mockEndpoint()
            .get("/Query/transferDetails/entry/1")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listTransferDetails("entry", 1);
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: "responseText",
            }),
        );
    });

    test("ListTransfers (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            Records: [
                {
                    transferId: 79851,
                    paypointId: 705,
                    batchNumber: "split_705_gp_11-16-2024",
                    batchCurrency: "USD",
                    batchRecords: 1,
                    transferIdentifier: "bbcbfed7-e535-45fe-8d62-000000",
                    batchId: 111430,
                    paypointEntryName: "47ae3de37",
                    paypointLegalName: "Gruzya Outdoor Outfitters LLC",
                    paypointDbaName: "Gruzya Outdoor Outfitters",
                    paypointLogo: "https://example.com/logo.png",
                    parentOrgName: "Pilgrim Planner",
                    parentOrgId: 12345,
                    parentOrgEntryName: "43aebc000",
                    parentOrgLogo: "https://example.com/parent-logo.png",
                    externalPaypointID: "ext-12345",
                    bankAccount: { accountNumber: "****1234", routingNumber: "123456789" },
                    transferDate: "2024-11-17T08:20:07.288+00:00",
                    processor: "gp",
                    transferStatus: 2,
                    grossAmount: 1029,
                    chargeBackAmount: 25,
                    returnedAmount: 0,
                    holdAmount: 0,
                    releasedAmount: 0,
                    billingFeesAmount: 0,
                    thirdPartyPaidAmount: 0,
                    adjustmentsAmount: 0,
                    netTransferAmount: 1004,
                    eventsData: [
                        {
                            description: "Transfer Created",
                            eventTime: "2024-11-16T08:15:33.4364067Z",
                            refData: undefined,
                            extraData: undefined,
                            source: "worker",
                        },
                    ],
                    messages: [],
                },
            ],
            Summary: { totalPages: 1, totalRecords: 2, pageSize: 20 },
        };
        server
            .mockEndpoint()
            .get("/Query/transfers/47862acd")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.query.listTransfers("47862acd", {
            fromRecord: 0,
            limitRecord: 20,
        });
        expect(response).toEqual({
            Records: [
                {
                    transferId: 79851,
                    paypointId: 705,
                    batchNumber: "split_705_gp_11-16-2024",
                    batchCurrency: "USD",
                    batchRecords: 1,
                    transferIdentifier: "bbcbfed7-e535-45fe-8d62-000000",
                    batchId: 111430,
                    paypointEntryName: "47ae3de37",
                    paypointLegalName: "Gruzya Outdoor Outfitters LLC",
                    paypointDbaName: "Gruzya Outdoor Outfitters",
                    paypointLogo: "https://example.com/logo.png",
                    parentOrgName: "Pilgrim Planner",
                    parentOrgId: 12345,
                    parentOrgEntryName: "43aebc000",
                    parentOrgLogo: "https://example.com/parent-logo.png",
                    externalPaypointID: "ext-12345",
                    bankAccount: {
                        accountNumber: "****1234",
                        routingNumber: "123456789",
                    },
                    transferDate: "2024-11-17T08:20:07.288+00:00",
                    processor: "gp",
                    transferStatus: 2,
                    grossAmount: 1029,
                    chargeBackAmount: 25,
                    returnedAmount: 0,
                    holdAmount: 0,
                    releasedAmount: 0,
                    billingFeesAmount: 0,
                    thirdPartyPaidAmount: 0,
                    adjustmentsAmount: 0,
                    netTransferAmount: 1004,
                    eventsData: [
                        {
                            description: "Transfer Created",
                            eventTime: "2024-11-16T08:15:33.4364067Z",
                            refData: undefined,
                            extraData: undefined,
                            source: "worker",
                        },
                    ],
                    messages: [],
                },
            ],
            Summary: {
                totalPages: 1,
                totalRecords: 2,
                pageSize: 20,
            },
        });
    });

    test("ListTransfers (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/transfers/entry")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listTransfers("entry");
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("ListTransfers (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/transfers/entry")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listTransfers("entry");
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("ListTransfers (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/transfers/entry")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listTransfers("entry");
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("ListTransfers (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: "responseText" };
        server
            .mockEndpoint()
            .get("/Query/transfers/entry")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listTransfers("entry");
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: "responseText",
            }),
        );
    });

    test("ListTransfersOrg (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            Records: [
                {
                    transferId: 79851,
                    paypointId: 705,
                    batchNumber: "split_705_gp_11-16-2024",
                    batchCurrency: "USD",
                    batchRecords: 1,
                    transferIdentifier: "bbcbfed7-e535-45fe-8d62-000000",
                    batchId: 111430,
                    paypointEntryName: "47ae3de37",
                    paypointLegalName: "Gruzya Outdoor Outfitters LLC",
                    paypointDbaName: "Gruzya Outdoor Outfitters",
                    paypointLogo: "https://example.com/logo.png",
                    parentOrgName: "Pilgrim Planner",
                    parentOrgId: 12345,
                    parentOrgEntryName: "43aebc000",
                    parentOrgLogo: "https://example.com/parent-logo.png",
                    externalPaypointID: "ext-12345",
                    bankAccount: { accountNumber: "****1234", routingNumber: "123456789" },
                    transferDate: "2024-11-17T08:20:07.288+00:00",
                    processor: "gp",
                    transferStatus: 2,
                    grossAmount: 1029,
                    chargeBackAmount: 25,
                    returnedAmount: 0,
                    holdAmount: 0,
                    releasedAmount: 0,
                    billingFeesAmount: 0,
                    thirdPartyPaidAmount: 0,
                    adjustmentsAmount: 0,
                    netTransferAmount: 1004,
                    eventsData: [
                        {
                            description: "Transfer Created",
                            eventTime: "2024-11-16T08:15:33.4364067Z",
                            refData: undefined,
                            extraData: undefined,
                            source: "worker",
                        },
                    ],
                    messages: [],
                },
            ],
            Summary: { totalPages: 1, totalRecords: 2, pageSize: 20 },
        };
        server
            .mockEndpoint()
            .get("/Query/transfers/org/123")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.query.listTransfersOrg({
            orgId: 123,
            fromRecord: 0,
            limitRecord: 20,
        });
        expect(response).toEqual({
            Records: [
                {
                    transferId: 79851,
                    paypointId: 705,
                    batchNumber: "split_705_gp_11-16-2024",
                    batchCurrency: "USD",
                    batchRecords: 1,
                    transferIdentifier: "bbcbfed7-e535-45fe-8d62-000000",
                    batchId: 111430,
                    paypointEntryName: "47ae3de37",
                    paypointLegalName: "Gruzya Outdoor Outfitters LLC",
                    paypointDbaName: "Gruzya Outdoor Outfitters",
                    paypointLogo: "https://example.com/logo.png",
                    parentOrgName: "Pilgrim Planner",
                    parentOrgId: 12345,
                    parentOrgEntryName: "43aebc000",
                    parentOrgLogo: "https://example.com/parent-logo.png",
                    externalPaypointID: "ext-12345",
                    bankAccount: {
                        accountNumber: "****1234",
                        routingNumber: "123456789",
                    },
                    transferDate: "2024-11-17T08:20:07.288+00:00",
                    processor: "gp",
                    transferStatus: 2,
                    grossAmount: 1029,
                    chargeBackAmount: 25,
                    returnedAmount: 0,
                    holdAmount: 0,
                    releasedAmount: 0,
                    billingFeesAmount: 0,
                    thirdPartyPaidAmount: 0,
                    adjustmentsAmount: 0,
                    netTransferAmount: 1004,
                    eventsData: [
                        {
                            description: "Transfer Created",
                            eventTime: "2024-11-16T08:15:33.4364067Z",
                            refData: undefined,
                            extraData: undefined,
                            source: "worker",
                        },
                    ],
                    messages: [],
                },
            ],
            Summary: {
                totalPages: 1,
                totalRecords: 2,
                pageSize: 20,
            },
        });
    });

    test("ListTransfersOrg (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/transfers/org/1000000")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listTransfersOrg({
                orgId: 1000000,
            });
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("ListTransfersOrg (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/transfers/org/1000000")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listTransfersOrg({
                orgId: 1000000,
            });
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("ListTransfersOrg (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/transfers/org/1000000")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listTransfersOrg({
                orgId: 1000000,
            });
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("ListTransfersOrg (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: "responseText" };
        server
            .mockEndpoint()
            .get("/Query/transfers/org/1000000")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listTransfersOrg({
                orgId: 1000000,
            });
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: "responseText",
            }),
        );
    });

    test("ListUsersOrg (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            Records: [
                {
                    Access: [{ roleValue: true }],
                    AdditionalData: "AdditionalData",
                    createdAt: "2022-07-01T15:00:01Z",
                    Email: "example@email.com",
                    language: "en",
                    lastAccess: "2022-07-01T15:00:01Z",
                    Name: "Sean Smith",
                    Phone: "5555555555",
                    Scope: [{ orgType: 0 }],
                    snData: "snData",
                    snIdentifier: "snIdentifier",
                    snProvider: "google",
                    timeZone: -5,
                    userId: 1000000,
                    UsrMFA: false,
                    UsrMFAMode: 0,
                    UsrStatus: 1,
                },
            ],
            Summary: {
                pageIdentifier: "null",
                pageSize: 20,
                totalAmount: 77.22,
                totalNetAmount: 77.22,
                totalPages: 2,
                totalRecords: 2,
            },
        };
        server
            .mockEndpoint()
            .get("/Query/users/org/123")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.query.listUsersOrg(123, {
            fromRecord: 251,
            limitRecord: 0,
            sortBy: "desc(field_name)",
        });
        expect(response).toEqual({
            Records: [
                {
                    Access: [
                        {
                            roleValue: true,
                        },
                    ],
                    AdditionalData: "AdditionalData",
                    createdAt: "2022-07-01T15:00:01Z",
                    Email: "example@email.com",
                    language: "en",
                    lastAccess: "2022-07-01T15:00:01Z",
                    Name: "Sean Smith",
                    Phone: "5555555555",
                    Scope: [
                        {
                            orgType: 0,
                        },
                    ],
                    snData: "snData",
                    snIdentifier: "snIdentifier",
                    snProvider: "google",
                    timeZone: -5,
                    userId: 1000000,
                    UsrMFA: false,
                    UsrMFAMode: 0,
                    UsrStatus: 1,
                },
            ],
            Summary: {
                pageIdentifier: "null",
                pageSize: 20,
                totalAmount: 77.22,
                totalNetAmount: 77.22,
                totalPages: 2,
                totalRecords: 2,
            },
        });
    });

    test("ListUsersOrg (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/Query/users/org/1").respondWith().statusCode(400).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.query.listUsersOrg(1);
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("ListUsersOrg (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/Query/users/org/1").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.query.listUsersOrg(1);
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("ListUsersOrg (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/Query/users/org/1").respondWith().statusCode(500).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.query.listUsersOrg(1);
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("ListUsersOrg (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: "responseText" };
        server.mockEndpoint().get("/Query/users/org/1").respondWith().statusCode(503).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.query.listUsersOrg(1);
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: "responseText",
            }),
        );
    });

    test("ListUsersPaypoint (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            Records: [
                {
                    Access: [{ roleValue: true }],
                    AdditionalData: "AdditionalData",
                    createdAt: "2022-07-01T15:00:01Z",
                    Email: "example@email.com",
                    language: "en",
                    lastAccess: "2022-07-01T15:00:01Z",
                    Name: "Sean Smith",
                    Phone: "5555555555",
                    Scope: [{ orgType: 0 }],
                    snData: "snData",
                    snIdentifier: "snIdentifier",
                    snProvider: "google",
                    timeZone: -5,
                    userId: 1000000,
                    UsrMFA: false,
                    UsrMFAMode: 0,
                    UsrStatus: 1,
                },
            ],
            Summary: {
                pageIdentifier: "null",
                pageSize: 20,
                totalAmount: 77.22,
                totalNetAmount: 77.22,
                totalPages: 2,
                totalRecords: 2,
            },
        };
        server
            .mockEndpoint()
            .get("/Query/users/point/8cfec329267")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.query.listUsersPaypoint("8cfec329267", {
            fromRecord: 251,
            limitRecord: 0,
            sortBy: "desc(field_name)",
        });
        expect(response).toEqual({
            Records: [
                {
                    Access: [
                        {
                            roleValue: true,
                        },
                    ],
                    AdditionalData: "AdditionalData",
                    createdAt: "2022-07-01T15:00:01Z",
                    Email: "example@email.com",
                    language: "en",
                    lastAccess: "2022-07-01T15:00:01Z",
                    Name: "Sean Smith",
                    Phone: "5555555555",
                    Scope: [
                        {
                            orgType: 0,
                        },
                    ],
                    snData: "snData",
                    snIdentifier: "snIdentifier",
                    snProvider: "google",
                    timeZone: -5,
                    userId: 1000000,
                    UsrMFA: false,
                    UsrMFAMode: 0,
                    UsrStatus: 1,
                },
            ],
            Summary: {
                pageIdentifier: "null",
                pageSize: 20,
                totalAmount: 77.22,
                totalNetAmount: 77.22,
                totalPages: 2,
                totalRecords: 2,
            },
        });
    });

    test("ListUsersPaypoint (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/users/point/entry")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listUsersPaypoint("entry");
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("ListUsersPaypoint (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/users/point/entry")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listUsersPaypoint("entry");
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("ListUsersPaypoint (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/users/point/entry")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listUsersPaypoint("entry");
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("ListUsersPaypoint (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: "responseText" };
        server
            .mockEndpoint()
            .get("/Query/users/point/entry")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listUsersPaypoint("entry");
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: "responseText",
            }),
        );
    });

    test("ListVendors (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            Records: [
                {
                    VendorNumber: "1234",
                    Name1: "Herman's Coatings",
                    Name2: "Herman's Coating Supply Company, LLC",
                    EIN: "123456789",
                    Phone: "212-555-1234",
                    Email: "example@email.com",
                    RemitEmail: undefined,
                    Address1: "123 Ocean Drive",
                    Address2: "Suite 400",
                    City: "Bristol",
                    State: "GA",
                    Zip: "31113",
                    Country: "US",
                    Mcc: "7777",
                    LocationCode: "LOC123",
                    Contacts: {
                        ContactEmail: "eric@martinezcoatings.com",
                        ContactName: "Eric Martinez",
                        ContactPhone: "5555555555",
                        ContactTitle: "Owner",
                    },
                    BillingData: {
                        id: 123456,
                        accountId: "bank-account-001",
                        nickname: "Main Checking Account",
                        bankName: "Example Bank",
                        routingAccount: "123456789",
                        accountNumber: "9876543210",
                        typeAccount: "Checking",
                        bankAccountHolderName: "John Doe",
                        bankAccountHolderType: "Business",
                        bankAccountFunction: 2,
                        verified: true,
                        status: 1,
                        services: [],
                        default: true,
                    },
                    PaymentMethod: undefined,
                    VendorStatus: 1,
                    VendorId: 1,
                    EnrollmentStatus: undefined,
                    Summary: {
                        ActiveBills: 2,
                        PendingBills: 4,
                        InTransitBills: 3,
                        PaidBills: 18,
                        OverdueBills: 1,
                        ApprovedBills: 5,
                        DisapprovedBills: 1,
                        TotalBills: 34,
                        ActiveBillsAmount: 1250.75,
                        PendingBillsAmount: 2890.5,
                        InTransitBillsAmount: 1675.25,
                        PaidBillsAmount: 15420.8,
                        OverdueBillsAmount: 425,
                        ApprovedBillsAmount: 3240.9,
                        DisapprovedBillsAmount: 180,
                        TotalBillsAmount: 25083.2,
                    },
                    PaypointLegalname: "Sunshine Services, LLC",
                    PaypointDbaname: "Sunshine Gutters",
                    PaypointEntryname: "d193cf9a46",
                    ParentOrgName: "PropertyManager Pro",
                    ParentOrgId: 1000,
                    CreatedDate: "2022-07-01T15:00:01Z",
                    LastUpdated: "2022-07-01T15:00:01Z",
                    remitAddress1: "123 Walnut Street",
                    remitAddress2: "Suite 900",
                    remitCity: "Miami",
                    remitState: "FL",
                    remitZip: "31113",
                    remitCountry: "US",
                    payeeName1: "payeeName1",
                    payeeName2: "payeeName2",
                    customField1: "",
                    customField2: "",
                    customerVendorAccount: "123-456",
                    InternalReferenceId: 1000000,
                    additionalData: undefined,
                    externalPaypointID: "Paypoint-100",
                    StoredMethods: [],
                },
            ],
            Summary: {
                pageIdentifier: "null",
                pageSize: 20,
                totalAmount: 200,
                totalNetAmount: 77.22,
                totalPages: 1,
                totalRecords: 1,
            },
        };
        server
            .mockEndpoint()
            .get("/Query/vendors/8cfec329267")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.query.listVendors("8cfec329267", {
            fromRecord: 251,
            limitRecord: 0,
            sortBy: "desc(field_name)",
        });
        expect(response).toEqual({
            Records: [
                {
                    VendorNumber: "1234",
                    Name1: "Herman's Coatings",
                    Name2: "Herman's Coating Supply Company, LLC",
                    EIN: "123456789",
                    Phone: "212-555-1234",
                    Email: "example@email.com",
                    RemitEmail: undefined,
                    Address1: "123 Ocean Drive",
                    Address2: "Suite 400",
                    City: "Bristol",
                    State: "GA",
                    Zip: "31113",
                    Country: "US",
                    Mcc: "7777",
                    LocationCode: "LOC123",
                    Contacts: {
                        ContactEmail: "eric@martinezcoatings.com",
                        ContactName: "Eric Martinez",
                        ContactPhone: "5555555555",
                        ContactTitle: "Owner",
                    },
                    BillingData: {
                        id: 123456,
                        accountId: "bank-account-001",
                        nickname: "Main Checking Account",
                        bankName: "Example Bank",
                        routingAccount: "123456789",
                        accountNumber: "9876543210",
                        typeAccount: "Checking",
                        bankAccountHolderName: "John Doe",
                        bankAccountHolderType: "Business",
                        bankAccountFunction: 2,
                        verified: true,
                        status: 1,
                        services: [],
                        default: true,
                    },
                    PaymentMethod: undefined,
                    VendorStatus: 1,
                    VendorId: 1,
                    EnrollmentStatus: undefined,
                    Summary: {
                        ActiveBills: 2,
                        PendingBills: 4,
                        InTransitBills: 3,
                        PaidBills: 18,
                        OverdueBills: 1,
                        ApprovedBills: 5,
                        DisapprovedBills: 1,
                        TotalBills: 34,
                        ActiveBillsAmount: 1250.75,
                        PendingBillsAmount: 2890.5,
                        InTransitBillsAmount: 1675.25,
                        PaidBillsAmount: 15420.8,
                        OverdueBillsAmount: 425,
                        ApprovedBillsAmount: 3240.9,
                        DisapprovedBillsAmount: 180,
                        TotalBillsAmount: 25083.2,
                    },
                    PaypointLegalname: "Sunshine Services, LLC",
                    PaypointDbaname: "Sunshine Gutters",
                    PaypointEntryname: "d193cf9a46",
                    ParentOrgName: "PropertyManager Pro",
                    ParentOrgId: 1000,
                    CreatedDate: "2022-07-01T15:00:01Z",
                    LastUpdated: "2022-07-01T15:00:01Z",
                    remitAddress1: "123 Walnut Street",
                    remitAddress2: "Suite 900",
                    remitCity: "Miami",
                    remitState: "FL",
                    remitZip: "31113",
                    remitCountry: "US",
                    payeeName1: "payeeName1",
                    payeeName2: "payeeName2",
                    customField1: "",
                    customField2: "",
                    customerVendorAccount: "123-456",
                    InternalReferenceId: 1000000,
                    additionalData: undefined,
                    externalPaypointID: "Paypoint-100",
                    StoredMethods: [],
                },
            ],
            Summary: {
                pageIdentifier: "null",
                pageSize: 20,
                totalAmount: 200,
                totalNetAmount: 77.22,
                totalPages: 1,
                totalRecords: 1,
            },
        });
    });

    test("ListVendors (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/vendors/entry")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listVendors("entry");
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("ListVendors (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/vendors/entry")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listVendors("entry");
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("ListVendors (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/vendors/entry")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listVendors("entry");
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("ListVendors (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: "responseText" };
        server
            .mockEndpoint()
            .get("/Query/vendors/entry")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listVendors("entry");
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: "responseText",
            }),
        );
    });

    test("ListVendorsOrg (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            Records: [
                {
                    VendorNumber: "1234",
                    Name1: "Herman's Coatings",
                    Name2: "Herman's Coating Supply Company, LLC",
                    EIN: "123456789",
                    Phone: "212-555-1234",
                    Email: "example@email.com",
                    RemitEmail: undefined,
                    Address1: "123 Ocean Drive",
                    Address2: "Suite 400",
                    City: "Bristol",
                    State: "GA",
                    Zip: "31113",
                    Country: "US",
                    Mcc: "7777",
                    LocationCode: "LOC123",
                    Contacts: {
                        ContactEmail: "eric@martinezcoatings.com",
                        ContactName: "Eric Martinez",
                        ContactPhone: "5555555555",
                        ContactTitle: "Owner",
                    },
                    BillingData: {
                        id: 123456,
                        accountId: "bank-account-001",
                        nickname: "Main Checking Account",
                        bankName: "Example Bank",
                        routingAccount: "123456789",
                        accountNumber: "9876543210",
                        typeAccount: "Checking",
                        bankAccountHolderName: "John Doe",
                        bankAccountHolderType: "Business",
                        bankAccountFunction: 2,
                        verified: true,
                        status: 1,
                        services: [],
                        default: true,
                    },
                    PaymentMethod: undefined,
                    VendorStatus: 1,
                    VendorId: 1,
                    EnrollmentStatus: undefined,
                    Summary: {
                        ActiveBills: 2,
                        PendingBills: 4,
                        InTransitBills: 3,
                        PaidBills: 18,
                        OverdueBills: 1,
                        ApprovedBills: 5,
                        DisapprovedBills: 1,
                        TotalBills: 34,
                        ActiveBillsAmount: 1250.75,
                        PendingBillsAmount: 2890.5,
                        InTransitBillsAmount: 1675.25,
                        PaidBillsAmount: 15420.8,
                        OverdueBillsAmount: 425,
                        ApprovedBillsAmount: 3240.9,
                        DisapprovedBillsAmount: 180,
                        TotalBillsAmount: 25083.2,
                    },
                    PaypointLegalname: "Sunshine Services, LLC",
                    PaypointDbaname: "Sunshine Gutters",
                    PaypointEntryname: "d193cf9a46",
                    ParentOrgName: "PropertyManager Pro",
                    ParentOrgId: 1000,
                    CreatedDate: "2022-07-01T15:00:01Z",
                    LastUpdated: "2022-07-01T15:00:01Z",
                    remitAddress1: "123 Walnut Street",
                    remitAddress2: "Suite 900",
                    remitCity: "Miami",
                    remitState: "FL",
                    remitZip: "31113",
                    remitCountry: "US",
                    payeeName1: "payeeName1",
                    payeeName2: "payeeName2",
                    customField1: "",
                    customField2: "",
                    customerVendorAccount: "123-456",
                    InternalReferenceId: 1000000,
                    additionalData: undefined,
                    externalPaypointID: "Paypoint-100",
                    StoredMethods: [],
                },
            ],
            Summary: {
                pageIdentifier: "null",
                pageSize: 20,
                totalAmount: 200,
                totalNetAmount: 77.22,
                totalPages: 1,
                totalRecords: 1,
            },
        };
        server
            .mockEndpoint()
            .get("/Query/vendors/org/123")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.query.listVendorsOrg(123, {
            fromRecord: 251,
            limitRecord: 0,
            sortBy: "desc(field_name)",
        });
        expect(response).toEqual({
            Records: [
                {
                    VendorNumber: "1234",
                    Name1: "Herman's Coatings",
                    Name2: "Herman's Coating Supply Company, LLC",
                    EIN: "123456789",
                    Phone: "212-555-1234",
                    Email: "example@email.com",
                    RemitEmail: undefined,
                    Address1: "123 Ocean Drive",
                    Address2: "Suite 400",
                    City: "Bristol",
                    State: "GA",
                    Zip: "31113",
                    Country: "US",
                    Mcc: "7777",
                    LocationCode: "LOC123",
                    Contacts: {
                        ContactEmail: "eric@martinezcoatings.com",
                        ContactName: "Eric Martinez",
                        ContactPhone: "5555555555",
                        ContactTitle: "Owner",
                    },
                    BillingData: {
                        id: 123456,
                        accountId: "bank-account-001",
                        nickname: "Main Checking Account",
                        bankName: "Example Bank",
                        routingAccount: "123456789",
                        accountNumber: "9876543210",
                        typeAccount: "Checking",
                        bankAccountHolderName: "John Doe",
                        bankAccountHolderType: "Business",
                        bankAccountFunction: 2,
                        verified: true,
                        status: 1,
                        services: [],
                        default: true,
                    },
                    PaymentMethod: undefined,
                    VendorStatus: 1,
                    VendorId: 1,
                    EnrollmentStatus: undefined,
                    Summary: {
                        ActiveBills: 2,
                        PendingBills: 4,
                        InTransitBills: 3,
                        PaidBills: 18,
                        OverdueBills: 1,
                        ApprovedBills: 5,
                        DisapprovedBills: 1,
                        TotalBills: 34,
                        ActiveBillsAmount: 1250.75,
                        PendingBillsAmount: 2890.5,
                        InTransitBillsAmount: 1675.25,
                        PaidBillsAmount: 15420.8,
                        OverdueBillsAmount: 425,
                        ApprovedBillsAmount: 3240.9,
                        DisapprovedBillsAmount: 180,
                        TotalBillsAmount: 25083.2,
                    },
                    PaypointLegalname: "Sunshine Services, LLC",
                    PaypointDbaname: "Sunshine Gutters",
                    PaypointEntryname: "d193cf9a46",
                    ParentOrgName: "PropertyManager Pro",
                    ParentOrgId: 1000,
                    CreatedDate: "2022-07-01T15:00:01Z",
                    LastUpdated: "2022-07-01T15:00:01Z",
                    remitAddress1: "123 Walnut Street",
                    remitAddress2: "Suite 900",
                    remitCity: "Miami",
                    remitState: "FL",
                    remitZip: "31113",
                    remitCountry: "US",
                    payeeName1: "payeeName1",
                    payeeName2: "payeeName2",
                    customField1: "",
                    customField2: "",
                    customerVendorAccount: "123-456",
                    InternalReferenceId: 1000000,
                    additionalData: undefined,
                    externalPaypointID: "Paypoint-100",
                    StoredMethods: [],
                },
            ],
            Summary: {
                pageIdentifier: "null",
                pageSize: 20,
                totalAmount: 200,
                totalNetAmount: 77.22,
                totalPages: 1,
                totalRecords: 1,
            },
        });
    });

    test("ListVendorsOrg (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/vendors/org/1")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listVendorsOrg(1);
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("ListVendorsOrg (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/vendors/org/1")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listVendorsOrg(1);
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("ListVendorsOrg (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/vendors/org/1")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listVendorsOrg(1);
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("ListVendorsOrg (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: "responseText" };
        server
            .mockEndpoint()
            .get("/Query/vendors/org/1")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listVendorsOrg(1);
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: "responseText",
            }),
        );
    });

    test("ListVcards (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            Records: [
                {
                    vcardSent: true,
                    cardToken: "vcrd_5Ty8NrBzXjKuqHm9DwElfP",
                    cardNumber: "44XX XXXX XXXX 1234",
                    cvc: "XXX",
                    expirationDate: "2025-12",
                    status: "Active",
                    amount: 500,
                    currentBalance: 375.25,
                    expenseLimit: 100,
                    expenseLimitPeriod: "monthly",
                    maxNumberOfUses: 10,
                    currentNumberOfUses: 3,
                    exactAmount: false,
                    mcc: "5812",
                    tcc: "T01",
                    misc1: "Invoice #12345",
                    misc2: "Project: Office Supplies",
                    dateCreated: "2023-01-15T09:30:00Z",
                    dateModified: "2023-02-20T14:15:22Z",
                    associatedVendor: {
                        VendorNumber: "V-12345",
                        Name1: "Office Supply Co.",
                        EIN: "XXXXX6789",
                        Email: "billing@officesupply.example.com",
                        VendorId: 1542,
                    },
                    associatedCustomer: { firstname: "Acme", lastname: "Corporation" },
                    PaypointDbaname: "Global Factory LLC",
                    PaypointLegalname: "Global Factory LLC",
                    PaypointEntryname: "4872acb376a",
                    externalPaypointID: "pay-10",
                    ParentOrgName: "SupplyPro",
                    paypointId: 236,
                },
            ],
            Summary: {
                pageIdentifier: "XXXXXXXXXXXXXX",
                pageSize: 20,
                totalAmount: 2500,
                totalactive: 5,
                totalamounteactive: 2500,
                totalbalanceactive: 1875.25,
                totalPages: 1,
                totalRecords: 5,
            },
        };
        server
            .mockEndpoint()
            .get("/Query/vcards/8cfec329267")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.query.listVcards("8cfec329267", {
            fromRecord: 251,
            limitRecord: 0,
            sortBy: "desc(field_name)",
        });
        expect(response).toEqual({
            Records: [
                {
                    vcardSent: true,
                    cardToken: "vcrd_5Ty8NrBzXjKuqHm9DwElfP",
                    cardNumber: "44XX XXXX XXXX 1234",
                    cvc: "XXX",
                    expirationDate: "2025-12",
                    status: "Active",
                    amount: 500,
                    currentBalance: 375.25,
                    expenseLimit: 100,
                    expenseLimitPeriod: "monthly",
                    maxNumberOfUses: 10,
                    currentNumberOfUses: 3,
                    exactAmount: false,
                    mcc: "5812",
                    tcc: "T01",
                    misc1: "Invoice #12345",
                    misc2: "Project: Office Supplies",
                    dateCreated: "2023-01-15T09:30:00Z",
                    dateModified: "2023-02-20T14:15:22Z",
                    associatedVendor: {
                        VendorNumber: "V-12345",
                        Name1: "Office Supply Co.",
                        EIN: "XXXXX6789",
                        Email: "billing@officesupply.example.com",
                        VendorId: 1542,
                    },
                    associatedCustomer: {
                        firstname: "Acme",
                        lastname: "Corporation",
                    },
                    PaypointDbaname: "Global Factory LLC",
                    PaypointLegalname: "Global Factory LLC",
                    PaypointEntryname: "4872acb376a",
                    externalPaypointID: "pay-10",
                    ParentOrgName: "SupplyPro",
                    paypointId: 236,
                },
            ],
            Summary: {
                pageIdentifier: "XXXXXXXXXXXXXX",
                pageSize: 20,
                totalAmount: 2500,
                totalactive: 5,
                totalamounteactive: 2500,
                totalbalanceactive: 1875.25,
                totalPages: 1,
                totalRecords: 5,
            },
        });
    });

    test("ListVcards (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/vcards/entry")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listVcards("entry");
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("ListVcards (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/vcards/entry")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listVcards("entry");
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("ListVcards (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/vcards/entry")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listVcards("entry");
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("ListVcards (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: "responseText" };
        server
            .mockEndpoint()
            .get("/Query/vcards/entry")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listVcards("entry");
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: "responseText",
            }),
        );
    });

    test("ListVcardsOrg (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            Records: [
                {
                    vcardSent: true,
                    cardToken: "vcrd_5Ty8NrBzXjKuqHm9DwElfP",
                    cardNumber: "44XX XXXX XXXX 1234",
                    cvc: "XXX",
                    expirationDate: "2025-12",
                    status: "Active",
                    amount: 500,
                    currentBalance: 375.25,
                    expenseLimit: 100,
                    expenseLimitPeriod: "monthly",
                    maxNumberOfUses: 10,
                    currentNumberOfUses: 3,
                    exactAmount: false,
                    mcc: "5812",
                    tcc: "T01",
                    misc1: "Invoice #12345",
                    misc2: "Project: Office Supplies",
                    dateCreated: "2023-01-15T09:30:00Z",
                    dateModified: "2023-02-20T14:15:22Z",
                    associatedVendor: {
                        VendorNumber: "V-12345",
                        Name1: "Office Supply Co.",
                        EIN: "XXXXX6789",
                        Email: "billing@officesupply.example.com",
                        VendorId: 1542,
                    },
                    associatedCustomer: { firstname: "Acme", lastname: "Corporation" },
                    PaypointDbaname: "Global Factory LLC",
                    PaypointLegalname: "Global Factory LLC",
                    PaypointEntryname: "4872acb376a",
                    externalPaypointID: "pay-10",
                    ParentOrgName: "SupplyPro",
                    paypointId: 236,
                },
            ],
            Summary: {
                pageIdentifier: "XXXXXXXXXXXXXX",
                pageSize: 20,
                totalAmount: 2500,
                totalactive: 5,
                totalamounteactive: 2500,
                totalbalanceactive: 1875.25,
                totalPages: 1,
                totalRecords: 5,
            },
        };
        server
            .mockEndpoint()
            .get("/Query/vcards/org/123")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.query.listVcardsOrg(123, {
            fromRecord: 251,
            limitRecord: 0,
            sortBy: "desc(field_name)",
        });
        expect(response).toEqual({
            Records: [
                {
                    vcardSent: true,
                    cardToken: "vcrd_5Ty8NrBzXjKuqHm9DwElfP",
                    cardNumber: "44XX XXXX XXXX 1234",
                    cvc: "XXX",
                    expirationDate: "2025-12",
                    status: "Active",
                    amount: 500,
                    currentBalance: 375.25,
                    expenseLimit: 100,
                    expenseLimitPeriod: "monthly",
                    maxNumberOfUses: 10,
                    currentNumberOfUses: 3,
                    exactAmount: false,
                    mcc: "5812",
                    tcc: "T01",
                    misc1: "Invoice #12345",
                    misc2: "Project: Office Supplies",
                    dateCreated: "2023-01-15T09:30:00Z",
                    dateModified: "2023-02-20T14:15:22Z",
                    associatedVendor: {
                        VendorNumber: "V-12345",
                        Name1: "Office Supply Co.",
                        EIN: "XXXXX6789",
                        Email: "billing@officesupply.example.com",
                        VendorId: 1542,
                    },
                    associatedCustomer: {
                        firstname: "Acme",
                        lastname: "Corporation",
                    },
                    PaypointDbaname: "Global Factory LLC",
                    PaypointLegalname: "Global Factory LLC",
                    PaypointEntryname: "4872acb376a",
                    externalPaypointID: "pay-10",
                    ParentOrgName: "SupplyPro",
                    paypointId: 236,
                },
            ],
            Summary: {
                pageIdentifier: "XXXXXXXXXXXXXX",
                pageSize: 20,
                totalAmount: 2500,
                totalactive: 5,
                totalamounteactive: 2500,
                totalbalanceactive: 1875.25,
                totalPages: 1,
                totalRecords: 5,
            },
        });
    });

    test("ListVcardsOrg (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/vcards/org/1")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listVcardsOrg(1);
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("ListVcardsOrg (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/vcards/org/1")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listVcardsOrg(1);
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("ListVcardsOrg (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Query/vcards/org/1")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listVcardsOrg(1);
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("ListVcardsOrg (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: "responseText" };
        server
            .mockEndpoint()
            .get("/Query/vcards/org/1")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.query.listVcardsOrg(1);
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: "responseText",
            }),
        );
    });
});
