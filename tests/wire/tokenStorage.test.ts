/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { PayabliClient } from "../../src/Client";
import * as Payabli from "../../src/api/index";

describe("TokenStorage", () => {
    test("AddMethod (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            customerData: { customerId: 4440 },
            entryPoint: "f743aed24a",
            fallbackAuth: true,
            paymentMethod: {
                cardcvv: "123",
                cardexp: "02/25",
                cardHolder: "John Doe",
                cardnumber: "4111111111111111",
                cardzip: "12345",
                method: "card",
            },
        };
        const rawResponseBody = {
            isSuccess: true,
            responseData: {
                customerId: 4400,
                methodReferenceId: "1ec55af9-7b5a-4ff0-81ed-c12d2f95e135-4440",
                referenceId: "1ec55af9-7b5a-4ff0-81ed-c12d2f95e135-4440",
                resultCode: 1,
                resultText: "Approved",
            },
            responseText: "Success",
        };
        server
            .mockEndpoint()
            .post("/TokenStorage/add")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.tokenStorage.addMethod({
            body: {
                customerData: {
                    customerId: 4440,
                },
                entryPoint: "f743aed24a",
                fallbackAuth: true,
                paymentMethod: {
                    cardcvv: "123",
                    cardexp: "02/25",
                    cardHolder: "John Doe",
                    cardnumber: "4111111111111111",
                    cardzip: "12345",
                    method: "card",
                },
            },
        });
        expect(response).toEqual({
            isSuccess: true,
            responseData: {
                customerId: 4400,
                methodReferenceId: "1ec55af9-7b5a-4ff0-81ed-c12d2f95e135-4440",
                referenceId: "1ec55af9-7b5a-4ff0-81ed-c12d2f95e135-4440",
                resultCode: 1,
                resultText: "Approved",
            },
            responseText: "Success",
        });
    });

    test("AddMethod (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            entryPoint: "f743aed24a",
            fallbackAuth: true,
            paymentMethod: {
                cardcvv: "123",
                cardexp: "02/25",
                cardHolder: "John Doe",
                cardnumber: "4111111111111111",
                cardzip: "12345",
                method: "card",
            },
        };
        const rawResponseBody = {
            isSuccess: true,
            responseData: {
                customerId: undefined,
                methodReferenceId: "1ec55af9-7b5a-4ff0-81ed-c12d2f95e135-4440",
                referenceId: "1ec55af9-7b5a-4ff0-81ed-c12d2f95e135-4440",
                resultCode: 1,
                resultText: "Approved",
            },
            responseText: "Success",
        };
        server
            .mockEndpoint()
            .post("/TokenStorage/add")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.tokenStorage.addMethod({
            createAnonymous: true,
            body: {
                entryPoint: "f743aed24a",
                fallbackAuth: true,
                paymentMethod: {
                    cardcvv: "123",
                    cardexp: "02/25",
                    cardHolder: "John Doe",
                    cardnumber: "4111111111111111",
                    cardzip: "12345",
                    method: "card",
                },
            },
        });
        expect(response).toEqual({
            isSuccess: true,
            responseData: {
                customerId: undefined,
                methodReferenceId: "1ec55af9-7b5a-4ff0-81ed-c12d2f95e135-4440",
                referenceId: "1ec55af9-7b5a-4ff0-81ed-c12d2f95e135-4440",
                resultCode: 1,
                resultText: "Approved",
            },
            responseText: "Success",
        });
    });

    test("AddMethod (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            customerData: { customerId: 4440 },
            entryPoint: "f743aed24a",
            fallbackAuth: true,
            methodDescription: "Main card",
            paymentMethod: { method: "card", tokenId: "c9700e93-b2ed-4b75-b1e4-ca4fb04fbe45-224" },
        };
        const rawResponseBody = {
            isSuccess: true,
            responseData: {
                customerId: 4440,
                methodReferenceId: "1ec55af9-7b5a-4ff0-81ed-c12d2f95e135-4440",
                referenceId: "1ec55af9-7b5a-4ff0-81ed-c12d2f95e135-4440",
                resultCode: 1,
                resultText: "Approved",
            },
            responseText: "Success",
        };
        server
            .mockEndpoint()
            .post("/TokenStorage/add")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.tokenStorage.addMethod({
            body: {
                customerData: {
                    customerId: 4440,
                },
                entryPoint: "f743aed24a",
                fallbackAuth: true,
                methodDescription: "Main card",
                paymentMethod: {
                    method: "card",
                    tokenId: "c9700e93-b2ed-4b75-b1e4-ca4fb04fbe45-224",
                },
            },
        });
        expect(response).toEqual({
            isSuccess: true,
            responseData: {
                customerId: 4440,
                methodReferenceId: "1ec55af9-7b5a-4ff0-81ed-c12d2f95e135-4440",
                referenceId: "1ec55af9-7b5a-4ff0-81ed-c12d2f95e135-4440",
                resultCode: 1,
                resultText: "Approved",
            },
            responseText: "Success",
        });
    });

    test("AddMethod (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            customerData: { customerId: 4440 },
            entryPoint: "f743aed24a",
            paymentMethod: {
                achAccount: "1111111111111",
                achAccountType: "Checking",
                achCode: "WEB",
                achHolder: "John Doe",
                achHolderType: "personal",
                achRouting: "123456780",
                method: "ach",
            },
        };
        const rawResponseBody = {
            isSuccess: true,
            responseData: {
                customerId: 4440,
                methodReferenceId: "1ec55af9-7b5a-4ff0-81ed-c12d2f95e135-4440",
                referenceId: "1ec55af9-7b5a-4ff0-81ed-c12d2f95e135-4440",
                resultCode: 1,
                resultText: "Approved",
            },
            responseText: "Success",
        };
        server
            .mockEndpoint()
            .post("/TokenStorage/add")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.tokenStorage.addMethod({
            achValidation: true,
            body: {
                customerData: {
                    customerId: 4440,
                },
                entryPoint: "f743aed24a",
                paymentMethod: {
                    achAccount: "1111111111111",
                    achAccountType: "Checking",
                    achCode: "WEB",
                    achHolder: "John Doe",
                    achHolderType: "personal",
                    achRouting: "123456780",
                    method: "ach",
                },
            },
        });
        expect(response).toEqual({
            isSuccess: true,
            responseData: {
                customerId: 4440,
                methodReferenceId: "1ec55af9-7b5a-4ff0-81ed-c12d2f95e135-4440",
                referenceId: "1ec55af9-7b5a-4ff0-81ed-c12d2f95e135-4440",
                resultCode: 1,
                resultText: "Approved",
            },
            responseText: "Success",
        });
    });

    test("AddMethod (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            customerData: undefined,
            entryPoint: undefined,
            fallbackAuth: undefined,
            fallbackAuthAmount: undefined,
            methodDescription: undefined,
            paymentMethod: undefined,
            source: undefined,
            subdomain: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/TokenStorage/add")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.tokenStorage.addMethod({
                body: {
                    customerData: undefined,
                    entryPoint: undefined,
                    fallbackAuth: undefined,
                    fallbackAuthAmount: undefined,
                    methodDescription: undefined,
                    paymentMethod: undefined,
                    source: undefined,
                    subdomain: undefined,
                },
            });
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("AddMethod (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            customerData: undefined,
            entryPoint: undefined,
            fallbackAuth: undefined,
            fallbackAuthAmount: undefined,
            methodDescription: undefined,
            paymentMethod: undefined,
            source: undefined,
            subdomain: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/TokenStorage/add")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.tokenStorage.addMethod({
                body: {
                    customerData: undefined,
                    entryPoint: undefined,
                    fallbackAuth: undefined,
                    fallbackAuthAmount: undefined,
                    methodDescription: undefined,
                    paymentMethod: undefined,
                    source: undefined,
                    subdomain: undefined,
                },
            });
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("AddMethod (7)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            customerData: undefined,
            entryPoint: undefined,
            fallbackAuth: undefined,
            fallbackAuthAmount: undefined,
            methodDescription: undefined,
            paymentMethod: undefined,
            source: undefined,
            subdomain: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/TokenStorage/add")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.tokenStorage.addMethod({
                body: {
                    customerData: undefined,
                    entryPoint: undefined,
                    fallbackAuth: undefined,
                    fallbackAuthAmount: undefined,
                    methodDescription: undefined,
                    paymentMethod: undefined,
                    source: undefined,
                    subdomain: undefined,
                },
            });
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("AddMethod (8)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            customerData: undefined,
            entryPoint: undefined,
            fallbackAuth: undefined,
            fallbackAuthAmount: undefined,
            methodDescription: undefined,
            paymentMethod: undefined,
            source: undefined,
            subdomain: undefined,
        };
        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: "responseText" };
        server
            .mockEndpoint()
            .post("/TokenStorage/add")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.tokenStorage.addMethod({
                body: {
                    customerData: undefined,
                    entryPoint: undefined,
                    fallbackAuth: undefined,
                    fallbackAuthAmount: undefined,
                    methodDescription: undefined,
                    paymentMethod: undefined,
                    source: undefined,
                    subdomain: undefined,
                },
            });
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: "responseText",
            }),
        );
    });

    test("GetMethod (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            isSuccess: true,
            responseData: {
                aba: "",
                achHolderType: "personal",
                achSecCode: "achSecCode",
                bin: "401288",
                binData: {
                    binMatchedLength: "6",
                    binCardBrand: "Visa",
                    binCardType: "Credit",
                    binCardCategory: "PLATINUM",
                    binCardIssuer: "Bank of Example",
                    binCardIssuerCountry: "United States",
                    binCardIssuerCountryCodeA2: "US",
                    binCardIssuerCountryNumber: "840",
                    binCardIsRegulated: "false",
                    binCardUseCategory: "Consumer",
                    binCardIssuerCountryCodeA3: "USA",
                },
                customers: [
                    {
                        additionalData: { key1: { key: "value" }, key2: { key: "value" }, key3: { key: "value" } },
                        balance: 250,
                        billingPhone: "1234567890",
                        company: "Bluesky Tech Inc",
                        created: "2023-06-01T14:30:00Z",
                        customerId: 1456,
                        customerNumber: "CS789",
                        customerStatus: 1,
                        customerUsername: "Marcus",
                        identifierFields: ["firstname", "email"],
                        lastUpdated: "2024-12-15T09:45:32Z",
                        mfa: true,
                        mfaMode: 1,
                        parentOrgId: 5,
                        parentOrgName: "TechCorp",
                        paypointDbaname: "Bluesky Tech",
                        paypointEntryname: "45782932fcc",
                        paypointLegalname: "Bluesky Technologies LLC",
                        shippingAddress1: "Suite 500",
                        shippingCity: "San Francisco",
                        shippingCountry: "US",
                        shippingState: "CA",
                        shippingZip: "94105",
                        timeZone: -8,
                    },
                ],
                descriptor: "visa",
                expDate: "0926",
                holderName: "Marcus Chen",
                idPmethod: "81f7fde1-dd8b-4892-b2e1-cd60dd91f6b4-XXXC",
                lastUpdated: "2025-01-15T16:30:22Z",
                maskedAccount: "4XXXXXXX2345",
                method: "card",
                methodType: "Single Merchant",
                postalCode: "94105",
            },
            responseText: "Success",
        };
        server
            .mockEndpoint()
            .get("/TokenStorage/32-8877drt00045632-678")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.tokenStorage.getMethod("32-8877drt00045632-678", {
            cardExpirationFormat: 1,
            includeTemporary: false,
        });
        expect(response).toEqual({
            isSuccess: true,
            responseData: {
                aba: "",
                achHolderType: "personal",
                achSecCode: "achSecCode",
                bin: "401288",
                binData: {
                    binMatchedLength: "6",
                    binCardBrand: "Visa",
                    binCardType: "Credit",
                    binCardCategory: "PLATINUM",
                    binCardIssuer: "Bank of Example",
                    binCardIssuerCountry: "United States",
                    binCardIssuerCountryCodeA2: "US",
                    binCardIssuerCountryNumber: "840",
                    binCardIsRegulated: "false",
                    binCardUseCategory: "Consumer",
                    binCardIssuerCountryCodeA3: "USA",
                },
                customers: [
                    {
                        additionalData: {
                            key1: {
                                key: "value",
                            },
                            key2: {
                                key: "value",
                            },
                            key3: {
                                key: "value",
                            },
                        },
                        balance: 250,
                        billingPhone: "1234567890",
                        company: "Bluesky Tech Inc",
                        created: "2023-06-01T14:30:00Z",
                        customerId: 1456,
                        customerNumber: "CS789",
                        customerStatus: 1,
                        customerUsername: "Marcus",
                        identifierFields: ["firstname", "email"],
                        lastUpdated: "2024-12-15T09:45:32Z",
                        mfa: true,
                        mfaMode: 1,
                        parentOrgId: 5,
                        parentOrgName: "TechCorp",
                        paypointDbaname: "Bluesky Tech",
                        paypointEntryname: "45782932fcc",
                        paypointLegalname: "Bluesky Technologies LLC",
                        shippingAddress1: "Suite 500",
                        shippingCity: "San Francisco",
                        shippingCountry: "US",
                        shippingState: "CA",
                        shippingZip: "94105",
                        timeZone: -8,
                    },
                ],
                descriptor: "visa",
                expDate: "0926",
                holderName: "Marcus Chen",
                idPmethod: "81f7fde1-dd8b-4892-b2e1-cd60dd91f6b4-XXXC",
                lastUpdated: "2025-01-15T16:30:22Z",
                maskedAccount: "4XXXXXXX2345",
                method: "card",
                methodType: "Single Merchant",
                postalCode: "94105",
            },
            responseText: "Success",
        });
    });

    test("GetMethod (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            isSuccess: true,
            responseData: {
                aba: "021000021",
                achHolderType: "personal",
                achSecCode: "PPD",
                bin: "",
                customers: [
                    {
                        additionalData: { key1: { key: "value" }, key2: { key: "value" }, key3: { key: "value" } },
                        balance: 250,
                        billingPhone: "1234567890",
                        company: "Bluesky Tech Inc",
                        created: "2023-06-01T14:30:00Z",
                        customerId: 1456,
                        customerNumber: "CS789",
                        customerStatus: 1,
                        customerUsername: "Marcus",
                        identifierFields: ["firstname", "email"],
                        lastUpdated: "2024-12-15T09:45:32Z",
                        mfa: true,
                        mfaMode: 1,
                        parentOrgId: 5,
                        parentOrgName: "TechCorp",
                        paypointDbaname: "Bluesky Tech",
                        paypointEntryname: "45782932fcc",
                        paypointLegalname: "Bluesky Technologies LLC",
                        shippingAddress1: "Suite 500",
                        shippingCity: "San Francisco",
                        shippingCountry: "US",
                        shippingState: "CA",
                        shippingZip: "94105",
                        snIdentifier: "null",
                        snProvider: "google",
                        timeZone: -8,
                    },
                ],
                descriptor: "Checking",
                expDate: "",
                holderName: "Marcus Chen",
                idPmethod: "81f7fde1-dd8b-4892-b2e1-cd60dd91f6b4-XXXX",
                lastUpdated: "2025-01-15T16:30:22Z",
                maskedAccount: "8XXXXXX8654",
                method: "ach",
                methodType: "Single Merchant",
                postalCode: "",
            },
            responseText: "Success",
        };
        server
            .mockEndpoint()
            .get("/TokenStorage/32-8877drt00045632-678")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.tokenStorage.getMethod("32-8877drt00045632-678", {
            cardExpirationFormat: 1,
            includeTemporary: false,
        });
        expect(response).toEqual({
            isSuccess: true,
            responseData: {
                aba: "021000021",
                achHolderType: "personal",
                achSecCode: "PPD",
                bin: "",
                customers: [
                    {
                        additionalData: {
                            key1: {
                                key: "value",
                            },
                            key2: {
                                key: "value",
                            },
                            key3: {
                                key: "value",
                            },
                        },
                        balance: 250,
                        billingPhone: "1234567890",
                        company: "Bluesky Tech Inc",
                        created: "2023-06-01T14:30:00Z",
                        customerId: 1456,
                        customerNumber: "CS789",
                        customerStatus: 1,
                        customerUsername: "Marcus",
                        identifierFields: ["firstname", "email"],
                        lastUpdated: "2024-12-15T09:45:32Z",
                        mfa: true,
                        mfaMode: 1,
                        parentOrgId: 5,
                        parentOrgName: "TechCorp",
                        paypointDbaname: "Bluesky Tech",
                        paypointEntryname: "45782932fcc",
                        paypointLegalname: "Bluesky Technologies LLC",
                        shippingAddress1: "Suite 500",
                        shippingCity: "San Francisco",
                        shippingCountry: "US",
                        shippingState: "CA",
                        shippingZip: "94105",
                        snIdentifier: "null",
                        snProvider: "google",
                        timeZone: -8,
                    },
                ],
                descriptor: "Checking",
                expDate: "",
                holderName: "Marcus Chen",
                idPmethod: "81f7fde1-dd8b-4892-b2e1-cd60dd91f6b4-XXXX",
                lastUpdated: "2025-01-15T16:30:22Z",
                maskedAccount: "8XXXXXX8654",
                method: "ach",
                methodType: "Single Merchant",
                postalCode: "",
            },
            responseText: "Success",
        });
    });

    test("GetMethod (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/TokenStorage/methodId")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.tokenStorage.getMethod("methodId");
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("GetMethod (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/TokenStorage/methodId")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.tokenStorage.getMethod("methodId");
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("GetMethod (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/TokenStorage/methodId")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.tokenStorage.getMethod("methodId");
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("GetMethod (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: "responseText" };
        server
            .mockEndpoint()
            .get("/TokenStorage/methodId")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.tokenStorage.getMethod("methodId");
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: "responseText",
            }),
        );
    });

    test("RemoveMethod (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            isSuccess: true,
            responseData: { referenceId: "32-8877drt65345632-678", resultCode: 1, resultText: "Removed" },
            responseText: "Success",
        };
        server
            .mockEndpoint()
            .delete("/TokenStorage/32-8877drt00045632-678")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.tokenStorage.removeMethod("32-8877drt00045632-678");
        expect(response).toEqual({
            isSuccess: true,
            responseData: {
                referenceId: "32-8877drt65345632-678",
                resultCode: 1,
                resultText: "Removed",
            },
            responseText: "Success",
        });
    });

    test("RemoveMethod (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/TokenStorage/methodId")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.tokenStorage.removeMethod("methodId");
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("RemoveMethod (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/TokenStorage/methodId")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.tokenStorage.removeMethod("methodId");
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("RemoveMethod (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/TokenStorage/methodId")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.tokenStorage.removeMethod("methodId");
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("RemoveMethod (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: "responseText" };
        server
            .mockEndpoint()
            .delete("/TokenStorage/methodId")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.tokenStorage.removeMethod("methodId");
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: "responseText",
            }),
        );
    });

    test("UpdateMethod (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            customerData: { customerId: 4440 },
            entryPoint: "f743aed24a",
            fallbackAuth: true,
            paymentMethod: {
                cardcvv: "123",
                cardexp: "02/25",
                cardHolder: "John Doe",
                cardnumber: "4111111111111111",
                cardzip: "12345",
                method: "card",
            },
        };
        const rawResponseBody = {
            isSuccess: true,
            responseData: {
                referenceId: "1b502b79-e319-4159-8c29-a9f8d9f105c8-1323",
                resultCode: 1,
                resultText: "Updated",
            },
            responseText: "Success",
        };
        server
            .mockEndpoint()
            .put("/TokenStorage/32-8877drt00045632-678")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.tokenStorage.updateMethod("32-8877drt00045632-678", {
            body: {
                customerData: {
                    customerId: 4440,
                },
                entryPoint: "f743aed24a",
                fallbackAuth: true,
                paymentMethod: {
                    cardcvv: "123",
                    cardexp: "02/25",
                    cardHolder: "John Doe",
                    cardnumber: "4111111111111111",
                    cardzip: "12345",
                    method: "card",
                },
            },
        });
        expect(response).toEqual({
            isSuccess: true,
            responseData: {
                referenceId: "1b502b79-e319-4159-8c29-a9f8d9f105c8-1323",
                resultCode: 1,
                resultText: "Updated",
            },
            responseText: "Success",
        });
    });

    test("UpdateMethod (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            customerData: { customerId: 4440 },
            entryPoint: "f743aed24a",
            paymentMethod: {
                achAccount: "1111111111111",
                achAccountType: "Checking",
                achCode: "WEB",
                achHolder: "John Doe",
                achHolderType: "personal",
                achRouting: "123456780",
                method: "ach",
            },
        };
        const rawResponseBody = {
            isSuccess: true,
            responseData: {
                referenceId: "1b502b79-e319-4159-8c29-a9f8d9f105c8-1323",
                resultCode: 1,
                resultText: "Updated",
            },
            responseText: "Success",
        };
        server
            .mockEndpoint()
            .put("/TokenStorage/32-8877drt00045632-678")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.tokenStorage.updateMethod("32-8877drt00045632-678", {
            body: {
                customerData: {
                    customerId: 4440,
                },
                entryPoint: "f743aed24a",
                paymentMethod: {
                    achAccount: "1111111111111",
                    achAccountType: "Checking",
                    achCode: "WEB",
                    achHolder: "John Doe",
                    achHolderType: "personal",
                    achRouting: "123456780",
                    method: "ach",
                },
            },
        });
        expect(response).toEqual({
            isSuccess: true,
            responseData: {
                referenceId: "1b502b79-e319-4159-8c29-a9f8d9f105c8-1323",
                resultCode: 1,
                resultText: "Updated",
            },
            responseText: "Success",
        });
    });

    test("UpdateMethod (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            customerData: undefined,
            entryPoint: undefined,
            fallbackAuth: undefined,
            fallbackAuthAmount: undefined,
            methodDescription: undefined,
            paymentMethod: undefined,
            source: undefined,
            subdomain: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/TokenStorage/methodId")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.tokenStorage.updateMethod("methodId", {
                body: {
                    customerData: undefined,
                    entryPoint: undefined,
                    fallbackAuth: undefined,
                    fallbackAuthAmount: undefined,
                    methodDescription: undefined,
                    paymentMethod: undefined,
                    source: undefined,
                    subdomain: undefined,
                },
            });
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("UpdateMethod (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            customerData: undefined,
            entryPoint: undefined,
            fallbackAuth: undefined,
            fallbackAuthAmount: undefined,
            methodDescription: undefined,
            paymentMethod: undefined,
            source: undefined,
            subdomain: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/TokenStorage/methodId")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.tokenStorage.updateMethod("methodId", {
                body: {
                    customerData: undefined,
                    entryPoint: undefined,
                    fallbackAuth: undefined,
                    fallbackAuthAmount: undefined,
                    methodDescription: undefined,
                    paymentMethod: undefined,
                    source: undefined,
                    subdomain: undefined,
                },
            });
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("UpdateMethod (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            customerData: undefined,
            entryPoint: undefined,
            fallbackAuth: undefined,
            fallbackAuthAmount: undefined,
            methodDescription: undefined,
            paymentMethod: undefined,
            source: undefined,
            subdomain: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/TokenStorage/methodId")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.tokenStorage.updateMethod("methodId", {
                body: {
                    customerData: undefined,
                    entryPoint: undefined,
                    fallbackAuth: undefined,
                    fallbackAuthAmount: undefined,
                    methodDescription: undefined,
                    paymentMethod: undefined,
                    source: undefined,
                    subdomain: undefined,
                },
            });
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("UpdateMethod (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            customerData: undefined,
            entryPoint: undefined,
            fallbackAuth: undefined,
            fallbackAuthAmount: undefined,
            methodDescription: undefined,
            paymentMethod: undefined,
            source: undefined,
            subdomain: undefined,
        };
        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: "responseText" };
        server
            .mockEndpoint()
            .put("/TokenStorage/methodId")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.tokenStorage.updateMethod("methodId", {
                body: {
                    customerData: undefined,
                    entryPoint: undefined,
                    fallbackAuth: undefined,
                    fallbackAuthAmount: undefined,
                    methodDescription: undefined,
                    paymentMethod: undefined,
                    source: undefined,
                    subdomain: undefined,
                },
            });
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: "responseText",
            }),
        );
    });
});
