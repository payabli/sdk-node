/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { PayabliClient } from "../../src/Client";
import * as Payabli from "../../src/api/index";

describe("CheckCapture", () => {
    test("CheckProcessing (Capture)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            entryPoint: "47abcfea12",
            frontImage: "/9j/4AAQSkZJRgABAQEASABIAAD...",
            rearImage: "/9j/4AAQSkZJRgABAQEASABIAAD...",
            checkAmount: 12550,
        };
        const rawResponseBody = {
            id: "txn_abc123def456",
            success: true,
            processDate: "2025-04-10T04:17:09.875Z",
            ocrMicr: "⑆123456789⑆ ⑈123456⑈ 0123",
            ocrMicrStatus: "SUCCESS",
            ocrMicrConfidence: "95",
            ocrAccountNumber: "123456",
            ocrRoutingNumber: "123456789",
            ocrCheckNumber: "0123",
            ocrCheckTranCode: "",
            ocrAmount: "125.50",
            ocrAmountStatus: "SUCCESS",
            ocrAmountConfidence: "98",
            amountDiscrepancyDetected: false,
            endorsementDetected: true,
            errors: [],
            messages: ["Check processed successfully"],
            carLarMatchConfidence: "97",
            carLarMatchStatus: "MATCH",
            checkType: 1,
            referenceNumber: "REF_XYZ789",
            pageIdentifier: undefined,
        };
        server
            .mockEndpoint()
            .post("/CheckCapture/CheckProcessing")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.checkCapture.checkProcessing({
            entryPoint: "47abcfea12",
            frontImage: "/9j/4AAQSkZJRgABAQEASABIAAD...",
            rearImage: "/9j/4AAQSkZJRgABAQEASABIAAD...",
            checkAmount: 12550,
        });
        expect(response).toEqual({
            id: "txn_abc123def456",
            success: true,
            processDate: "2025-04-10T04:17:09.875Z",
            ocrMicr: "\u2446123456789\u2446 \u2448123456\u2448 0123",
            ocrMicrStatus: "SUCCESS",
            ocrMicrConfidence: "95",
            ocrAccountNumber: "123456",
            ocrRoutingNumber: "123456789",
            ocrCheckNumber: "0123",
            ocrCheckTranCode: "",
            ocrAmount: "125.50",
            ocrAmountStatus: "SUCCESS",
            ocrAmountConfidence: "98",
            amountDiscrepancyDetected: false,
            endorsementDetected: true,
            errors: [],
            messages: ["Check processed successfully"],
            carLarMatchConfidence: "97",
            carLarMatchStatus: "MATCH",
            checkType: 1,
            referenceNumber: "REF_XYZ789",
            pageIdentifier: undefined,
        });
    });

    test("CheckProcessing (610f5418)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            entryPoint: "entryPoint",
            frontImage: "frontImage",
            rearImage: "rearImage",
            checkAmount: 1,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/CheckCapture/CheckProcessing")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.checkCapture.checkProcessing({
                entryPoint: "entryPoint",
                frontImage: "frontImage",
                rearImage: "rearImage",
                checkAmount: 1,
            });
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("CheckProcessing (8e56b9c0)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            entryPoint: "entryPoint",
            frontImage: "frontImage",
            rearImage: "rearImage",
            checkAmount: 1,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/CheckCapture/CheckProcessing")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.checkCapture.checkProcessing({
                entryPoint: "entryPoint",
                frontImage: "frontImage",
                rearImage: "rearImage",
                checkAmount: 1,
            });
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("CheckProcessing (82c66754)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            entryPoint: "entryPoint",
            frontImage: "frontImage",
            rearImage: "rearImage",
            checkAmount: 1,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/CheckCapture/CheckProcessing")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.checkCapture.checkProcessing({
                entryPoint: "entryPoint",
                frontImage: "frontImage",
                rearImage: "rearImage",
                checkAmount: 1,
            });
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("CheckProcessing (d0d7d8cb)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            entryPoint: "entryPoint",
            frontImage: "frontImage",
            rearImage: "rearImage",
            checkAmount: 1,
        };
        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .post("/CheckCapture/CheckProcessing")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.checkCapture.checkProcessing({
                entryPoint: "entryPoint",
                frontImage: "frontImage",
                rearImage: "rearImage",
                checkAmount: 1,
            });
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });
});
