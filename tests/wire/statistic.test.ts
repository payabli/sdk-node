/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { PayabliClient } from "../../src/Client";
import * as Payabli from "../../src/api/index";

describe("Statistic", () => {
    test("BasicStats (BasicStatsExample)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = [{ statX: "2023-03", inTransactions: 150, inTransactionsVolume: 25000.5 }];
        server
            .mockEndpoint()
            .get("/Statistic/basic/ytd/m/1/1000000")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.statistic.basicStats(1000000, "m", 1, "ytd", {
            endDate: "2023-05-23",
            startDate: "2023-03-23",
        });
        expect(response).toEqual([
            {
                statX: "2023-03",
                inTransactions: 150,
                inTransactionsVolume: 25000.5,
            },
        ]);
    });

    test("BasicStats (dec53333)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Statistic/basic/mode/freq/1/1000000")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.statistic.basicStats(1000000, "freq", 1, "mode");
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("BasicStats (a6cd2883)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Statistic/basic/mode/freq/1/1000000")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.statistic.basicStats(1000000, "freq", 1, "mode");
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("BasicStats (ed07014f)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Statistic/basic/mode/freq/1/1000000")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.statistic.basicStats(1000000, "freq", 1, "mode");
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("BasicStats (8464adb5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .get("/Statistic/basic/mode/freq/1/1000000")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.statistic.basicStats(1000000, "freq", 1, "mode");
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("CustomerBasicStats (CustomerBasicStatsExample)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = [{ interval: "2023-03", count: 45, volume: 12500.75 }];
        server
            .mockEndpoint()
            .get("/Statistic/customerbasic/ytd/m/998")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.statistic.customerBasicStats(998, "m", "ytd");
        expect(response).toEqual([
            {
                interval: "2023-03",
                count: 45,
                volume: 12500.75,
            },
        ]);
    });

    test("CustomerBasicStats (6f11a58d)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Statistic/customerbasic/mode/freq/1")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.statistic.customerBasicStats(1, "freq", "mode");
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("CustomerBasicStats (b4a9f07d)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Statistic/customerbasic/mode/freq/1")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.statistic.customerBasicStats(1, "freq", "mode");
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("CustomerBasicStats (fa03769)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Statistic/customerbasic/mode/freq/1")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.statistic.customerBasicStats(1, "freq", "mode");
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("CustomerBasicStats (c8fed603)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .get("/Statistic/customerbasic/mode/freq/1")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.statistic.customerBasicStats(1, "freq", "mode");
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("SubStats (SubStatsExample)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = [{ statX: "2023-03", inTransactions: 150, inTransactionsVolume: 25000.5 }];
        server
            .mockEndpoint()
            .get("/Statistic/subscriptions/30/1/1000000")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.statistic.subStats(1000000, "30", 1);
        expect(response).toEqual([
            {
                statX: "2023-03",
                inTransactions: 150,
                inTransactionsVolume: 25000.5,
            },
        ]);
    });

    test("SubStats (4b7423de)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Statistic/subscriptions/interval/1/1000000")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.statistic.subStats(1000000, "interval", 1);
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("SubStats (493611e6)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Statistic/subscriptions/interval/1/1000000")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.statistic.subStats(1000000, "interval", 1);
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("SubStats (fce42cea)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Statistic/subscriptions/interval/1/1000000")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.statistic.subStats(1000000, "interval", 1);
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("SubStats (bd9b0184)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .get("/Statistic/subscriptions/interval/1/1000000")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.statistic.subStats(1000000, "interval", 1);
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("VendorBasicStats (VendorBasicStatsExample)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = [
            {
                statX: "2023-03",
                active: 25,
                activeVolume: 5000.25,
                sentToApproval: 10,
                sentToApprovalVolume: 2500.75,
                toApproval: 8,
                toApprovalVolume: 1800.5,
                approved: 20,
                approvedVolume: 4200,
                disapproved: 3,
                disapprovedVolume: 600.25,
                cancelled: 2,
                cancelledVolume: 400,
                inTransit: 5,
                inTransitVolume: 1250.75,
                paid: 18,
                paidVolume: 3800.5,
            },
        ];
        server
            .mockEndpoint()
            .get("/Statistic/vendorbasic/ytd/m/1")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.statistic.vendorBasicStats("m", 1, "ytd");
        expect(response).toEqual([
            {
                statX: "2023-03",
                active: 25,
                activeVolume: 5000.25,
                sentToApproval: 10,
                sentToApprovalVolume: 2500.75,
                toApproval: 8,
                toApprovalVolume: 1800.5,
                approved: 20,
                approvedVolume: 4200,
                disapproved: 3,
                disapprovedVolume: 600.25,
                cancelled: 2,
                cancelledVolume: 400,
                inTransit: 5,
                inTransitVolume: 1250.75,
                paid: 18,
                paidVolume: 3800.5,
            },
        ]);
    });

    test("VendorBasicStats (d1f3561d)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Statistic/vendorbasic/mode/freq/1")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.statistic.vendorBasicStats("freq", 1, "mode");
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("VendorBasicStats (2e75208d)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Statistic/vendorbasic/mode/freq/1")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.statistic.vendorBasicStats("freq", 1, "mode");
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("VendorBasicStats (b04b3779)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Statistic/vendorbasic/mode/freq/1")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.statistic.vendorBasicStats("freq", 1, "mode");
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("VendorBasicStats (702c93b3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .get("/Statistic/vendorbasic/mode/freq/1")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.statistic.vendorBasicStats("freq", 1, "mode");
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });
});
