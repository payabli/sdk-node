/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { PayabliClient } from "../../src/Client";
import * as Payabli from "../../src/api/index";

describe("HostedPaymentPages", () => {
    test("loadPage (163e801)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            AdditionalData: { key1: { key: "value" }, key2: { key: "value" }, key3: { key: "value" } },
            credentials: [
                {
                    accountId: "accountId",
                    cfeeFix: 1.1,
                    cfeeFloat: 1.1,
                    cfeeMax: 1.1,
                    cfeeMin: 1.1,
                    maxticket: 1.1,
                    minticket: 1.1,
                    mode: 1,
                    referenceId: 1000000,
                    service: "service",
                },
            ],
            lastAccess: "2022-06-30T15:01:00Z",
            pageContent: {
                amount: { categories: [{}], enabled: true, order: 1 },
                autopay: {
                    enabled: true,
                    frequencySelected: "frequencySelected",
                    header: "header",
                    order: 1,
                    startDate: "1, 5-10",
                },
                contactUs: {
                    emailLabel: "emailLabel",
                    enabled: true,
                    header: "header",
                    order: 1,
                    paymentIcons: true,
                    phoneLabel: "phoneLabel",
                },
                entry: "entry",
                invoices: {
                    enabled: true,
                    invoiceLink: { enabled: true },
                    order: 1,
                    viewInvoiceDetails: { enabled: true },
                },
                logo: { enabled: true, order: 1 },
                messageBeforePaying: { enabled: true, label: "label", order: 1 },
                name: "name",
                notes: { enabled: true, header: "header", order: 1, placeholder: "placeholder", value: "value" },
                page: { description: "description", enabled: true, header: "header", order: 1 },
                paymentButton: { enabled: true, label: "label", order: 1 },
                paymentMethods: {
                    allMethodsChecked: true,
                    enabled: true,
                    header: "header",
                    methods: {
                        amex: true,
                        applePay: true,
                        discover: false,
                        eCheck: false,
                        mastercard: true,
                        visa: true,
                    },
                    order: 1,
                },
                payor: { enabled: true, fields: [{}], header: "header", order: 1 },
                review: { enabled: true, header: "header", order: 1 },
                subdomain: "mypage-1",
            },
            pageIdentifier: "null",
            pageSettings: {
                color: "color",
                customCssUrl: "customCssUrl",
                language: "language",
                pageLogo: {
                    fContent: "TXkgdGVzdCBmaWxlHJ==...",
                    filename: "my-doc.pdf",
                    ftype: "pdf",
                    furl: "https://mysite.com/my-doc.pdf",
                },
                paymentButton: { label: "label", size: "sm" },
                redirectAfterApprove: true,
                redirectAfterApproveUrl: "redirectAfterApproveUrl",
            },
            published: 1,
            receiptContent: {
                amount: { enabled: true, order: 1 },
                contactUs: { enabled: true, order: 1 },
                details: { enabled: true, order: 1 },
                logo: { enabled: true, order: 1 },
                messageBeforeButton: { enabled: true, label: "label", order: 1 },
                page: { description: "description", enabled: true, header: "header", order: 1 },
                paymentButton: { enabled: true, label: "label", order: 1 },
                paymentInformation: { enabled: true, order: 1 },
                settings: { enabled: true, fields: [{}], order: 1, sendAuto: true, sendManual: true },
            },
            subdomain: "mypage-1",
            totalAmount: 1.1,
            validationCode: "validationCode",
        };
        server
            .mockEndpoint()
            .get("/Paypoint/load/8cfec329267/pay-your-fees-1")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.hostedPaymentPages.loadPage("8cfec329267", "pay-your-fees-1");
        expect(response).toEqual({
            AdditionalData: {
                key1: {
                    key: "value",
                },
                key2: {
                    key: "value",
                },
                key3: {
                    key: "value",
                },
            },
            credentials: [
                {
                    accountId: "accountId",
                    cfeeFix: 1.1,
                    cfeeFloat: 1.1,
                    cfeeMax: 1.1,
                    cfeeMin: 1.1,
                    maxticket: 1.1,
                    minticket: 1.1,
                    mode: 1,
                    referenceId: 1000000,
                    service: "service",
                },
            ],
            lastAccess: "2022-06-30T15:01:00Z",
            pageContent: {
                amount: {
                    categories: [{}],
                    enabled: true,
                    order: 1,
                },
                autopay: {
                    enabled: true,
                    frequencySelected: "frequencySelected",
                    header: "header",
                    order: 1,
                    startDate: "1, 5-10",
                },
                contactUs: {
                    emailLabel: "emailLabel",
                    enabled: true,
                    header: "header",
                    order: 1,
                    paymentIcons: true,
                    phoneLabel: "phoneLabel",
                },
                entry: "entry",
                invoices: {
                    enabled: true,
                    invoiceLink: {
                        enabled: true,
                    },
                    order: 1,
                    viewInvoiceDetails: {
                        enabled: true,
                    },
                },
                logo: {
                    enabled: true,
                    order: 1,
                },
                messageBeforePaying: {
                    enabled: true,
                    label: "label",
                    order: 1,
                },
                name: "name",
                notes: {
                    enabled: true,
                    header: "header",
                    order: 1,
                    placeholder: "placeholder",
                    value: "value",
                },
                page: {
                    description: "description",
                    enabled: true,
                    header: "header",
                    order: 1,
                },
                paymentButton: {
                    enabled: true,
                    label: "label",
                    order: 1,
                },
                paymentMethods: {
                    allMethodsChecked: true,
                    enabled: true,
                    header: "header",
                    methods: {
                        amex: true,
                        applePay: true,
                        discover: false,
                        eCheck: false,
                        mastercard: true,
                        visa: true,
                    },
                    order: 1,
                },
                payor: {
                    enabled: true,
                    fields: [{}],
                    header: "header",
                    order: 1,
                },
                review: {
                    enabled: true,
                    header: "header",
                    order: 1,
                },
                subdomain: "mypage-1",
            },
            pageIdentifier: "null",
            pageSettings: {
                color: "color",
                customCssUrl: "customCssUrl",
                language: "language",
                pageLogo: {
                    fContent: "TXkgdGVzdCBmaWxlHJ==...",
                    filename: "my-doc.pdf",
                    ftype: "pdf",
                    furl: "https://mysite.com/my-doc.pdf",
                },
                paymentButton: {
                    label: "label",
                    size: "sm",
                },
                redirectAfterApprove: true,
                redirectAfterApproveUrl: "redirectAfterApproveUrl",
            },
            published: 1,
            receiptContent: {
                amount: {
                    enabled: true,
                    order: 1,
                },
                contactUs: {
                    enabled: true,
                    order: 1,
                },
                details: {
                    enabled: true,
                    order: 1,
                },
                logo: {
                    enabled: true,
                    order: 1,
                },
                messageBeforeButton: {
                    enabled: true,
                    label: "label",
                    order: 1,
                },
                page: {
                    description: "description",
                    enabled: true,
                    header: "header",
                    order: 1,
                },
                paymentButton: {
                    enabled: true,
                    label: "label",
                    order: 1,
                },
                paymentInformation: {
                    enabled: true,
                    order: 1,
                },
                settings: {
                    enabled: true,
                    fields: [{}],
                    order: 1,
                    sendAuto: true,
                    sendManual: true,
                },
            },
            subdomain: "mypage-1",
            totalAmount: 1.1,
            validationCode: "validationCode",
        });
    });

    test("loadPage (f1122e1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Paypoint/load/entry/subdomain")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.hostedPaymentPages.loadPage("entry", "subdomain");
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("loadPage (c87d48e1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Paypoint/load/entry/subdomain")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.hostedPaymentPages.loadPage("entry", "subdomain");
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("loadPage (bc82a36d)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/Paypoint/load/entry/subdomain")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.hostedPaymentPages.loadPage("entry", "subdomain");
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("loadPage (adc2e804)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .get("/Paypoint/load/entry/subdomain")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.hostedPaymentPages.loadPage("entry", "subdomain");
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("newPage (a10b54cc)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            isSuccess: true,
            pageIdentifier: "null",
            responseCode: 1,
            responseData: "responseData",
            responseText: "Success",
        };
        server
            .mockEndpoint()
            .post("/Paypoint/8cfec329267")
            .header("idempotencyKey", "6B29FC40-CA47-1067-B31D-00DD010662DA")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.hostedPaymentPages.newPage("8cfec329267", {
            idempotencyKey: "6B29FC40-CA47-1067-B31D-00DD010662DA",
            body: {},
        });
        expect(response).toEqual({
            isSuccess: true,
            pageIdentifier: "null",
            responseCode: 1,
            responseData: "responseData",
            responseText: "Success",
        });
    });

    test("newPage (b9f65a87)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            AdditionalData: undefined,
            credentials: undefined,
            lastAccess: undefined,
            pageContent: undefined,
            pageIdentifier: undefined,
            pageSettings: undefined,
            published: undefined,
            receiptContent: undefined,
            subdomain: undefined,
            totalAmount: undefined,
            validationCode: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/Paypoint/entry")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.hostedPaymentPages.newPage("entry", {
                body: {
                    AdditionalData: undefined,
                    credentials: undefined,
                    lastAccess: undefined,
                    pageContent: undefined,
                    pageIdentifier: undefined,
                    pageSettings: undefined,
                    published: undefined,
                    receiptContent: undefined,
                    subdomain: undefined,
                    totalAmount: undefined,
                    validationCode: undefined,
                },
            });
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("newPage (530ed97)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            AdditionalData: undefined,
            credentials: undefined,
            lastAccess: undefined,
            pageContent: undefined,
            pageIdentifier: undefined,
            pageSettings: undefined,
            published: undefined,
            receiptContent: undefined,
            subdomain: undefined,
            totalAmount: undefined,
            validationCode: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/Paypoint/entry")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.hostedPaymentPages.newPage("entry", {
                body: {
                    AdditionalData: undefined,
                    credentials: undefined,
                    lastAccess: undefined,
                    pageContent: undefined,
                    pageIdentifier: undefined,
                    pageSettings: undefined,
                    published: undefined,
                    receiptContent: undefined,
                    subdomain: undefined,
                    totalAmount: undefined,
                    validationCode: undefined,
                },
            });
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("newPage (851f0993)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            AdditionalData: undefined,
            credentials: undefined,
            lastAccess: undefined,
            pageContent: undefined,
            pageIdentifier: undefined,
            pageSettings: undefined,
            published: undefined,
            receiptContent: undefined,
            subdomain: undefined,
            totalAmount: undefined,
            validationCode: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/Paypoint/entry")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.hostedPaymentPages.newPage("entry", {
                body: {
                    AdditionalData: undefined,
                    credentials: undefined,
                    lastAccess: undefined,
                    pageContent: undefined,
                    pageIdentifier: undefined,
                    pageSettings: undefined,
                    published: undefined,
                    receiptContent: undefined,
                    subdomain: undefined,
                    totalAmount: undefined,
                    validationCode: undefined,
                },
            });
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("newPage (6e1fd8b6)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            AdditionalData: undefined,
            credentials: undefined,
            lastAccess: undefined,
            pageContent: undefined,
            pageIdentifier: undefined,
            pageSettings: undefined,
            published: undefined,
            receiptContent: undefined,
            subdomain: undefined,
            totalAmount: undefined,
            validationCode: undefined,
        };
        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .post("/Paypoint/entry")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.hostedPaymentPages.newPage("entry", {
                body: {
                    AdditionalData: undefined,
                    credentials: undefined,
                    lastAccess: undefined,
                    pageContent: undefined,
                    pageIdentifier: undefined,
                    pageSettings: undefined,
                    published: undefined,
                    receiptContent: undefined,
                    subdomain: undefined,
                    totalAmount: undefined,
                    validationCode: undefined,
                },
            });
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("savePage (Example)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { isSuccess: true, responseCode: 1, responseData: "string", responseText: "Updated" };
        server
            .mockEndpoint()
            .put("/Paypoint/8cfec329267/pay-your-fees-1")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.hostedPaymentPages.savePage("8cfec329267", "pay-your-fees-1", {});
        expect(response).toEqual({
            isSuccess: true,
            responseCode: 1,
            responseData: "string",
            responseText: "Updated",
        });
    });

    test("savePage (d5206faa)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            AdditionalData: undefined,
            credentials: undefined,
            lastAccess: undefined,
            pageContent: undefined,
            pageIdentifier: undefined,
            pageSettings: undefined,
            published: undefined,
            receiptContent: undefined,
            subdomain: undefined,
            totalAmount: undefined,
            validationCode: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/Paypoint/entry/subdomain")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.hostedPaymentPages.savePage("entry", "subdomain", {
                AdditionalData: undefined,
                credentials: undefined,
                lastAccess: undefined,
                pageContent: undefined,
                pageIdentifier: undefined,
                pageSettings: undefined,
                published: undefined,
                receiptContent: undefined,
                subdomain: undefined,
                totalAmount: undefined,
                validationCode: undefined,
            });
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("savePage (b1f27d02)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            AdditionalData: undefined,
            credentials: undefined,
            lastAccess: undefined,
            pageContent: undefined,
            pageIdentifier: undefined,
            pageSettings: undefined,
            published: undefined,
            receiptContent: undefined,
            subdomain: undefined,
            totalAmount: undefined,
            validationCode: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/Paypoint/entry/subdomain")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.hostedPaymentPages.savePage("entry", "subdomain", {
                AdditionalData: undefined,
                credentials: undefined,
                lastAccess: undefined,
                pageContent: undefined,
                pageIdentifier: undefined,
                pageSettings: undefined,
                published: undefined,
                receiptContent: undefined,
                subdomain: undefined,
                totalAmount: undefined,
                validationCode: undefined,
            });
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("savePage (eeddaa36)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            AdditionalData: undefined,
            credentials: undefined,
            lastAccess: undefined,
            pageContent: undefined,
            pageIdentifier: undefined,
            pageSettings: undefined,
            published: undefined,
            receiptContent: undefined,
            subdomain: undefined,
            totalAmount: undefined,
            validationCode: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/Paypoint/entry/subdomain")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.hostedPaymentPages.savePage("entry", "subdomain", {
                AdditionalData: undefined,
                credentials: undefined,
                lastAccess: undefined,
                pageContent: undefined,
                pageIdentifier: undefined,
                pageSettings: undefined,
                published: undefined,
                receiptContent: undefined,
                subdomain: undefined,
                totalAmount: undefined,
                validationCode: undefined,
            });
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("savePage (69da3e31)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            AdditionalData: undefined,
            credentials: undefined,
            lastAccess: undefined,
            pageContent: undefined,
            pageIdentifier: undefined,
            pageSettings: undefined,
            published: undefined,
            receiptContent: undefined,
            subdomain: undefined,
            totalAmount: undefined,
            validationCode: undefined,
        };
        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .put("/Paypoint/entry/subdomain")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.hostedPaymentPages.savePage("entry", "subdomain", {
                AdditionalData: undefined,
                credentials: undefined,
                lastAccess: undefined,
                pageContent: undefined,
                pageIdentifier: undefined,
                pageSettings: undefined,
                published: undefined,
                receiptContent: undefined,
                subdomain: undefined,
                totalAmount: undefined,
                validationCode: undefined,
            });
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });
});
