/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { PayabliClient } from "../../src/Client";
import * as Payabli from "../../src/api/index";

describe("Vendor", () => {
    test("AddVendor (CreateVendor)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            vendorNumber: "1234",
            name1: "Herman's Coatings and Masonry",
            name2: "<string>",
            ein: "12-3456789",
            phone: "5555555555",
            email: "example@email.com",
            address1: "123 Ocean Drive",
            address2: "Suite 400",
            city: "Miami",
            state: "FL",
            zip: "33139",
            country: "US",
            mcc: "7777",
            locationCode: "MIA123",
            contacts: [
                {
                    contactName: "Herman Martinez",
                    contactEmail: "example@email.com",
                    contactTitle: "Owner",
                    contactPhone: "3055550000",
                },
            ],
            billingData: {
                id: 123,
                bankName: "Country Bank",
                routingAccount: "123123123",
                accountNumber: "123123123",
                typeAccount: "Checking",
                bankAccountHolderName: "Gruzya Adventure Outfitters LLC",
                bankAccountHolderType: "Business",
                bankAccountFunction: 0,
            },
            paymentMethod: "managed",
            vendorStatus: 1,
            remitAddress1: "123 Walnut Street",
            remitAddress2: "Suite 900",
            remitCity: "Miami",
            remitState: "FL",
            remitZip: "31113",
            remitCountry: "US",
            payeeName1: "<string>",
            payeeName2: "<string>",
            customerVendorAccount: "A-37622",
            internalReferenceId: 123,
        };
        const rawResponseBody = { isSuccess: true, responseCode: 1, responseData: 3890, responseText: "Success" };
        server
            .mockEndpoint()
            .post("/Vendor/single/8cfec329267")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.vendor.addVendor("8cfec329267", {
            vendorNumber: "1234",
            name1: "Herman's Coatings and Masonry",
            name2: "<string>",
            ein: "12-3456789",
            phone: "5555555555",
            email: "example@email.com",
            address1: "123 Ocean Drive",
            address2: "Suite 400",
            city: "Miami",
            state: "FL",
            zip: "33139",
            country: "US",
            mcc: "7777",
            locationCode: "MIA123",
            contacts: [
                {
                    contactName: "Herman Martinez",
                    contactEmail: "example@email.com",
                    contactTitle: "Owner",
                    contactPhone: "3055550000",
                },
            ],
            billingData: {
                id: 123,
                bankName: "Country Bank",
                routingAccount: "123123123",
                accountNumber: "123123123",
                typeAccount: "Checking",
                bankAccountHolderName: "Gruzya Adventure Outfitters LLC",
                bankAccountHolderType: "Business",
                bankAccountFunction: 0,
            },
            paymentMethod: "managed",
            vendorStatus: 1,
            remitAddress1: "123 Walnut Street",
            remitAddress2: "Suite 900",
            remitCity: "Miami",
            remitState: "FL",
            remitZip: "31113",
            remitCountry: "US",
            payeeName1: "<string>",
            payeeName2: "<string>",
            customerVendorAccount: "A-37622",
            internalReferenceId: 123,
        });
        expect(response).toEqual({
            isSuccess: true,
            responseCode: 1,
            responseData: 3890,
            responseText: "Success",
        });
    });

    test("AddVendor (1bbaf695)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            vendorNumber: undefined,
            AdditionalData: undefined,
            address1: undefined,
            address2: undefined,
            billingData: undefined,
            city: undefined,
            contacts: undefined,
            country: undefined,
            customField1: undefined,
            customField2: undefined,
            customerVendorAccount: undefined,
            ein: undefined,
            email: undefined,
            internalReferenceId: undefined,
            locationCode: undefined,
            mcc: undefined,
            name1: undefined,
            name2: undefined,
            payeeName1: undefined,
            payeeName2: undefined,
            paymentMethod: undefined,
            phone: undefined,
            remitAddress1: undefined,
            remitAddress2: undefined,
            remitCity: undefined,
            remitCountry: undefined,
            remitEmail: undefined,
            remitState: undefined,
            remitZip: undefined,
            state: undefined,
            vendorStatus: undefined,
            zip: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/Vendor/single/entry")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.vendor.addVendor("entry", {
                vendorNumber: undefined,
                AdditionalData: undefined,
                address1: undefined,
                address2: undefined,
                billingData: undefined,
                city: undefined,
                contacts: undefined,
                country: undefined,
                customField1: undefined,
                customField2: undefined,
                customerVendorAccount: undefined,
                ein: undefined,
                email: undefined,
                internalReferenceId: undefined,
                locationCode: undefined,
                mcc: undefined,
                name1: undefined,
                name2: undefined,
                payeeName1: undefined,
                payeeName2: undefined,
                paymentMethod: undefined,
                phone: undefined,
                remitAddress1: undefined,
                remitAddress2: undefined,
                remitCity: undefined,
                remitCountry: undefined,
                remitEmail: undefined,
                remitState: undefined,
                remitZip: undefined,
                state: undefined,
                vendorStatus: undefined,
                zip: undefined,
            });
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("AddVendor (efc60b85)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            vendorNumber: undefined,
            AdditionalData: undefined,
            address1: undefined,
            address2: undefined,
            billingData: undefined,
            city: undefined,
            contacts: undefined,
            country: undefined,
            customField1: undefined,
            customField2: undefined,
            customerVendorAccount: undefined,
            ein: undefined,
            email: undefined,
            internalReferenceId: undefined,
            locationCode: undefined,
            mcc: undefined,
            name1: undefined,
            name2: undefined,
            payeeName1: undefined,
            payeeName2: undefined,
            paymentMethod: undefined,
            phone: undefined,
            remitAddress1: undefined,
            remitAddress2: undefined,
            remitCity: undefined,
            remitCountry: undefined,
            remitEmail: undefined,
            remitState: undefined,
            remitZip: undefined,
            state: undefined,
            vendorStatus: undefined,
            zip: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/Vendor/single/entry")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.vendor.addVendor("entry", {
                vendorNumber: undefined,
                AdditionalData: undefined,
                address1: undefined,
                address2: undefined,
                billingData: undefined,
                city: undefined,
                contacts: undefined,
                country: undefined,
                customField1: undefined,
                customField2: undefined,
                customerVendorAccount: undefined,
                ein: undefined,
                email: undefined,
                internalReferenceId: undefined,
                locationCode: undefined,
                mcc: undefined,
                name1: undefined,
                name2: undefined,
                payeeName1: undefined,
                payeeName2: undefined,
                paymentMethod: undefined,
                phone: undefined,
                remitAddress1: undefined,
                remitAddress2: undefined,
                remitCity: undefined,
                remitCountry: undefined,
                remitEmail: undefined,
                remitState: undefined,
                remitZip: undefined,
                state: undefined,
                vendorStatus: undefined,
                zip: undefined,
            });
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("AddVendor (bf5e651)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            vendorNumber: undefined,
            AdditionalData: undefined,
            address1: undefined,
            address2: undefined,
            billingData: undefined,
            city: undefined,
            contacts: undefined,
            country: undefined,
            customField1: undefined,
            customField2: undefined,
            customerVendorAccount: undefined,
            ein: undefined,
            email: undefined,
            internalReferenceId: undefined,
            locationCode: undefined,
            mcc: undefined,
            name1: undefined,
            name2: undefined,
            payeeName1: undefined,
            payeeName2: undefined,
            paymentMethod: undefined,
            phone: undefined,
            remitAddress1: undefined,
            remitAddress2: undefined,
            remitCity: undefined,
            remitCountry: undefined,
            remitEmail: undefined,
            remitState: undefined,
            remitZip: undefined,
            state: undefined,
            vendorStatus: undefined,
            zip: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/Vendor/single/entry")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.vendor.addVendor("entry", {
                vendorNumber: undefined,
                AdditionalData: undefined,
                address1: undefined,
                address2: undefined,
                billingData: undefined,
                city: undefined,
                contacts: undefined,
                country: undefined,
                customField1: undefined,
                customField2: undefined,
                customerVendorAccount: undefined,
                ein: undefined,
                email: undefined,
                internalReferenceId: undefined,
                locationCode: undefined,
                mcc: undefined,
                name1: undefined,
                name2: undefined,
                payeeName1: undefined,
                payeeName2: undefined,
                paymentMethod: undefined,
                phone: undefined,
                remitAddress1: undefined,
                remitAddress2: undefined,
                remitCity: undefined,
                remitCountry: undefined,
                remitEmail: undefined,
                remitState: undefined,
                remitZip: undefined,
                state: undefined,
                vendorStatus: undefined,
                zip: undefined,
            });
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("AddVendor (76dbbdb)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            vendorNumber: undefined,
            AdditionalData: undefined,
            address1: undefined,
            address2: undefined,
            billingData: undefined,
            city: undefined,
            contacts: undefined,
            country: undefined,
            customField1: undefined,
            customField2: undefined,
            customerVendorAccount: undefined,
            ein: undefined,
            email: undefined,
            internalReferenceId: undefined,
            locationCode: undefined,
            mcc: undefined,
            name1: undefined,
            name2: undefined,
            payeeName1: undefined,
            payeeName2: undefined,
            paymentMethod: undefined,
            phone: undefined,
            remitAddress1: undefined,
            remitAddress2: undefined,
            remitCity: undefined,
            remitCountry: undefined,
            remitEmail: undefined,
            remitState: undefined,
            remitZip: undefined,
            state: undefined,
            vendorStatus: undefined,
            zip: undefined,
        };
        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .post("/Vendor/single/entry")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.vendor.addVendor("entry", {
                vendorNumber: undefined,
                AdditionalData: undefined,
                address1: undefined,
                address2: undefined,
                billingData: undefined,
                city: undefined,
                contacts: undefined,
                country: undefined,
                customField1: undefined,
                customField2: undefined,
                customerVendorAccount: undefined,
                ein: undefined,
                email: undefined,
                internalReferenceId: undefined,
                locationCode: undefined,
                mcc: undefined,
                name1: undefined,
                name2: undefined,
                payeeName1: undefined,
                payeeName2: undefined,
                paymentMethod: undefined,
                phone: undefined,
                remitAddress1: undefined,
                remitAddress2: undefined,
                remitCity: undefined,
                remitCountry: undefined,
                remitEmail: undefined,
                remitState: undefined,
                remitZip: undefined,
                state: undefined,
                vendorStatus: undefined,
                zip: undefined,
            });
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("DeleteVendor (33918730)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: true, responseCode: 1, responseData: 3890, responseText: "Success" };
        server.mockEndpoint().delete("/Vendor/1").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.vendor.deleteVendor(1);
        expect(response).toEqual({
            isSuccess: true,
            responseCode: 1,
            responseData: 3890,
            responseText: "Success",
        });
    });

    test("DeleteVendor (5dd76e6)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().delete("/Vendor/1").respondWith().statusCode(400).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.vendor.deleteVendor(1);
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("DeleteVendor (8ea55d4e)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().delete("/Vendor/1").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.vendor.deleteVendor(1);
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("DeleteVendor (101b23f2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().delete("/Vendor/1").respondWith().statusCode(500).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.vendor.deleteVendor(1);
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("DeleteVendor (a6282adc)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server.mockEndpoint().delete("/Vendor/1").respondWith().statusCode(503).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.vendor.deleteVendor(1);
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("EditVendor (Update `name1` field)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { name1: "Theodore's Janitorial" };
        const rawResponseBody = { isSuccess: true, responseCode: 1, responseData: 3890, responseText: "Success" };
        server
            .mockEndpoint()
            .put("/Vendor/1")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.vendor.editVendor(1, {
            name1: "Theodore's Janitorial",
        });
        expect(response).toEqual({
            isSuccess: true,
            responseCode: 1,
            responseData: 3890,
            responseText: "Success",
        });
    });

    test("EditVendor (6cd8eec7)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            vendorNumber: undefined,
            AdditionalData: undefined,
            address1: undefined,
            address2: undefined,
            billingData: undefined,
            city: undefined,
            contacts: undefined,
            country: undefined,
            customField1: undefined,
            customField2: undefined,
            customerVendorAccount: undefined,
            ein: undefined,
            email: undefined,
            internalReferenceId: undefined,
            locationCode: undefined,
            mcc: undefined,
            name1: undefined,
            name2: undefined,
            payeeName1: undefined,
            payeeName2: undefined,
            paymentMethod: undefined,
            phone: undefined,
            remitAddress1: undefined,
            remitAddress2: undefined,
            remitCity: undefined,
            remitCountry: undefined,
            remitEmail: undefined,
            remitState: undefined,
            remitZip: undefined,
            state: undefined,
            vendorStatus: undefined,
            zip: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/Vendor/1")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.vendor.editVendor(1, {
                vendorNumber: undefined,
                AdditionalData: undefined,
                address1: undefined,
                address2: undefined,
                billingData: undefined,
                city: undefined,
                contacts: undefined,
                country: undefined,
                customField1: undefined,
                customField2: undefined,
                customerVendorAccount: undefined,
                ein: undefined,
                email: undefined,
                internalReferenceId: undefined,
                locationCode: undefined,
                mcc: undefined,
                name1: undefined,
                name2: undefined,
                payeeName1: undefined,
                payeeName2: undefined,
                paymentMethod: undefined,
                phone: undefined,
                remitAddress1: undefined,
                remitAddress2: undefined,
                remitCity: undefined,
                remitCountry: undefined,
                remitEmail: undefined,
                remitState: undefined,
                remitZip: undefined,
                state: undefined,
                vendorStatus: undefined,
                zip: undefined,
            });
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("EditVendor (a488a4d7)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            vendorNumber: undefined,
            AdditionalData: undefined,
            address1: undefined,
            address2: undefined,
            billingData: undefined,
            city: undefined,
            contacts: undefined,
            country: undefined,
            customField1: undefined,
            customField2: undefined,
            customerVendorAccount: undefined,
            ein: undefined,
            email: undefined,
            internalReferenceId: undefined,
            locationCode: undefined,
            mcc: undefined,
            name1: undefined,
            name2: undefined,
            payeeName1: undefined,
            payeeName2: undefined,
            paymentMethod: undefined,
            phone: undefined,
            remitAddress1: undefined,
            remitAddress2: undefined,
            remitCity: undefined,
            remitCountry: undefined,
            remitEmail: undefined,
            remitState: undefined,
            remitZip: undefined,
            state: undefined,
            vendorStatus: undefined,
            zip: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/Vendor/1")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.vendor.editVendor(1, {
                vendorNumber: undefined,
                AdditionalData: undefined,
                address1: undefined,
                address2: undefined,
                billingData: undefined,
                city: undefined,
                contacts: undefined,
                country: undefined,
                customField1: undefined,
                customField2: undefined,
                customerVendorAccount: undefined,
                ein: undefined,
                email: undefined,
                internalReferenceId: undefined,
                locationCode: undefined,
                mcc: undefined,
                name1: undefined,
                name2: undefined,
                payeeName1: undefined,
                payeeName2: undefined,
                paymentMethod: undefined,
                phone: undefined,
                remitAddress1: undefined,
                remitAddress2: undefined,
                remitCity: undefined,
                remitCountry: undefined,
                remitEmail: undefined,
                remitState: undefined,
                remitZip: undefined,
                state: undefined,
                vendorStatus: undefined,
                zip: undefined,
            });
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("EditVendor (7b2e84d3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            vendorNumber: undefined,
            AdditionalData: undefined,
            address1: undefined,
            address2: undefined,
            billingData: undefined,
            city: undefined,
            contacts: undefined,
            country: undefined,
            customField1: undefined,
            customField2: undefined,
            customerVendorAccount: undefined,
            ein: undefined,
            email: undefined,
            internalReferenceId: undefined,
            locationCode: undefined,
            mcc: undefined,
            name1: undefined,
            name2: undefined,
            payeeName1: undefined,
            payeeName2: undefined,
            paymentMethod: undefined,
            phone: undefined,
            remitAddress1: undefined,
            remitAddress2: undefined,
            remitCity: undefined,
            remitCountry: undefined,
            remitEmail: undefined,
            remitState: undefined,
            remitZip: undefined,
            state: undefined,
            vendorStatus: undefined,
            zip: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/Vendor/1")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.vendor.editVendor(1, {
                vendorNumber: undefined,
                AdditionalData: undefined,
                address1: undefined,
                address2: undefined,
                billingData: undefined,
                city: undefined,
                contacts: undefined,
                country: undefined,
                customField1: undefined,
                customField2: undefined,
                customerVendorAccount: undefined,
                ein: undefined,
                email: undefined,
                internalReferenceId: undefined,
                locationCode: undefined,
                mcc: undefined,
                name1: undefined,
                name2: undefined,
                payeeName1: undefined,
                payeeName2: undefined,
                paymentMethod: undefined,
                phone: undefined,
                remitAddress1: undefined,
                remitAddress2: undefined,
                remitCity: undefined,
                remitCountry: undefined,
                remitEmail: undefined,
                remitState: undefined,
                remitZip: undefined,
                state: undefined,
                vendorStatus: undefined,
                zip: undefined,
            });
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("EditVendor (abb405e9)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            vendorNumber: undefined,
            AdditionalData: undefined,
            address1: undefined,
            address2: undefined,
            billingData: undefined,
            city: undefined,
            contacts: undefined,
            country: undefined,
            customField1: undefined,
            customField2: undefined,
            customerVendorAccount: undefined,
            ein: undefined,
            email: undefined,
            internalReferenceId: undefined,
            locationCode: undefined,
            mcc: undefined,
            name1: undefined,
            name2: undefined,
            payeeName1: undefined,
            payeeName2: undefined,
            paymentMethod: undefined,
            phone: undefined,
            remitAddress1: undefined,
            remitAddress2: undefined,
            remitCity: undefined,
            remitCountry: undefined,
            remitEmail: undefined,
            remitState: undefined,
            remitZip: undefined,
            state: undefined,
            vendorStatus: undefined,
            zip: undefined,
        };
        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .put("/Vendor/1")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.vendor.editVendor(1, {
                vendorNumber: undefined,
                AdditionalData: undefined,
                address1: undefined,
                address2: undefined,
                billingData: undefined,
                city: undefined,
                contacts: undefined,
                country: undefined,
                customField1: undefined,
                customField2: undefined,
                customerVendorAccount: undefined,
                ein: undefined,
                email: undefined,
                internalReferenceId: undefined,
                locationCode: undefined,
                mcc: undefined,
                name1: undefined,
                name2: undefined,
                payeeName1: undefined,
                payeeName2: undefined,
                paymentMethod: undefined,
                phone: undefined,
                remitAddress1: undefined,
                remitAddress2: undefined,
                remitCity: undefined,
                remitCountry: undefined,
                remitEmail: undefined,
                remitState: undefined,
                remitZip: undefined,
                state: undefined,
                vendorStatus: undefined,
                zip: undefined,
            });
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("GetVendor (GetVendor)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            VendorNumber: "1234",
            Name1: "Herman's Coatings",
            Name2: "Herman's Coating Supply Company, LLC",
            EIN: "123456789",
            Phone: "212-555-1234",
            Email: "example@email.com",
            RemitEmail: undefined,
            Address1: "123 Ocean Drive",
            Address2: "Suite 400",
            City: "Bristol",
            State: "GA",
            Zip: "31113",
            Country: "US",
            Mcc: "7777",
            LocationCode: "LOC123",
            Contacts: {
                ContactEmail: "eric@martinezcoatings.com",
                ContactName: "Eric Martinez",
                ContactPhone: "5555555555",
                ContactTitle: "Owner",
            },
            BillingData: {
                id: 123456,
                accountId: "bank-account-001",
                nickname: "Main Checking Account",
                bankName: "Example Bank",
                routingAccount: "123456789",
                accountNumber: "9876543210",
                typeAccount: "Checking",
                bankAccountHolderName: "John Doe",
                bankAccountHolderType: "Business",
                bankAccountFunction: 2,
                verified: true,
                status: 1,
                services: [],
                default: true,
            },
            PaymentMethod: undefined,
            VendorStatus: 1,
            VendorId: 1,
            EnrollmentStatus: undefined,
            Summary: {
                ActiveBills: 2,
                PendingBills: 4,
                InTransitBills: 3,
                PaidBills: 18,
                OverdueBills: 1,
                ApprovedBills: 5,
                DisapprovedBills: 1,
                TotalBills: 34,
                ActiveBillsAmount: 1250.75,
                PendingBillsAmount: 2890.5,
                InTransitBillsAmount: 1675.25,
                PaidBillsAmount: 15420.8,
                OverdueBillsAmount: 425,
                ApprovedBillsAmount: 3240.9,
                DisapprovedBillsAmount: 180,
                TotalBillsAmount: 25083.2,
            },
            PaypointLegalname: "Sunshine Services, LLC",
            PaypointDbaname: "Sunshine Gutters",
            PaypointEntryname: "d193cf9a46",
            ParentOrgName: "PropertyManager Pro",
            ParentOrgId: 1000,
            CreatedDate: "2022-07-01T15:00:01Z",
            LastUpdated: "2022-07-01T15:00:01Z",
            remitAddress1: "123 Walnut Street",
            remitAddress2: "Suite 900",
            remitCity: "Miami",
            remitState: "FL",
            remitZip: "31113",
            remitCountry: "US",
            payeeName1: "payeeName1",
            payeeName2: "payeeName2",
            customField1: "",
            customField2: "",
            customerVendorAccount: "123-456",
            InternalReferenceId: 1000000,
            additionalData: undefined,
            externalPaypointID: "Paypoint-100",
            StoredMethods: [],
        };
        server.mockEndpoint().get("/Vendor/1").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.vendor.getVendor(1);
        expect(response).toEqual({
            VendorNumber: "1234",
            Name1: "Herman's Coatings",
            Name2: "Herman's Coating Supply Company, LLC",
            EIN: "123456789",
            Phone: "212-555-1234",
            Email: "example@email.com",
            RemitEmail: undefined,
            Address1: "123 Ocean Drive",
            Address2: "Suite 400",
            City: "Bristol",
            State: "GA",
            Zip: "31113",
            Country: "US",
            Mcc: "7777",
            LocationCode: "LOC123",
            Contacts: {
                ContactEmail: "eric@martinezcoatings.com",
                ContactName: "Eric Martinez",
                ContactPhone: "5555555555",
                ContactTitle: "Owner",
            },
            BillingData: {
                id: 123456,
                accountId: "bank-account-001",
                nickname: "Main Checking Account",
                bankName: "Example Bank",
                routingAccount: "123456789",
                accountNumber: "9876543210",
                typeAccount: "Checking",
                bankAccountHolderName: "John Doe",
                bankAccountHolderType: "Business",
                bankAccountFunction: 2,
                verified: true,
                status: 1,
                services: [],
                default: true,
            },
            PaymentMethod: undefined,
            VendorStatus: 1,
            VendorId: 1,
            EnrollmentStatus: undefined,
            Summary: {
                ActiveBills: 2,
                PendingBills: 4,
                InTransitBills: 3,
                PaidBills: 18,
                OverdueBills: 1,
                ApprovedBills: 5,
                DisapprovedBills: 1,
                TotalBills: 34,
                ActiveBillsAmount: 1250.75,
                PendingBillsAmount: 2890.5,
                InTransitBillsAmount: 1675.25,
                PaidBillsAmount: 15420.8,
                OverdueBillsAmount: 425,
                ApprovedBillsAmount: 3240.9,
                DisapprovedBillsAmount: 180,
                TotalBillsAmount: 25083.2,
            },
            PaypointLegalname: "Sunshine Services, LLC",
            PaypointDbaname: "Sunshine Gutters",
            PaypointEntryname: "d193cf9a46",
            ParentOrgName: "PropertyManager Pro",
            ParentOrgId: 1000,
            CreatedDate: "2022-07-01T15:00:01Z",
            LastUpdated: "2022-07-01T15:00:01Z",
            remitAddress1: "123 Walnut Street",
            remitAddress2: "Suite 900",
            remitCity: "Miami",
            remitState: "FL",
            remitZip: "31113",
            remitCountry: "US",
            payeeName1: "payeeName1",
            payeeName2: "payeeName2",
            customField1: "",
            customField2: "",
            customerVendorAccount: "123-456",
            InternalReferenceId: 1000000,
            additionalData: undefined,
            externalPaypointID: "Paypoint-100",
            StoredMethods: [],
        });
    });

    test("GetVendor (5dd76e6)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/Vendor/1").respondWith().statusCode(400).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.vendor.getVendor(1);
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("GetVendor (8ea55d4e)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/Vendor/1").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.vendor.getVendor(1);
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("GetVendor (101b23f2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/Vendor/1").respondWith().statusCode(500).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.vendor.getVendor(1);
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("GetVendor (a6282adc)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server.mockEndpoint().get("/Vendor/1").respondWith().statusCode(503).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.vendor.getVendor(1);
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });
});
