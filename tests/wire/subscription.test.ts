/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { PayabliClient } from "../../src/Client";
import * as Payabli from "../../src/api/index";

describe("Subscription", () => {
    test("GetSubscription (GetSubscription)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            CreatedAt: "2022-07-01T15:00:01Z",
            Customer: {
                AdditionalData: "AdditionalData",
                BillingAddress1: "1111 West 1st Street",
                BillingAddress2: "Suite 200",
                BillingCity: "Miami",
                BillingCountry: "US",
                BillingEmail: "example@email.com",
                BillingPhone: "5555555555",
                BillingState: "FL",
                BillingZip: "45567",
                CompanyName: "Sunshine LLC",
                customerId: 4440,
                CustomerNumber: "3456-7645A",
                customerStatus: 1,
                FirstName: "John",
                Identifiers: ['\\"firstname\\"', '\\"lastname\\"', '\\"email\\"', '\\"customId\\"'],
                LastName: "Doe",
                ShippingAddress1: "123 Walnut St",
                ShippingAddress2: "STE 900",
                ShippingCity: "Johnson City",
                ShippingCountry: "US",
                ShippingState: "TN",
                ShippingZip: "37619",
            },
            EndDate: "2025-10-19T00:00:00Z",
            EntrypageId: 0,
            ExternalPaypointID: "Paypoint-100",
            FeeAmount: 3,
            Frequency: "monthly",
            IdSub: 396,
            InvoiceData: {
                AdditionalData: "AdditionalData",
                attachments: [{}],
                company: "ACME, INC",
                discount: 10,
                dutyAmount: 0,
                firstName: "Chad",
                freightAmount: 10,
                frequency: "one-time",
                invoiceAmount: 105,
                invoiceDate: "2025-07-01",
                invoiceDueDate: "2025-07-01",
                invoiceEndDate: "2025-07-01",
                invoiceNumber: "INV-2345",
                invoiceStatus: 1,
                invoiceType: 0,
                items: [{ itemCost: 5, itemProductName: "Materials deposit", itemQty: 1 }],
                lastName: "Mercia",
                notes: "Example notes.",
                paymentTerms: "PIA",
                purchaseOrder: "PO-345",
                shippingAddress1: "123 Walnut St",
                shippingAddress2: "STE 900",
                shippingCity: "Johnson City",
                shippingCountry: "US",
                shippingEmail: "example@email.com",
                shippingFromZip: "30040",
                shippingPhone: "5555555555",
                shippingState: "TN",
                shippingZip: "37619",
                summaryCommodityCode: "501718",
                tax: 2.05,
                termsConditions: "Must be paid before work scheduled.",
            },
            LastRun: "2025-10-19T00:00:00Z",
            LastUpdated: "2022-07-01T15:00:01Z",
            LeftCycles: 15,
            Method: "card",
            NetAmount: 3762.87,
            NextDate: "2025-10-19T00:00:00Z",
            ParentOrgName: "PropertyManager Pro",
            PaymentData: {
                AccountExp: "11/29",
                accountId: "accountId",
                AccountType: "visa",
                AccountZip: "90210",
                binData: {
                    binMatchedLength: "6",
                    binCardBrand: "Visa",
                    binCardType: "Credit",
                    binCardCategory: "PLATINUM",
                    binCardIssuer: "Bank of Example",
                    binCardIssuerCountry: "United States",
                    binCardIssuerCountryCodeA2: "US",
                    binCardIssuerCountryNumber: "840",
                    binCardIsRegulated: "false",
                    binCardUseCategory: "Consumer",
                    binCardIssuerCountryCodeA3: "USA",
                },
                HolderName: "Chad Mercia",
                Initiator: "payor",
                MaskedAccount: "4XXXXXXXX1111",
                orderDescription: "Depost for materials for 123 Walnut St",
                paymentDetails: {
                    categories: [{ amount: 1000, label: "Deposit" }],
                    checkImage: { key: "value" },
                    checkNumber: "107",
                    currency: "USD",
                    serviceFee: 0,
                    splitFunding: [{}],
                    totalAmount: 100,
                },
                Sequence: "subsequent",
                SignatureData: "SignatureData",
                StoredId: "1ec55af9-7b5a-4ff0-81ed-c12d2f95e135-4440",
                StoredMethodUsageType: "subscription",
            },
            PaypointDbaname: "Sunshine Gutters",
            PaypointEntryname: "d193cf9a46",
            PaypointId: 255,
            PaypointLegalname: "Sunshine Services, LLC",
            PlanId: 0,
            Source: "api",
            StartDate: "2025-10-19T00:00:00Z",
            SubEvents: [
                {
                    description: "TransferCreated",
                    eventTime: "2023-07-05T22:31:06Z",
                    extraData: { key: "value" },
                    refData: "refData",
                    source: "api",
                },
            ],
            SubStatus: 1,
            TotalAmount: 103,
            TotalCycles: 24,
            UntilCancelled: true,
        };
        server.mockEndpoint().get("/Subscription/263").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.subscription.getSubscription(263);
        expect(response).toEqual({
            CreatedAt: "2022-07-01T15:00:01Z",
            Customer: {
                AdditionalData: "AdditionalData",
                BillingAddress1: "1111 West 1st Street",
                BillingAddress2: "Suite 200",
                BillingCity: "Miami",
                BillingCountry: "US",
                BillingEmail: "example@email.com",
                BillingPhone: "5555555555",
                BillingState: "FL",
                BillingZip: "45567",
                CompanyName: "Sunshine LLC",
                customerId: 4440,
                CustomerNumber: "3456-7645A",
                customerStatus: 1,
                FirstName: "John",
                Identifiers: ['\\"firstname\\"', '\\"lastname\\"', '\\"email\\"', '\\"customId\\"'],
                LastName: "Doe",
                ShippingAddress1: "123 Walnut St",
                ShippingAddress2: "STE 900",
                ShippingCity: "Johnson City",
                ShippingCountry: "US",
                ShippingState: "TN",
                ShippingZip: "37619",
            },
            EndDate: "2025-10-19T00:00:00Z",
            EntrypageId: 0,
            ExternalPaypointID: "Paypoint-100",
            FeeAmount: 3,
            Frequency: "monthly",
            IdSub: 396,
            InvoiceData: {
                AdditionalData: "AdditionalData",
                attachments: [{}],
                company: "ACME, INC",
                discount: 10,
                dutyAmount: 0,
                firstName: "Chad",
                freightAmount: 10,
                frequency: "one-time",
                invoiceAmount: 105,
                invoiceDate: "2025-07-01",
                invoiceDueDate: "2025-07-01",
                invoiceEndDate: "2025-07-01",
                invoiceNumber: "INV-2345",
                invoiceStatus: 1,
                invoiceType: 0,
                items: [
                    {
                        itemCost: 5,
                        itemProductName: "Materials deposit",
                        itemQty: 1,
                    },
                ],
                lastName: "Mercia",
                notes: "Example notes.",
                paymentTerms: "PIA",
                purchaseOrder: "PO-345",
                shippingAddress1: "123 Walnut St",
                shippingAddress2: "STE 900",
                shippingCity: "Johnson City",
                shippingCountry: "US",
                shippingEmail: "example@email.com",
                shippingFromZip: "30040",
                shippingPhone: "5555555555",
                shippingState: "TN",
                shippingZip: "37619",
                summaryCommodityCode: "501718",
                tax: 2.05,
                termsConditions: "Must be paid before work scheduled.",
            },
            LastRun: "2025-10-19T00:00:00Z",
            LastUpdated: "2022-07-01T15:00:01Z",
            LeftCycles: 15,
            Method: "card",
            NetAmount: 3762.87,
            NextDate: "2025-10-19T00:00:00Z",
            ParentOrgName: "PropertyManager Pro",
            PaymentData: {
                AccountExp: "11/29",
                accountId: "accountId",
                AccountType: "visa",
                AccountZip: "90210",
                binData: {
                    binMatchedLength: "6",
                    binCardBrand: "Visa",
                    binCardType: "Credit",
                    binCardCategory: "PLATINUM",
                    binCardIssuer: "Bank of Example",
                    binCardIssuerCountry: "United States",
                    binCardIssuerCountryCodeA2: "US",
                    binCardIssuerCountryNumber: "840",
                    binCardIsRegulated: "false",
                    binCardUseCategory: "Consumer",
                    binCardIssuerCountryCodeA3: "USA",
                },
                HolderName: "Chad Mercia",
                Initiator: "payor",
                MaskedAccount: "4XXXXXXXX1111",
                orderDescription: "Depost for materials for 123 Walnut St",
                paymentDetails: {
                    categories: [
                        {
                            amount: 1000,
                            label: "Deposit",
                        },
                    ],
                    checkImage: {
                        key: "value",
                    },
                    checkNumber: "107",
                    currency: "USD",
                    serviceFee: 0,
                    splitFunding: [{}],
                    totalAmount: 100,
                },
                Sequence: "subsequent",
                SignatureData: "SignatureData",
                StoredId: "1ec55af9-7b5a-4ff0-81ed-c12d2f95e135-4440",
                StoredMethodUsageType: "subscription",
            },
            PaypointDbaname: "Sunshine Gutters",
            PaypointEntryname: "d193cf9a46",
            PaypointId: 255,
            PaypointLegalname: "Sunshine Services, LLC",
            PlanId: 0,
            Source: "api",
            StartDate: "2025-10-19T00:00:00Z",
            SubEvents: [
                {
                    description: "TransferCreated",
                    eventTime: "2023-07-05T22:31:06Z",
                    extraData: {
                        key: "value",
                    },
                    refData: "refData",
                    source: "api",
                },
            ],
            SubStatus: 1,
            TotalAmount: 103,
            TotalCycles: 24,
            UntilCancelled: true,
        });
    });

    test("GetSubscription (f8000160)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/Subscription/1").respondWith().statusCode(400).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.subscription.getSubscription(1);
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("GetSubscription (15615248)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/Subscription/1").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.subscription.getSubscription(1);
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("GetSubscription (709f9bdc)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/Subscription/1").respondWith().statusCode(500).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.subscription.getSubscription(1);
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("GetSubscription (56c310e2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server.mockEndpoint().get("/Subscription/1").respondWith().statusCode(503).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.subscription.getSubscription(1);
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("NewSubscription (CardSubscription)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            customerData: { customerId: 4440 },
            entryPoint: "f743aed24a",
            paymentDetails: { serviceFee: 0, totalAmount: 100 },
            paymentMethod: {
                cardcvv: "123",
                cardexp: "02/25",
                cardHolder: "John Cassian",
                cardnumber: "4111111111111111",
                cardzip: "37615",
                initiator: "payor",
                method: "card",
            },
            scheduleDetails: { endDate: "03-20-2025", frequency: "weekly", planId: 1, startDate: "09-20-2024" },
        };
        const rawResponseBody = { responseText: "Success", isSuccess: true, responseData: 396, customerId: 4440 };
        server
            .mockEndpoint()
            .post("/Subscription/add")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.subscription.newSubscription({
            body: {
                customerData: {
                    customerId: 4440,
                },
                entryPoint: "f743aed24a",
                paymentDetails: {
                    serviceFee: 0,
                    totalAmount: 100,
                },
                paymentMethod: {
                    cardcvv: "123",
                    cardexp: "02/25",
                    cardHolder: "John Cassian",
                    cardnumber: "4111111111111111",
                    cardzip: "37615",
                    initiator: "payor",
                    method: "card",
                },
                scheduleDetails: {
                    endDate: "03-20-2025",
                    frequency: "weekly",
                    planId: 1,
                    startDate: "09-20-2024",
                },
            },
        });
        expect(response).toEqual({
            responseText: "Success",
            isSuccess: true,
            responseData: 396,
            customerId: 4440,
        });
    });

    test("NewSubscription (ACHSubscription)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            customerData: { customerId: 4440 },
            entryPoint: "f743aed24a",
            paymentDetails: { serviceFee: 0, totalAmount: 100 },
            paymentMethod: {
                achAccount: "3453445666",
                achAccountType: "Checking",
                achCode: "PPD",
                achHolder: "John Cassian",
                achHolderType: "personal",
                achRouting: "021000021",
                method: "ach",
            },
            scheduleDetails: { endDate: "03-20-2025", frequency: "weekly", planId: 1, startDate: "09-20-2024" },
        };
        const rawResponseBody = { responseText: "Success", isSuccess: true, responseData: 396, customerId: 4440 };
        server
            .mockEndpoint()
            .post("/Subscription/add")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.subscription.newSubscription({
            body: {
                customerData: {
                    customerId: 4440,
                },
                entryPoint: "f743aed24a",
                paymentDetails: {
                    serviceFee: 0,
                    totalAmount: 100,
                },
                paymentMethod: {
                    achAccount: "3453445666",
                    achAccountType: "Checking",
                    achCode: "PPD",
                    achHolder: "John Cassian",
                    achHolderType: "personal",
                    achRouting: "021000021",
                    method: "ach",
                },
                scheduleDetails: {
                    endDate: "03-20-2025",
                    frequency: "weekly",
                    planId: 1,
                    startDate: "09-20-2024",
                },
            },
        });
        expect(response).toEqual({
            responseText: "Success",
            isSuccess: true,
            responseData: 396,
            customerId: 4440,
        });
    });

    test("NewSubscription (StoredMethodSubscription)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            customerData: { customerId: 4440 },
            entryPoint: "f743aed24a",
            paymentDetails: { serviceFee: 0, totalAmount: 100 },
            paymentMethod: {
                initiator: "merchant",
                storedMethodId: "4000e8c6-3add-4200-8ac2-9b8a4f8b1639-1323",
                storedMethodUsageType: "recurring",
            },
            scheduleDetails: { endDate: "03-20-2025", frequency: "weekly", planId: 1, startDate: "09-20-2024" },
        };
        const rawResponseBody = { responseText: "Success", isSuccess: true, responseData: 396, customerId: 4440 };
        server
            .mockEndpoint()
            .post("/Subscription/add")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.subscription.newSubscription({
            body: {
                customerData: {
                    customerId: 4440,
                },
                entryPoint: "f743aed24a",
                paymentDetails: {
                    serviceFee: 0,
                    totalAmount: 100,
                },
                paymentMethod: {
                    initiator: "merchant",
                    storedMethodId: "4000e8c6-3add-4200-8ac2-9b8a4f8b1639-1323",
                    storedMethodUsageType: "recurring",
                },
                scheduleDetails: {
                    endDate: "03-20-2025",
                    frequency: "weekly",
                    planId: 1,
                    startDate: "09-20-2024",
                },
            },
        });
        expect(response).toEqual({
            responseText: "Success",
            isSuccess: true,
            responseData: 396,
            customerId: 4440,
        });
    });

    test("NewSubscription (64a66439)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            customerData: undefined,
            entryPoint: undefined,
            invoiceData: undefined,
            paymentDetails: undefined,
            paymentMethod: undefined,
            scheduleDetails: undefined,
            setPause: undefined,
            source: undefined,
            subdomain: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/Subscription/add")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.subscription.newSubscription({
                body: {
                    customerData: undefined,
                    entryPoint: undefined,
                    invoiceData: undefined,
                    paymentDetails: undefined,
                    paymentMethod: undefined,
                    scheduleDetails: undefined,
                    setPause: undefined,
                    source: undefined,
                    subdomain: undefined,
                },
            });
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("NewSubscription (9a3cead9)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            customerData: undefined,
            entryPoint: undefined,
            invoiceData: undefined,
            paymentDetails: undefined,
            paymentMethod: undefined,
            scheduleDetails: undefined,
            setPause: undefined,
            source: undefined,
            subdomain: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/Subscription/add")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.subscription.newSubscription({
                body: {
                    customerData: undefined,
                    entryPoint: undefined,
                    invoiceData: undefined,
                    paymentDetails: undefined,
                    paymentMethod: undefined,
                    scheduleDetails: undefined,
                    setPause: undefined,
                    source: undefined,
                    subdomain: undefined,
                },
            });
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("NewSubscription (91635b05)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            customerData: undefined,
            entryPoint: undefined,
            invoiceData: undefined,
            paymentDetails: undefined,
            paymentMethod: undefined,
            scheduleDetails: undefined,
            setPause: undefined,
            source: undefined,
            subdomain: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/Subscription/add")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.subscription.newSubscription({
                body: {
                    customerData: undefined,
                    entryPoint: undefined,
                    invoiceData: undefined,
                    paymentDetails: undefined,
                    paymentMethod: undefined,
                    scheduleDetails: undefined,
                    setPause: undefined,
                    source: undefined,
                    subdomain: undefined,
                },
            });
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("NewSubscription (d26df2ff)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            customerData: undefined,
            entryPoint: undefined,
            invoiceData: undefined,
            paymentDetails: undefined,
            paymentMethod: undefined,
            scheduleDetails: undefined,
            setPause: undefined,
            source: undefined,
            subdomain: undefined,
        };
        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .post("/Subscription/add")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.subscription.newSubscription({
                body: {
                    customerData: undefined,
                    entryPoint: undefined,
                    invoiceData: undefined,
                    paymentDetails: undefined,
                    paymentMethod: undefined,
                    scheduleDetails: undefined,
                    setPause: undefined,
                    source: undefined,
                    subdomain: undefined,
                },
            });
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("RemoveSubscription (DeleteSubscription)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: true, responseData: "396", responseText: "Success" };
        server
            .mockEndpoint()
            .delete("/Subscription/396")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.subscription.removeSubscription(396);
        expect(response).toEqual({
            isSuccess: true,
            responseData: "396",
            responseText: "Success",
        });
    });

    test("RemoveSubscription (f8000160)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().delete("/Subscription/1").respondWith().statusCode(400).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.subscription.removeSubscription(1);
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("RemoveSubscription (15615248)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().delete("/Subscription/1").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.subscription.removeSubscription(1);
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("RemoveSubscription (709f9bdc)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().delete("/Subscription/1").respondWith().statusCode(500).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.subscription.removeSubscription(1);
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("RemoveSubscription (56c310e2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server.mockEndpoint().delete("/Subscription/1").respondWith().statusCode(503).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.subscription.removeSubscription(1);
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });

    test("UpdateSubscription (PauseSubscription)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { setPause: true };
        const rawResponseBody = {
            responseText: "Success",
            isSuccess: true,
            responseData: "396 paused",
            customerId: 4440,
        };
        server
            .mockEndpoint()
            .put("/Subscription/231")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.subscription.updateSubscription(231, {
            setPause: true,
        });
        expect(response).toEqual({
            responseText: "Success",
            isSuccess: true,
            responseData: "396 paused",
            customerId: 4440,
        });
    });

    test("UpdateSubscription (UnpauseSubscription)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { setPause: false };
        const rawResponseBody = {
            responseText: "Success",
            isSuccess: true,
            responseData: "396 unpaused",
            customerId: 4440,
        };
        server
            .mockEndpoint()
            .put("/Subscription/231")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.subscription.updateSubscription(231, {
            setPause: false,
        });
        expect(response).toEqual({
            responseText: "Success",
            isSuccess: true,
            responseData: "396 unpaused",
            customerId: 4440,
        });
    });

    test("UpdateSubscription (UpdateSubscription)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            paymentDetails: { serviceFee: 0, totalAmount: 100 },
            scheduleDetails: { endDate: "03-20-2025", frequency: "weekly", planId: 1, startDate: "09-20-2024" },
        };
        const rawResponseBody = {
            responseText: "Success",
            isSuccess: true,
            responseData: "396 updated",
            customerId: 4440,
        };
        server
            .mockEndpoint()
            .put("/Subscription/231")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.subscription.updateSubscription(231, {
            paymentDetails: {
                serviceFee: 0,
                totalAmount: 100,
            },
            scheduleDetails: {
                endDate: "03-20-2025",
                frequency: "weekly",
                planId: 1,
                startDate: "09-20-2024",
            },
        });
        expect(response).toEqual({
            responseText: "Success",
            isSuccess: true,
            responseData: "396 updated",
            customerId: 4440,
        });
    });

    test("UpdateSubscription (4385928a)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { paymentDetails: undefined, scheduleDetails: undefined, setPause: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/Subscription/1")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.subscription.updateSubscription(1, {
                paymentDetails: undefined,
                scheduleDetails: undefined,
                setPause: undefined,
            });
        }).rejects.toThrow(
            new Payabli.BadRequestError({
                key: "value",
            }),
        );
    });

    test("UpdateSubscription (3c9d56e2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { paymentDetails: undefined, scheduleDetails: undefined, setPause: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/Subscription/1")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.subscription.updateSubscription(1, {
                paymentDetails: undefined,
                scheduleDetails: undefined,
                setPause: undefined,
            });
        }).rejects.toThrow(
            new Payabli.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("UpdateSubscription (ae409496)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { paymentDetails: undefined, scheduleDetails: undefined, setPause: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/Subscription/1")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.subscription.updateSubscription(1, {
                paymentDetails: undefined,
                scheduleDetails: undefined,
                setPause: undefined,
            });
        }).rejects.toThrow(
            new Payabli.InternalServerError({
                key: "value",
            }),
        );
    });

    test("UpdateSubscription (6a57e3f0)", async () => {
        const server = mockServerPool.createServer();
        const client = new PayabliClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { paymentDetails: undefined, scheduleDetails: undefined, setPause: undefined };
        const rawResponseBody = { isSuccess: undefined, responseData: undefined, responseText: undefined };
        server
            .mockEndpoint()
            .put("/Subscription/1")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.subscription.updateSubscription(1, {
                paymentDetails: undefined,
                scheduleDetails: undefined,
                setPause: undefined,
            });
        }).rejects.toThrow(
            new Payabli.ServiceUnavailableError({
                isSuccess: undefined,
                responseData: undefined,
                responseText: undefined,
            }),
        );
    });
});
