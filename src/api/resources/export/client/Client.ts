/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as Payabli from "../../../index.js";
import { toJson } from "../../../../core/json.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";

export declare namespace Export {
    export interface Options {
        environment?: core.Supplier<environments.PayabliEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey?: core.Supplier<string | undefined>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class Export {
    protected readonly _options: Export.Options;

    constructor(_options: Export.Options = {}) {
        this._options = _options;
    }

    /**
     * Export a list of boarding applications for an organization. Use filters to limit results.
     *
     * @param {Payabli.ExportFormat1} format - Format for the export, either XLSX or CSV.
     * @param {number} orgId - The numeric identifier for organization, assigned by Payabli.
     * @param {Payabli.ExportApplicationsRequest} request
     * @param {Export.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Payabli.BadRequestError}
     * @throws {@link Payabli.UnauthorizedError}
     * @throws {@link Payabli.InternalServerError}
     * @throws {@link Payabli.ServiceUnavailableError}
     *
     * @example
     *     await client.export.exportApplications("csv", 123, {
     *         columnsExport: "BatchDate:Batch_Date,PaypointName:Legal_name",
     *         fromRecord: 251,
     *         limitRecord: 1000
     *     })
     */
    public exportApplications(
        format: Payabli.ExportFormat1,
        orgId: number,
        request: Payabli.ExportApplicationsRequest = {},
        requestOptions?: Export.RequestOptions,
    ): core.HttpResponsePromise<Payabli.File_> {
        return core.HttpResponsePromise.fromPromise(this.__exportApplications(format, orgId, request, requestOptions));
    }

    private async __exportApplications(
        format: Payabli.ExportFormat1,
        orgId: number,
        request: Payabli.ExportApplicationsRequest = {},
        requestOptions?: Export.RequestOptions,
    ): Promise<core.WithRawResponse<Payabli.File_>> {
        const { columnsExport, fromRecord, limitRecord, parameters } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (columnsExport != null) {
            _queryParams["columnsExport"] = columnsExport;
        }

        if (fromRecord != null) {
            _queryParams["fromRecord"] = fromRecord.toString();
        }

        if (limitRecord != null) {
            _queryParams["limitRecord"] = limitRecord.toString();
        }

        if (parameters != null) {
            _queryParams["parameters"] = toJson(parameters);
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PayabliEnvironment.Sandbox,
                `Export/boarding/${encodeURIComponent(format)}/${encodeURIComponent(orgId)}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Payabli.File_, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Payabli.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Payabli.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Payabli.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Payabli.ServiceUnavailableError(
                        _response.error.body as Payabli.PayabliApiResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.PayabliError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PayabliError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PayabliTimeoutError(
                    "Timeout exceeded when calling GET /Export/boarding/{format}/{orgId}.",
                );
            case "unknown":
                throw new errors.PayabliError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {string} entry - The paypoint's entrypoint identifier. [Learn more](/api-reference/api-overview#entrypoint-vs-entry)
     * @param {Payabli.ExportFormat1} format - Format for the export, either XLSX or CSV.
     * @param {Payabli.ExportBatchDetailsRequest} request
     * @param {Export.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Payabli.BadRequestError}
     * @throws {@link Payabli.UnauthorizedError}
     * @throws {@link Payabli.InternalServerError}
     * @throws {@link Payabli.ServiceUnavailableError}
     *
     * @example
     *     await client.export.exportBatchDetails("8cfec329267", "csv", {
     *         columnsExport: "BatchDate:Batch_Date,PaypointName:Legal_name",
     *         fromRecord: 251,
     *         limitRecord: 1000
     *     })
     */
    public exportBatchDetails(
        entry: string,
        format: Payabli.ExportFormat1,
        request: Payabli.ExportBatchDetailsRequest = {},
        requestOptions?: Export.RequestOptions,
    ): core.HttpResponsePromise<Payabli.File_> {
        return core.HttpResponsePromise.fromPromise(this.__exportBatchDetails(entry, format, request, requestOptions));
    }

    private async __exportBatchDetails(
        entry: string,
        format: Payabli.ExportFormat1,
        request: Payabli.ExportBatchDetailsRequest = {},
        requestOptions?: Export.RequestOptions,
    ): Promise<core.WithRawResponse<Payabli.File_>> {
        const { columnsExport, fromRecord, limitRecord, parameters } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (columnsExport != null) {
            _queryParams["columnsExport"] = columnsExport;
        }

        if (fromRecord != null) {
            _queryParams["fromRecord"] = fromRecord.toString();
        }

        if (limitRecord != null) {
            _queryParams["limitRecord"] = limitRecord.toString();
        }

        if (parameters != null) {
            _queryParams["parameters"] = toJson(parameters);
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PayabliEnvironment.Sandbox,
                `Export/batchDetails/${encodeURIComponent(format)}/${encodeURIComponent(entry)}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Payabli.File_, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Payabli.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Payabli.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Payabli.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Payabli.ServiceUnavailableError(
                        _response.error.body as Payabli.PayabliApiResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.PayabliError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PayabliError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PayabliTimeoutError(
                    "Timeout exceeded when calling GET /Export/batchDetails/{format}/{entry}.",
                );
            case "unknown":
                throw new errors.PayabliError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {Payabli.ExportFormat1} format - Format for the export, either XLSX or CSV.
     * @param {number} orgId - The numeric identifier for organization, assigned by Payabli.
     * @param {Payabli.ExportBatchDetailsOrgRequest} request
     * @param {Export.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Payabli.BadRequestError}
     * @throws {@link Payabli.UnauthorizedError}
     * @throws {@link Payabli.InternalServerError}
     * @throws {@link Payabli.ServiceUnavailableError}
     *
     * @example
     *     await client.export.exportBatchDetailsOrg("csv", 123, {
     *         columnsExport: "BatchDate:Batch_Date,PaypointName:Legal_name",
     *         fromRecord: 251,
     *         limitRecord: 1000
     *     })
     */
    public exportBatchDetailsOrg(
        format: Payabli.ExportFormat1,
        orgId: number,
        request: Payabli.ExportBatchDetailsOrgRequest = {},
        requestOptions?: Export.RequestOptions,
    ): core.HttpResponsePromise<Payabli.File_> {
        return core.HttpResponsePromise.fromPromise(
            this.__exportBatchDetailsOrg(format, orgId, request, requestOptions),
        );
    }

    private async __exportBatchDetailsOrg(
        format: Payabli.ExportFormat1,
        orgId: number,
        request: Payabli.ExportBatchDetailsOrgRequest = {},
        requestOptions?: Export.RequestOptions,
    ): Promise<core.WithRawResponse<Payabli.File_>> {
        const { columnsExport, fromRecord, limitRecord, parameters } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (columnsExport != null) {
            _queryParams["columnsExport"] = columnsExport;
        }

        if (fromRecord != null) {
            _queryParams["fromRecord"] = fromRecord.toString();
        }

        if (limitRecord != null) {
            _queryParams["limitRecord"] = limitRecord.toString();
        }

        if (parameters != null) {
            _queryParams["parameters"] = toJson(parameters);
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PayabliEnvironment.Sandbox,
                `Export/batchDetails/${encodeURIComponent(format)}/org/${encodeURIComponent(orgId)}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Payabli.File_, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Payabli.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Payabli.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Payabli.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Payabli.ServiceUnavailableError(
                        _response.error.body as Payabli.PayabliApiResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.PayabliError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PayabliError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PayabliTimeoutError(
                    "Timeout exceeded when calling GET /Export/batchDetails/{format}/org/{orgId}.",
                );
            case "unknown":
                throw new errors.PayabliError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Export a list of batches for an entrypoint. Use filters to limit results.
     *
     * @param {string} entry - The paypoint's entrypoint identifier. [Learn more](/api-reference/api-overview#entrypoint-vs-entry)
     * @param {Payabli.ExportFormat1} format - Format for the export, either XLSX or CSV.
     * @param {Payabli.ExportBatchesRequest} request
     * @param {Export.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Payabli.BadRequestError}
     * @throws {@link Payabli.UnauthorizedError}
     * @throws {@link Payabli.InternalServerError}
     * @throws {@link Payabli.ServiceUnavailableError}
     *
     * @example
     *     await client.export.exportBatches("8cfec329267", "csv", {
     *         columnsExport: "BatchDate:Batch_Date,PaypointName:Legal_name",
     *         fromRecord: 251,
     *         limitRecord: 1000
     *     })
     */
    public exportBatches(
        entry: string,
        format: Payabli.ExportFormat1,
        request: Payabli.ExportBatchesRequest = {},
        requestOptions?: Export.RequestOptions,
    ): core.HttpResponsePromise<Payabli.File_> {
        return core.HttpResponsePromise.fromPromise(this.__exportBatches(entry, format, request, requestOptions));
    }

    private async __exportBatches(
        entry: string,
        format: Payabli.ExportFormat1,
        request: Payabli.ExportBatchesRequest = {},
        requestOptions?: Export.RequestOptions,
    ): Promise<core.WithRawResponse<Payabli.File_>> {
        const { columnsExport, fromRecord, limitRecord, parameters } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (columnsExport != null) {
            _queryParams["columnsExport"] = columnsExport;
        }

        if (fromRecord != null) {
            _queryParams["fromRecord"] = fromRecord.toString();
        }

        if (limitRecord != null) {
            _queryParams["limitRecord"] = limitRecord.toString();
        }

        if (parameters != null) {
            _queryParams["parameters"] = toJson(parameters);
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PayabliEnvironment.Sandbox,
                `Export/batches/${encodeURIComponent(format)}/${encodeURIComponent(entry)}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Payabli.File_, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Payabli.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Payabli.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Payabli.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Payabli.ServiceUnavailableError(
                        _response.error.body as Payabli.PayabliApiResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.PayabliError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PayabliError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PayabliTimeoutError(
                    "Timeout exceeded when calling GET /Export/batches/{format}/{entry}.",
                );
            case "unknown":
                throw new errors.PayabliError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Export a list of batches for an organization. Use filters to limit results.
     *
     * @param {Payabli.ExportFormat1} format - Format for the export, either XLSX or CSV.
     * @param {number} orgId - The numeric identifier for organization, assigned by Payabli.
     * @param {Payabli.ExportBatchesOrgRequest} request
     * @param {Export.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Payabli.BadRequestError}
     * @throws {@link Payabli.UnauthorizedError}
     * @throws {@link Payabli.InternalServerError}
     * @throws {@link Payabli.ServiceUnavailableError}
     *
     * @example
     *     await client.export.exportBatchesOrg("csv", 123, {
     *         columnsExport: "BatchDate:Batch_Date,PaypointName:Legal_name",
     *         fromRecord: 251,
     *         limitRecord: 1000
     *     })
     */
    public exportBatchesOrg(
        format: Payabli.ExportFormat1,
        orgId: number,
        request: Payabli.ExportBatchesOrgRequest = {},
        requestOptions?: Export.RequestOptions,
    ): core.HttpResponsePromise<Payabli.File_> {
        return core.HttpResponsePromise.fromPromise(this.__exportBatchesOrg(format, orgId, request, requestOptions));
    }

    private async __exportBatchesOrg(
        format: Payabli.ExportFormat1,
        orgId: number,
        request: Payabli.ExportBatchesOrgRequest = {},
        requestOptions?: Export.RequestOptions,
    ): Promise<core.WithRawResponse<Payabli.File_>> {
        const { columnsExport, fromRecord, limitRecord, parameters } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (columnsExport != null) {
            _queryParams["columnsExport"] = columnsExport;
        }

        if (fromRecord != null) {
            _queryParams["fromRecord"] = fromRecord.toString();
        }

        if (limitRecord != null) {
            _queryParams["limitRecord"] = limitRecord.toString();
        }

        if (parameters != null) {
            _queryParams["parameters"] = toJson(parameters);
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PayabliEnvironment.Sandbox,
                `Export/batches/${encodeURIComponent(format)}/org/${encodeURIComponent(orgId)}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Payabli.File_, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Payabli.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Payabli.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Payabli.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Payabli.ServiceUnavailableError(
                        _response.error.body as Payabli.PayabliApiResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.PayabliError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PayabliError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PayabliTimeoutError(
                    "Timeout exceeded when calling GET /Export/batches/{format}/org/{orgId}.",
                );
            case "unknown":
                throw new errors.PayabliError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Export a list of money out batches for a paypoint. Use filters to limit results.
     *
     * @param {string} entry - The paypoint's entrypoint identifier. [Learn more](/api-reference/api-overview#entrypoint-vs-entry)
     * @param {Payabli.ExportFormat1} format - Format for the export, either XLSX or CSV.
     * @param {Payabli.ExportBatchesOutRequest} request
     * @param {Export.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Payabli.BadRequestError}
     * @throws {@link Payabli.UnauthorizedError}
     * @throws {@link Payabli.InternalServerError}
     * @throws {@link Payabli.ServiceUnavailableError}
     *
     * @example
     *     await client.export.exportBatchesOut("8cfec329267", "csv", {
     *         columnsExport: "BatchDate:Batch_Date,PaypointName:Legal_name",
     *         fromRecord: 251,
     *         limitRecord: 1000
     *     })
     */
    public exportBatchesOut(
        entry: string,
        format: Payabli.ExportFormat1,
        request: Payabli.ExportBatchesOutRequest = {},
        requestOptions?: Export.RequestOptions,
    ): core.HttpResponsePromise<Payabli.File_> {
        return core.HttpResponsePromise.fromPromise(this.__exportBatchesOut(entry, format, request, requestOptions));
    }

    private async __exportBatchesOut(
        entry: string,
        format: Payabli.ExportFormat1,
        request: Payabli.ExportBatchesOutRequest = {},
        requestOptions?: Export.RequestOptions,
    ): Promise<core.WithRawResponse<Payabli.File_>> {
        const { columnsExport, fromRecord, limitRecord, parameters } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (columnsExport != null) {
            _queryParams["columnsExport"] = columnsExport;
        }

        if (fromRecord != null) {
            _queryParams["fromRecord"] = fromRecord.toString();
        }

        if (limitRecord != null) {
            _queryParams["limitRecord"] = limitRecord.toString();
        }

        if (parameters != null) {
            _queryParams["parameters"] = toJson(parameters);
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PayabliEnvironment.Sandbox,
                `Export/batchesOut/${encodeURIComponent(format)}/${encodeURIComponent(entry)}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Payabli.File_, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Payabli.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Payabli.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Payabli.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Payabli.ServiceUnavailableError(
                        _response.error.body as Payabli.PayabliApiResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.PayabliError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PayabliError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PayabliTimeoutError(
                    "Timeout exceeded when calling GET /Export/batchesOut/{format}/{entry}.",
                );
            case "unknown":
                throw new errors.PayabliError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Export a list of money out batches for an organization. Use filters to limit results.
     *
     * @param {Payabli.ExportFormat1} format - Format for the export, either XLSX or CSV.
     * @param {number} orgId - The numeric identifier for organization, assigned by Payabli.
     * @param {Payabli.ExportBatchesOutOrgRequest} request
     * @param {Export.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Payabli.BadRequestError}
     * @throws {@link Payabli.UnauthorizedError}
     * @throws {@link Payabli.InternalServerError}
     * @throws {@link Payabli.ServiceUnavailableError}
     *
     * @example
     *     await client.export.exportBatchesOutOrg("csv", 123, {
     *         columnsExport: "BatchDate:Batch_Date,PaypointName:Legal_name",
     *         fromRecord: 251,
     *         limitRecord: 1000
     *     })
     */
    public exportBatchesOutOrg(
        format: Payabli.ExportFormat1,
        orgId: number,
        request: Payabli.ExportBatchesOutOrgRequest = {},
        requestOptions?: Export.RequestOptions,
    ): core.HttpResponsePromise<Payabli.File_> {
        return core.HttpResponsePromise.fromPromise(this.__exportBatchesOutOrg(format, orgId, request, requestOptions));
    }

    private async __exportBatchesOutOrg(
        format: Payabli.ExportFormat1,
        orgId: number,
        request: Payabli.ExportBatchesOutOrgRequest = {},
        requestOptions?: Export.RequestOptions,
    ): Promise<core.WithRawResponse<Payabli.File_>> {
        const { columnsExport, fromRecord, limitRecord, parameters } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (columnsExport != null) {
            _queryParams["columnsExport"] = columnsExport;
        }

        if (fromRecord != null) {
            _queryParams["fromRecord"] = fromRecord.toString();
        }

        if (limitRecord != null) {
            _queryParams["limitRecord"] = limitRecord.toString();
        }

        if (parameters != null) {
            _queryParams["parameters"] = toJson(parameters);
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PayabliEnvironment.Sandbox,
                `Export/batchesOut/${encodeURIComponent(format)}/org/${encodeURIComponent(orgId)}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Payabli.File_, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Payabli.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Payabli.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Payabli.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Payabli.ServiceUnavailableError(
                        _response.error.body as Payabli.PayabliApiResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.PayabliError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PayabliError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PayabliTimeoutError(
                    "Timeout exceeded when calling GET /Export/batchesOut/{format}/org/{orgId}.",
                );
            case "unknown":
                throw new errors.PayabliError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Export a list of bills for an entrypoint. Use filters to limit results.
     *
     * @param {string} entry - The paypoint's entrypoint identifier. [Learn more](/api-reference/api-overview#entrypoint-vs-entry)
     * @param {Payabli.ExportFormat1} format - Format for the export, either XLSX or CSV.
     * @param {Payabli.ExportBillsRequest} request
     * @param {Export.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Payabli.BadRequestError}
     * @throws {@link Payabli.UnauthorizedError}
     * @throws {@link Payabli.InternalServerError}
     * @throws {@link Payabli.ServiceUnavailableError}
     *
     * @example
     *     await client.export.exportBills("8cfec329267", "csv", {
     *         columnsExport: "BatchDate:Batch_Date,PaypointName:Legal_name",
     *         fromRecord: 251,
     *         limitRecord: 1000
     *     })
     */
    public exportBills(
        entry: string,
        format: Payabli.ExportFormat1,
        request: Payabli.ExportBillsRequest = {},
        requestOptions?: Export.RequestOptions,
    ): core.HttpResponsePromise<Payabli.File_> {
        return core.HttpResponsePromise.fromPromise(this.__exportBills(entry, format, request, requestOptions));
    }

    private async __exportBills(
        entry: string,
        format: Payabli.ExportFormat1,
        request: Payabli.ExportBillsRequest = {},
        requestOptions?: Export.RequestOptions,
    ): Promise<core.WithRawResponse<Payabli.File_>> {
        const { columnsExport, fromRecord, limitRecord, parameters } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (columnsExport != null) {
            _queryParams["columnsExport"] = columnsExport;
        }

        if (fromRecord != null) {
            _queryParams["fromRecord"] = fromRecord.toString();
        }

        if (limitRecord != null) {
            _queryParams["limitRecord"] = limitRecord.toString();
        }

        if (parameters != null) {
            _queryParams["parameters"] = toJson(parameters);
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PayabliEnvironment.Sandbox,
                `Export/bills/${encodeURIComponent(format)}/${encodeURIComponent(entry)}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Payabli.File_, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Payabli.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Payabli.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Payabli.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Payabli.ServiceUnavailableError(
                        _response.error.body as Payabli.PayabliApiResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.PayabliError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PayabliError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PayabliTimeoutError(
                    "Timeout exceeded when calling GET /Export/bills/{format}/{entry}.",
                );
            case "unknown":
                throw new errors.PayabliError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Export a list of bills for an organization. Use filters to limit results.
     *
     * @param {Payabli.ExportFormat1} format - Format for the export, either XLSX or CSV.
     * @param {number} orgId - The numeric identifier for organization, assigned by Payabli.
     * @param {Payabli.ExportBillsOrgRequest} request
     * @param {Export.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Payabli.BadRequestError}
     * @throws {@link Payabli.UnauthorizedError}
     * @throws {@link Payabli.InternalServerError}
     * @throws {@link Payabli.ServiceUnavailableError}
     *
     * @example
     *     await client.export.exportBillsOrg("csv", 123, {
     *         columnsExport: "BatchDate:Batch_Date,PaypointName:Legal_name",
     *         fromRecord: 251,
     *         limitRecord: 1000
     *     })
     */
    public exportBillsOrg(
        format: Payabli.ExportFormat1,
        orgId: number,
        request: Payabli.ExportBillsOrgRequest = {},
        requestOptions?: Export.RequestOptions,
    ): core.HttpResponsePromise<Payabli.File_> {
        return core.HttpResponsePromise.fromPromise(this.__exportBillsOrg(format, orgId, request, requestOptions));
    }

    private async __exportBillsOrg(
        format: Payabli.ExportFormat1,
        orgId: number,
        request: Payabli.ExportBillsOrgRequest = {},
        requestOptions?: Export.RequestOptions,
    ): Promise<core.WithRawResponse<Payabli.File_>> {
        const { columnsExport, fromRecord, limitRecord, parameters } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (columnsExport != null) {
            _queryParams["columnsExport"] = columnsExport;
        }

        if (fromRecord != null) {
            _queryParams["fromRecord"] = fromRecord.toString();
        }

        if (limitRecord != null) {
            _queryParams["limitRecord"] = limitRecord.toString();
        }

        if (parameters != null) {
            _queryParams["parameters"] = toJson(parameters);
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PayabliEnvironment.Sandbox,
                `Export/bills/${encodeURIComponent(format)}/org/${encodeURIComponent(orgId)}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Payabli.File_, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Payabli.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Payabli.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Payabli.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Payabli.ServiceUnavailableError(
                        _response.error.body as Payabli.PayabliApiResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.PayabliError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PayabliError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PayabliTimeoutError(
                    "Timeout exceeded when calling GET /Export/bills/{format}/org/{orgId}.",
                );
            case "unknown":
                throw new errors.PayabliError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Export a list of chargebacks and ACH returns for an entrypoint. Use filters to limit results.
     *
     * @param {string} entry - The paypoint's entrypoint identifier. [Learn more](/api-reference/api-overview#entrypoint-vs-entry)
     * @param {Payabli.ExportFormat1} format - Format for the export, either XLSX or CSV.
     * @param {Payabli.ExportChargebacksRequest} request
     * @param {Export.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Payabli.BadRequestError}
     * @throws {@link Payabli.UnauthorizedError}
     * @throws {@link Payabli.InternalServerError}
     * @throws {@link Payabli.ServiceUnavailableError}
     *
     * @example
     *     await client.export.exportChargebacks("8cfec329267", "csv", {
     *         columnsExport: "BatchDate:Batch_Date,PaypointName:Legal_name",
     *         fromRecord: 251,
     *         limitRecord: 1000
     *     })
     */
    public exportChargebacks(
        entry: string,
        format: Payabli.ExportFormat1,
        request: Payabli.ExportChargebacksRequest = {},
        requestOptions?: Export.RequestOptions,
    ): core.HttpResponsePromise<Payabli.File_> {
        return core.HttpResponsePromise.fromPromise(this.__exportChargebacks(entry, format, request, requestOptions));
    }

    private async __exportChargebacks(
        entry: string,
        format: Payabli.ExportFormat1,
        request: Payabli.ExportChargebacksRequest = {},
        requestOptions?: Export.RequestOptions,
    ): Promise<core.WithRawResponse<Payabli.File_>> {
        const { columnsExport, fromRecord, limitRecord, parameters } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (columnsExport != null) {
            _queryParams["columnsExport"] = columnsExport;
        }

        if (fromRecord != null) {
            _queryParams["fromRecord"] = fromRecord.toString();
        }

        if (limitRecord != null) {
            _queryParams["limitRecord"] = limitRecord.toString();
        }

        if (parameters != null) {
            _queryParams["parameters"] = toJson(parameters);
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PayabliEnvironment.Sandbox,
                `Export/chargebacks/${encodeURIComponent(format)}/${encodeURIComponent(entry)}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Payabli.File_, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Payabli.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Payabli.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Payabli.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Payabli.ServiceUnavailableError(
                        _response.error.body as Payabli.PayabliApiResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.PayabliError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PayabliError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PayabliTimeoutError(
                    "Timeout exceeded when calling GET /Export/chargebacks/{format}/{entry}.",
                );
            case "unknown":
                throw new errors.PayabliError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Export a list of chargebacks and ACH returns for an organization. Use filters to limit results.
     *
     * @param {Payabli.ExportFormat1} format - Format for the export, either XLSX or CSV.
     * @param {number} orgId - The numeric identifier for organization, assigned by Payabli.
     * @param {Payabli.ExportChargebacksOrgRequest} request
     * @param {Export.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Payabli.BadRequestError}
     * @throws {@link Payabli.UnauthorizedError}
     * @throws {@link Payabli.InternalServerError}
     * @throws {@link Payabli.ServiceUnavailableError}
     *
     * @example
     *     await client.export.exportChargebacksOrg("csv", 123, {
     *         columnsExport: "BatchDate:Batch_Date,PaypointName:Legal_name",
     *         fromRecord: 251,
     *         limitRecord: 1000
     *     })
     */
    public exportChargebacksOrg(
        format: Payabli.ExportFormat1,
        orgId: number,
        request: Payabli.ExportChargebacksOrgRequest = {},
        requestOptions?: Export.RequestOptions,
    ): core.HttpResponsePromise<Payabli.File_> {
        return core.HttpResponsePromise.fromPromise(
            this.__exportChargebacksOrg(format, orgId, request, requestOptions),
        );
    }

    private async __exportChargebacksOrg(
        format: Payabli.ExportFormat1,
        orgId: number,
        request: Payabli.ExportChargebacksOrgRequest = {},
        requestOptions?: Export.RequestOptions,
    ): Promise<core.WithRawResponse<Payabli.File_>> {
        const { columnsExport, fromRecord, limitRecord, parameters } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (columnsExport != null) {
            _queryParams["columnsExport"] = columnsExport;
        }

        if (fromRecord != null) {
            _queryParams["fromRecord"] = fromRecord.toString();
        }

        if (limitRecord != null) {
            _queryParams["limitRecord"] = limitRecord.toString();
        }

        if (parameters != null) {
            _queryParams["parameters"] = toJson(parameters);
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PayabliEnvironment.Sandbox,
                `Export/chargebacks/${encodeURIComponent(format)}/org/${encodeURIComponent(orgId)}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Payabli.File_, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Payabli.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Payabli.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Payabli.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Payabli.ServiceUnavailableError(
                        _response.error.body as Payabli.PayabliApiResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.PayabliError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PayabliError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PayabliTimeoutError(
                    "Timeout exceeded when calling GET /Export/chargebacks/{format}/org/{orgId}.",
                );
            case "unknown":
                throw new errors.PayabliError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Export a list of customers for an entrypoint. Use filters to limit results.
     *
     * @param {string} entry - The paypoint's entrypoint identifier. [Learn more](/api-reference/api-overview#entrypoint-vs-entry)
     * @param {Payabli.ExportFormat1} format - Format for the export, either XLSX or CSV.
     * @param {Payabli.ExportCustomersRequest} request
     * @param {Export.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Payabli.BadRequestError}
     * @throws {@link Payabli.UnauthorizedError}
     * @throws {@link Payabli.InternalServerError}
     * @throws {@link Payabli.ServiceUnavailableError}
     *
     * @example
     *     await client.export.exportCustomers("8cfec329267", "csv", {
     *         columnsExport: "BatchDate:Batch_Date,PaypointName:Legal_name",
     *         fromRecord: 251,
     *         limitRecord: 1000
     *     })
     */
    public exportCustomers(
        entry: string,
        format: Payabli.ExportFormat1,
        request: Payabli.ExportCustomersRequest = {},
        requestOptions?: Export.RequestOptions,
    ): core.HttpResponsePromise<Payabli.File_> {
        return core.HttpResponsePromise.fromPromise(this.__exportCustomers(entry, format, request, requestOptions));
    }

    private async __exportCustomers(
        entry: string,
        format: Payabli.ExportFormat1,
        request: Payabli.ExportCustomersRequest = {},
        requestOptions?: Export.RequestOptions,
    ): Promise<core.WithRawResponse<Payabli.File_>> {
        const { columnsExport, fromRecord, limitRecord, parameters } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (columnsExport != null) {
            _queryParams["columnsExport"] = columnsExport;
        }

        if (fromRecord != null) {
            _queryParams["fromRecord"] = fromRecord.toString();
        }

        if (limitRecord != null) {
            _queryParams["limitRecord"] = limitRecord.toString();
        }

        if (parameters != null) {
            _queryParams["parameters"] = toJson(parameters);
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PayabliEnvironment.Sandbox,
                `Export/customers/${encodeURIComponent(format)}/${encodeURIComponent(entry)}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Payabli.File_, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Payabli.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Payabli.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Payabli.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Payabli.ServiceUnavailableError(
                        _response.error.body as Payabli.PayabliApiResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.PayabliError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PayabliError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PayabliTimeoutError(
                    "Timeout exceeded when calling GET /Export/customers/{format}/{entry}.",
                );
            case "unknown":
                throw new errors.PayabliError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Exports a list of customers for an organization. Use filters to limit results.
     *
     * @param {Payabli.ExportFormat1} format - Format for the export, either XLSX or CSV.
     * @param {number} orgId - The numeric identifier for organization, assigned by Payabli.
     * @param {Payabli.ExportCustomersOrgRequest} request
     * @param {Export.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Payabli.BadRequestError}
     * @throws {@link Payabli.UnauthorizedError}
     * @throws {@link Payabli.InternalServerError}
     * @throws {@link Payabli.ServiceUnavailableError}
     *
     * @example
     *     await client.export.exportCustomersOrg("csv", 123, {
     *         columnsExport: "BatchDate:Batch_Date,PaypointName:Legal_name",
     *         fromRecord: 251,
     *         limitRecord: 1000
     *     })
     */
    public exportCustomersOrg(
        format: Payabli.ExportFormat1,
        orgId: number,
        request: Payabli.ExportCustomersOrgRequest = {},
        requestOptions?: Export.RequestOptions,
    ): core.HttpResponsePromise<Payabli.File_> {
        return core.HttpResponsePromise.fromPromise(this.__exportCustomersOrg(format, orgId, request, requestOptions));
    }

    private async __exportCustomersOrg(
        format: Payabli.ExportFormat1,
        orgId: number,
        request: Payabli.ExportCustomersOrgRequest = {},
        requestOptions?: Export.RequestOptions,
    ): Promise<core.WithRawResponse<Payabli.File_>> {
        const { columnsExport, fromRecord, limitRecord, parameters } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (columnsExport != null) {
            _queryParams["columnsExport"] = columnsExport;
        }

        if (fromRecord != null) {
            _queryParams["fromRecord"] = fromRecord.toString();
        }

        if (limitRecord != null) {
            _queryParams["limitRecord"] = limitRecord.toString();
        }

        if (parameters != null) {
            _queryParams["parameters"] = toJson(parameters);
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PayabliEnvironment.Sandbox,
                `Export/customers/${encodeURIComponent(format)}/org/${encodeURIComponent(orgId)}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Payabli.File_, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Payabli.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Payabli.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Payabli.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Payabli.ServiceUnavailableError(
                        _response.error.body as Payabli.PayabliApiResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.PayabliError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PayabliError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PayabliTimeoutError(
                    "Timeout exceeded when calling GET /Export/customers/{format}/org/{orgId}.",
                );
            case "unknown":
                throw new errors.PayabliError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Export list of invoices for an entrypoint. Use filters to limit results.
     *
     * @param {string} entry - The paypoint's entrypoint identifier. [Learn more](/api-reference/api-overview#entrypoint-vs-entry)
     * @param {Payabli.ExportFormat1} format - Format for the export, either XLSX or CSV.
     * @param {Payabli.ExportInvoicesRequest} request
     * @param {Export.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Payabli.BadRequestError}
     * @throws {@link Payabli.UnauthorizedError}
     * @throws {@link Payabli.InternalServerError}
     * @throws {@link Payabli.ServiceUnavailableError}
     *
     * @example
     *     await client.export.exportInvoices("8cfec329267", "csv", {
     *         columnsExport: "BatchDate:Batch_Date,PaypointName:Legal_name",
     *         fromRecord: 251,
     *         limitRecord: 1000
     *     })
     */
    public exportInvoices(
        entry: string,
        format: Payabli.ExportFormat1,
        request: Payabli.ExportInvoicesRequest = {},
        requestOptions?: Export.RequestOptions,
    ): core.HttpResponsePromise<Payabli.File_> {
        return core.HttpResponsePromise.fromPromise(this.__exportInvoices(entry, format, request, requestOptions));
    }

    private async __exportInvoices(
        entry: string,
        format: Payabli.ExportFormat1,
        request: Payabli.ExportInvoicesRequest = {},
        requestOptions?: Export.RequestOptions,
    ): Promise<core.WithRawResponse<Payabli.File_>> {
        const { columnsExport, fromRecord, limitRecord, parameters } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (columnsExport != null) {
            _queryParams["columnsExport"] = columnsExport;
        }

        if (fromRecord != null) {
            _queryParams["fromRecord"] = fromRecord.toString();
        }

        if (limitRecord != null) {
            _queryParams["limitRecord"] = limitRecord.toString();
        }

        if (parameters != null) {
            _queryParams["parameters"] = toJson(parameters);
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PayabliEnvironment.Sandbox,
                `Export/invoices/${encodeURIComponent(format)}/${encodeURIComponent(entry)}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Payabli.File_, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Payabli.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Payabli.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Payabli.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Payabli.ServiceUnavailableError(
                        _response.error.body as Payabli.PayabliApiResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.PayabliError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PayabliError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PayabliTimeoutError(
                    "Timeout exceeded when calling GET /Export/invoices/{format}/{entry}.",
                );
            case "unknown":
                throw new errors.PayabliError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Export a list of invoices for an organization. Use filters to limit results.
     *
     * @param {Payabli.ExportFormat1} format - Format for the export, either XLSX or CSV.
     * @param {number} orgId - The numeric identifier for organization, assigned by Payabli.
     * @param {Payabli.ExportInvoicesOrgRequest} request
     * @param {Export.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Payabli.BadRequestError}
     * @throws {@link Payabli.UnauthorizedError}
     * @throws {@link Payabli.InternalServerError}
     * @throws {@link Payabli.ServiceUnavailableError}
     *
     * @example
     *     await client.export.exportInvoicesOrg("csv", 123, {
     *         columnsExport: "BatchDate:Batch_Date,PaypointName:Legal_name",
     *         fromRecord: 251,
     *         limitRecord: 1000
     *     })
     */
    public exportInvoicesOrg(
        format: Payabli.ExportFormat1,
        orgId: number,
        request: Payabli.ExportInvoicesOrgRequest = {},
        requestOptions?: Export.RequestOptions,
    ): core.HttpResponsePromise<Payabli.File_> {
        return core.HttpResponsePromise.fromPromise(this.__exportInvoicesOrg(format, orgId, request, requestOptions));
    }

    private async __exportInvoicesOrg(
        format: Payabli.ExportFormat1,
        orgId: number,
        request: Payabli.ExportInvoicesOrgRequest = {},
        requestOptions?: Export.RequestOptions,
    ): Promise<core.WithRawResponse<Payabli.File_>> {
        const { columnsExport, fromRecord, limitRecord, parameters } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (columnsExport != null) {
            _queryParams["columnsExport"] = columnsExport;
        }

        if (fromRecord != null) {
            _queryParams["fromRecord"] = fromRecord.toString();
        }

        if (limitRecord != null) {
            _queryParams["limitRecord"] = limitRecord.toString();
        }

        if (parameters != null) {
            _queryParams["parameters"] = toJson(parameters);
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PayabliEnvironment.Sandbox,
                `Export/invoices/${encodeURIComponent(format)}/org/${encodeURIComponent(orgId)}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Payabli.File_, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Payabli.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Payabli.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Payabli.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Payabli.ServiceUnavailableError(
                        _response.error.body as Payabli.PayabliApiResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.PayabliError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PayabliError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PayabliTimeoutError(
                    "Timeout exceeded when calling GET /Export/invoices/{format}/org/{orgId}.",
                );
            case "unknown":
                throw new errors.PayabliError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Export a list of child organizations (suborganizations) for a parent organization.
     *
     * @param {Payabli.ExportFormat1} format - Format for the export, either XLSX or CSV.
     * @param {number} orgId - The numeric identifier for organization, assigned by Payabli.
     * @param {Payabli.ExportOrganizationsRequest} request
     * @param {Export.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Payabli.BadRequestError}
     * @throws {@link Payabli.UnauthorizedError}
     * @throws {@link Payabli.InternalServerError}
     * @throws {@link Payabli.ServiceUnavailableError}
     *
     * @example
     *     await client.export.exportOrganizations("csv", 123, {
     *         columnsExport: "BatchDate:Batch_Date,PaypointName:Legal_name",
     *         fromRecord: 251,
     *         limitRecord: 1000
     *     })
     */
    public exportOrganizations(
        format: Payabli.ExportFormat1,
        orgId: number,
        request: Payabli.ExportOrganizationsRequest = {},
        requestOptions?: Export.RequestOptions,
    ): core.HttpResponsePromise<Payabli.File_> {
        return core.HttpResponsePromise.fromPromise(this.__exportOrganizations(format, orgId, request, requestOptions));
    }

    private async __exportOrganizations(
        format: Payabli.ExportFormat1,
        orgId: number,
        request: Payabli.ExportOrganizationsRequest = {},
        requestOptions?: Export.RequestOptions,
    ): Promise<core.WithRawResponse<Payabli.File_>> {
        const { columnsExport, fromRecord, limitRecord, parameters } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (columnsExport != null) {
            _queryParams["columnsExport"] = columnsExport;
        }

        if (fromRecord != null) {
            _queryParams["fromRecord"] = fromRecord.toString();
        }

        if (limitRecord != null) {
            _queryParams["limitRecord"] = limitRecord.toString();
        }

        if (parameters != null) {
            _queryParams["parameters"] = toJson(parameters);
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PayabliEnvironment.Sandbox,
                `Export/organizations/${encodeURIComponent(format)}/org/${encodeURIComponent(orgId)}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Payabli.File_, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Payabli.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Payabli.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Payabli.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Payabli.ServiceUnavailableError(
                        _response.error.body as Payabli.PayabliApiResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.PayabliError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PayabliError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PayabliTimeoutError(
                    "Timeout exceeded when calling GET /Export/organizations/{format}/org/{orgId}.",
                );
            case "unknown":
                throw new errors.PayabliError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Export a list of payouts and their statuses for an entrypoint. Use filters to limit results.
     *
     * @param {string} entry - The paypoint's entrypoint identifier. [Learn more](/api-reference/api-overview#entrypoint-vs-entry)
     * @param {Payabli.ExportFormat1} format - Format for the export, either XLSX or CSV.
     * @param {Payabli.ExportPayoutRequest} request
     * @param {Export.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Payabli.BadRequestError}
     * @throws {@link Payabli.UnauthorizedError}
     * @throws {@link Payabli.InternalServerError}
     * @throws {@link Payabli.ServiceUnavailableError}
     *
     * @example
     *     await client.export.exportPayout("8cfec329267", "csv", {
     *         columnsExport: "BatchDate:Batch_Date,PaypointName:Legal_name",
     *         fromRecord: 251,
     *         limitRecord: 1000
     *     })
     */
    public exportPayout(
        entry: string,
        format: Payabli.ExportFormat1,
        request: Payabli.ExportPayoutRequest = {},
        requestOptions?: Export.RequestOptions,
    ): core.HttpResponsePromise<Payabli.File_> {
        return core.HttpResponsePromise.fromPromise(this.__exportPayout(entry, format, request, requestOptions));
    }

    private async __exportPayout(
        entry: string,
        format: Payabli.ExportFormat1,
        request: Payabli.ExportPayoutRequest = {},
        requestOptions?: Export.RequestOptions,
    ): Promise<core.WithRawResponse<Payabli.File_>> {
        const { columnsExport, fromRecord, limitRecord, parameters } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (columnsExport != null) {
            _queryParams["columnsExport"] = columnsExport;
        }

        if (fromRecord != null) {
            _queryParams["fromRecord"] = fromRecord.toString();
        }

        if (limitRecord != null) {
            _queryParams["limitRecord"] = limitRecord.toString();
        }

        if (parameters != null) {
            _queryParams["parameters"] = toJson(parameters);
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PayabliEnvironment.Sandbox,
                `Export/payouts/${encodeURIComponent(format)}/${encodeURIComponent(entry)}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Payabli.File_, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Payabli.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Payabli.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Payabli.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Payabli.ServiceUnavailableError(
                        _response.error.body as Payabli.PayabliApiResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.PayabliError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PayabliError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PayabliTimeoutError(
                    "Timeout exceeded when calling GET /Export/payouts/{format}/{entry}.",
                );
            case "unknown":
                throw new errors.PayabliError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Export a list of payouts and their details for an organization. Use filters to limit results.
     *
     * @param {Payabli.ExportFormat1} format - Format for the export, either XLSX or CSV.
     * @param {number} orgId - The numeric identifier for organization, assigned by Payabli.
     * @param {Payabli.ExportPayoutOrgRequest} request
     * @param {Export.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Payabli.BadRequestError}
     * @throws {@link Payabli.UnauthorizedError}
     * @throws {@link Payabli.InternalServerError}
     * @throws {@link Payabli.ServiceUnavailableError}
     *
     * @example
     *     await client.export.exportPayoutOrg("csv", 123, {
     *         columnsExport: "BatchDate:Batch_Date,PaypointName:Legal_name",
     *         fromRecord: 251,
     *         limitRecord: 1000
     *     })
     */
    public exportPayoutOrg(
        format: Payabli.ExportFormat1,
        orgId: number,
        request: Payabli.ExportPayoutOrgRequest = {},
        requestOptions?: Export.RequestOptions,
    ): core.HttpResponsePromise<Payabli.File_> {
        return core.HttpResponsePromise.fromPromise(this.__exportPayoutOrg(format, orgId, request, requestOptions));
    }

    private async __exportPayoutOrg(
        format: Payabli.ExportFormat1,
        orgId: number,
        request: Payabli.ExportPayoutOrgRequest = {},
        requestOptions?: Export.RequestOptions,
    ): Promise<core.WithRawResponse<Payabli.File_>> {
        const { columnsExport, fromRecord, limitRecord, parameters } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (columnsExport != null) {
            _queryParams["columnsExport"] = columnsExport;
        }

        if (fromRecord != null) {
            _queryParams["fromRecord"] = fromRecord.toString();
        }

        if (limitRecord != null) {
            _queryParams["limitRecord"] = limitRecord.toString();
        }

        if (parameters != null) {
            _queryParams["parameters"] = toJson(parameters);
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PayabliEnvironment.Sandbox,
                `Export/payouts/${encodeURIComponent(format)}/org/${encodeURIComponent(orgId)}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Payabli.File_, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Payabli.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Payabli.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Payabli.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Payabli.ServiceUnavailableError(
                        _response.error.body as Payabli.PayabliApiResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.PayabliError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PayabliError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PayabliTimeoutError(
                    "Timeout exceeded when calling GET /Export/payouts/{format}/org/{orgId}.",
                );
            case "unknown":
                throw new errors.PayabliError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Export a list of paypoints in an organization. Use filters to limit results.
     *
     * @param {Payabli.ExportFormat1} format - Format for the export, either XLSX or CSV.
     * @param {number} orgId - The numeric identifier for organization, assigned by Payabli.
     * @param {Payabli.ExportPaypointsRequest} request
     * @param {Export.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Payabli.BadRequestError}
     * @throws {@link Payabli.UnauthorizedError}
     * @throws {@link Payabli.InternalServerError}
     * @throws {@link Payabli.ServiceUnavailableError}
     *
     * @example
     *     await client.export.exportPaypoints("csv", 123, {
     *         columnsExport: "BatchDate:Batch_Date,PaypointName:Legal_name",
     *         fromRecord: 251,
     *         limitRecord: 1000
     *     })
     */
    public exportPaypoints(
        format: Payabli.ExportFormat1,
        orgId: number,
        request: Payabli.ExportPaypointsRequest = {},
        requestOptions?: Export.RequestOptions,
    ): core.HttpResponsePromise<Payabli.File_> {
        return core.HttpResponsePromise.fromPromise(this.__exportPaypoints(format, orgId, request, requestOptions));
    }

    private async __exportPaypoints(
        format: Payabli.ExportFormat1,
        orgId: number,
        request: Payabli.ExportPaypointsRequest = {},
        requestOptions?: Export.RequestOptions,
    ): Promise<core.WithRawResponse<Payabli.File_>> {
        const { columnsExport, fromRecord, limitRecord, parameters } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (columnsExport != null) {
            _queryParams["columnsExport"] = columnsExport;
        }

        if (fromRecord != null) {
            _queryParams["fromRecord"] = fromRecord.toString();
        }

        if (limitRecord != null) {
            _queryParams["limitRecord"] = limitRecord.toString();
        }

        if (parameters != null) {
            _queryParams["parameters"] = toJson(parameters);
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PayabliEnvironment.Sandbox,
                `Export/paypoints/${encodeURIComponent(format)}/${encodeURIComponent(orgId)}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Payabli.File_, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Payabli.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Payabli.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Payabli.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Payabli.ServiceUnavailableError(
                        _response.error.body as Payabli.PayabliApiResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.PayabliError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PayabliError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PayabliTimeoutError(
                    "Timeout exceeded when calling GET /Export/paypoints/{format}/{orgId}.",
                );
            case "unknown":
                throw new errors.PayabliError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Export a list of settled transactions for an entrypoint. Use filters to limit results.
     *
     * @param {string} entry - The paypoint's entrypoint identifier. [Learn more](/api-reference/api-overview#entrypoint-vs-entry)
     * @param {Payabli.ExportFormat1} format - Format for the export, either XLSX or CSV.
     * @param {Payabli.ExportSettlementsRequest} request
     * @param {Export.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Payabli.BadRequestError}
     * @throws {@link Payabli.UnauthorizedError}
     * @throws {@link Payabli.InternalServerError}
     * @throws {@link Payabli.ServiceUnavailableError}
     *
     * @example
     *     await client.export.exportSettlements("8cfec329267", "csv", {
     *         columnsExport: "BatchDate:Batch_Date,PaypointName:Legal_name",
     *         fromRecord: 251,
     *         limitRecord: 1000
     *     })
     */
    public exportSettlements(
        entry: string,
        format: Payabli.ExportFormat1,
        request: Payabli.ExportSettlementsRequest = {},
        requestOptions?: Export.RequestOptions,
    ): core.HttpResponsePromise<Payabli.File_> {
        return core.HttpResponsePromise.fromPromise(this.__exportSettlements(entry, format, request, requestOptions));
    }

    private async __exportSettlements(
        entry: string,
        format: Payabli.ExportFormat1,
        request: Payabli.ExportSettlementsRequest = {},
        requestOptions?: Export.RequestOptions,
    ): Promise<core.WithRawResponse<Payabli.File_>> {
        const { columnsExport, fromRecord, limitRecord, parameters } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (columnsExport != null) {
            _queryParams["columnsExport"] = columnsExport;
        }

        if (fromRecord != null) {
            _queryParams["fromRecord"] = fromRecord.toString();
        }

        if (limitRecord != null) {
            _queryParams["limitRecord"] = limitRecord.toString();
        }

        if (parameters != null) {
            _queryParams["parameters"] = toJson(parameters);
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PayabliEnvironment.Sandbox,
                `Export/settlements/${encodeURIComponent(format)}/${encodeURIComponent(entry)}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Payabli.File_, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Payabli.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Payabli.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Payabli.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Payabli.ServiceUnavailableError(
                        _response.error.body as Payabli.PayabliApiResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.PayabliError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PayabliError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PayabliTimeoutError(
                    "Timeout exceeded when calling GET /Export/settlements/{format}/{entry}.",
                );
            case "unknown":
                throw new errors.PayabliError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Export a list of settled transactions for an organization. Use filters to limit results.
     *
     * @param {Payabli.ExportFormat1} format - Format for the export, either XLSX or CSV.
     * @param {number} orgId - The numeric identifier for organization, assigned by Payabli.
     * @param {Payabli.ExportSettlementsOrgRequest} request
     * @param {Export.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Payabli.BadRequestError}
     * @throws {@link Payabli.UnauthorizedError}
     * @throws {@link Payabli.InternalServerError}
     * @throws {@link Payabli.ServiceUnavailableError}
     *
     * @example
     *     await client.export.exportSettlementsOrg("csv", 123, {
     *         columnsExport: "BatchDate:Batch_Date,PaypointName:Legal_name",
     *         fromRecord: 251,
     *         limitRecord: 1000
     *     })
     */
    public exportSettlementsOrg(
        format: Payabli.ExportFormat1,
        orgId: number,
        request: Payabli.ExportSettlementsOrgRequest = {},
        requestOptions?: Export.RequestOptions,
    ): core.HttpResponsePromise<Payabli.File_> {
        return core.HttpResponsePromise.fromPromise(
            this.__exportSettlementsOrg(format, orgId, request, requestOptions),
        );
    }

    private async __exportSettlementsOrg(
        format: Payabli.ExportFormat1,
        orgId: number,
        request: Payabli.ExportSettlementsOrgRequest = {},
        requestOptions?: Export.RequestOptions,
    ): Promise<core.WithRawResponse<Payabli.File_>> {
        const { columnsExport, fromRecord, limitRecord, parameters } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (columnsExport != null) {
            _queryParams["columnsExport"] = columnsExport;
        }

        if (fromRecord != null) {
            _queryParams["fromRecord"] = fromRecord.toString();
        }

        if (limitRecord != null) {
            _queryParams["limitRecord"] = limitRecord.toString();
        }

        if (parameters != null) {
            _queryParams["parameters"] = toJson(parameters);
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PayabliEnvironment.Sandbox,
                `Export/settlements/${encodeURIComponent(format)}/org/${encodeURIComponent(orgId)}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Payabli.File_, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Payabli.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Payabli.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Payabli.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Payabli.ServiceUnavailableError(
                        _response.error.body as Payabli.PayabliApiResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.PayabliError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PayabliError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PayabliTimeoutError(
                    "Timeout exceeded when calling GET /Export/settlements/{format}/org/{orgId}.",
                );
            case "unknown":
                throw new errors.PayabliError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Export a list of subscriptions for an entrypoint. Use filters to limit results.
     *
     * @param {string} entry - The paypoint's entrypoint identifier. [Learn more](/api-reference/api-overview#entrypoint-vs-entry)
     * @param {Payabli.ExportFormat1} format - Format for the export, either XLSX or CSV.
     * @param {Payabli.ExportSubscriptionsRequest} request
     * @param {Export.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Payabli.BadRequestError}
     * @throws {@link Payabli.UnauthorizedError}
     * @throws {@link Payabli.InternalServerError}
     * @throws {@link Payabli.ServiceUnavailableError}
     *
     * @example
     *     await client.export.exportSubscriptions("8cfec329267", "csv", {
     *         columnsExport: "BatchDate:Batch_Date,PaypointName:Legal_name",
     *         fromRecord: 251,
     *         limitRecord: 1000
     *     })
     */
    public exportSubscriptions(
        entry: string,
        format: Payabli.ExportFormat1,
        request: Payabli.ExportSubscriptionsRequest = {},
        requestOptions?: Export.RequestOptions,
    ): core.HttpResponsePromise<Payabli.File_> {
        return core.HttpResponsePromise.fromPromise(this.__exportSubscriptions(entry, format, request, requestOptions));
    }

    private async __exportSubscriptions(
        entry: string,
        format: Payabli.ExportFormat1,
        request: Payabli.ExportSubscriptionsRequest = {},
        requestOptions?: Export.RequestOptions,
    ): Promise<core.WithRawResponse<Payabli.File_>> {
        const { columnsExport, fromRecord, limitRecord, parameters } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (columnsExport != null) {
            _queryParams["columnsExport"] = columnsExport;
        }

        if (fromRecord != null) {
            _queryParams["fromRecord"] = fromRecord.toString();
        }

        if (limitRecord != null) {
            _queryParams["limitRecord"] = limitRecord.toString();
        }

        if (parameters != null) {
            _queryParams["parameters"] = toJson(parameters);
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PayabliEnvironment.Sandbox,
                `Export/subscriptions/${encodeURIComponent(format)}/${encodeURIComponent(entry)}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Payabli.File_, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Payabli.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Payabli.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Payabli.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Payabli.ServiceUnavailableError(
                        _response.error.body as Payabli.PayabliApiResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.PayabliError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PayabliError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PayabliTimeoutError(
                    "Timeout exceeded when calling GET /Export/subscriptions/{format}/{entry}.",
                );
            case "unknown":
                throw new errors.PayabliError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Export a list of subscriptions for an organization. Use filters to limit results.
     *
     * @param {Payabli.ExportFormat1} format - Format for the export, either XLSX or CSV.
     * @param {number} orgId - The numeric identifier for organization, assigned by Payabli.
     * @param {Payabli.ExportSubscriptionsOrgRequest} request
     * @param {Export.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Payabli.BadRequestError}
     * @throws {@link Payabli.UnauthorizedError}
     * @throws {@link Payabli.InternalServerError}
     * @throws {@link Payabli.ServiceUnavailableError}
     *
     * @example
     *     await client.export.exportSubscriptionsOrg("csv", 123, {
     *         columnsExport: "BatchDate:Batch_Date,PaypointName:Legal_name",
     *         fromRecord: 251,
     *         limitRecord: 1000
     *     })
     */
    public exportSubscriptionsOrg(
        format: Payabli.ExportFormat1,
        orgId: number,
        request: Payabli.ExportSubscriptionsOrgRequest = {},
        requestOptions?: Export.RequestOptions,
    ): core.HttpResponsePromise<Payabli.File_> {
        return core.HttpResponsePromise.fromPromise(
            this.__exportSubscriptionsOrg(format, orgId, request, requestOptions),
        );
    }

    private async __exportSubscriptionsOrg(
        format: Payabli.ExportFormat1,
        orgId: number,
        request: Payabli.ExportSubscriptionsOrgRequest = {},
        requestOptions?: Export.RequestOptions,
    ): Promise<core.WithRawResponse<Payabli.File_>> {
        const { columnsExport, fromRecord, limitRecord, parameters } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (columnsExport != null) {
            _queryParams["columnsExport"] = columnsExport;
        }

        if (fromRecord != null) {
            _queryParams["fromRecord"] = fromRecord.toString();
        }

        if (limitRecord != null) {
            _queryParams["limitRecord"] = limitRecord.toString();
        }

        if (parameters != null) {
            _queryParams["parameters"] = toJson(parameters);
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PayabliEnvironment.Sandbox,
                `Export/subscriptions/${encodeURIComponent(format)}/org/${encodeURIComponent(orgId)}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Payabli.File_, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Payabli.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Payabli.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Payabli.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Payabli.ServiceUnavailableError(
                        _response.error.body as Payabli.PayabliApiResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.PayabliError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PayabliError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PayabliTimeoutError(
                    "Timeout exceeded when calling GET /Export/subscriptions/{format}/org/{orgId}.",
                );
            case "unknown":
                throw new errors.PayabliError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Export a list of transactions for an entrypoint in a file in XLXS or CSV format. Use filters to limit results. If you don't specify a date range in the request, the last two months of data are returned.
     *
     * @param {string} entry - The paypoint's entrypoint identifier. [Learn more](/api-reference/api-overview#entrypoint-vs-entry)
     * @param {Payabli.ExportFormat1} format - Format for the export, either XLSX or CSV.
     * @param {Payabli.ExportTransactionsRequest} request
     * @param {Export.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Payabli.BadRequestError}
     * @throws {@link Payabli.UnauthorizedError}
     * @throws {@link Payabli.InternalServerError}
     * @throws {@link Payabli.ServiceUnavailableError}
     *
     * @example
     *     await client.export.exportTransactions("8cfec329267", "csv", {
     *         columnsExport: "BatchDate:Batch_Date,PaypointName:Legal_name",
     *         fromRecord: 251,
     *         limitRecord: 1000
     *     })
     */
    public exportTransactions(
        entry: string,
        format: Payabli.ExportFormat1,
        request: Payabli.ExportTransactionsRequest = {},
        requestOptions?: Export.RequestOptions,
    ): core.HttpResponsePromise<Payabli.File_> {
        return core.HttpResponsePromise.fromPromise(this.__exportTransactions(entry, format, request, requestOptions));
    }

    private async __exportTransactions(
        entry: string,
        format: Payabli.ExportFormat1,
        request: Payabli.ExportTransactionsRequest = {},
        requestOptions?: Export.RequestOptions,
    ): Promise<core.WithRawResponse<Payabli.File_>> {
        const { columnsExport, fromRecord, limitRecord, parameters } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (columnsExport != null) {
            _queryParams["columnsExport"] = columnsExport;
        }

        if (fromRecord != null) {
            _queryParams["fromRecord"] = fromRecord.toString();
        }

        if (limitRecord != null) {
            _queryParams["limitRecord"] = limitRecord.toString();
        }

        if (parameters != null) {
            _queryParams["parameters"] = toJson(parameters);
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PayabliEnvironment.Sandbox,
                `Export/transactions/${encodeURIComponent(format)}/${encodeURIComponent(entry)}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Payabli.File_, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Payabli.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Payabli.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Payabli.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Payabli.ServiceUnavailableError(
                        _response.error.body as Payabli.PayabliApiResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.PayabliError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PayabliError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PayabliTimeoutError(
                    "Timeout exceeded when calling GET /Export/transactions/{format}/{entry}.",
                );
            case "unknown":
                throw new errors.PayabliError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Export a list of transactions for an org in a file in XLSX or CSV format. Use filters to limit results. If you don't specify a date range in the request, the last two months of data are returned.
     *
     * @param {Payabli.ExportFormat1} format - Format for the export, either XLSX or CSV.
     * @param {number} orgId - The numeric identifier for organization, assigned by Payabli.
     * @param {Payabli.ExportTransactionsOrgRequest} request
     * @param {Export.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Payabli.BadRequestError}
     * @throws {@link Payabli.UnauthorizedError}
     * @throws {@link Payabli.InternalServerError}
     * @throws {@link Payabli.ServiceUnavailableError}
     *
     * @example
     *     await client.export.exportTransactionsOrg("csv", 123, {
     *         columnsExport: "BatchDate:Batch_Date,PaypointName:Legal_name",
     *         fromRecord: 251,
     *         limitRecord: 1000
     *     })
     */
    public exportTransactionsOrg(
        format: Payabli.ExportFormat1,
        orgId: number,
        request: Payabli.ExportTransactionsOrgRequest = {},
        requestOptions?: Export.RequestOptions,
    ): core.HttpResponsePromise<Payabli.File_> {
        return core.HttpResponsePromise.fromPromise(
            this.__exportTransactionsOrg(format, orgId, request, requestOptions),
        );
    }

    private async __exportTransactionsOrg(
        format: Payabli.ExportFormat1,
        orgId: number,
        request: Payabli.ExportTransactionsOrgRequest = {},
        requestOptions?: Export.RequestOptions,
    ): Promise<core.WithRawResponse<Payabli.File_>> {
        const { columnsExport, fromRecord, limitRecord, parameters } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (columnsExport != null) {
            _queryParams["columnsExport"] = columnsExport;
        }

        if (fromRecord != null) {
            _queryParams["fromRecord"] = fromRecord.toString();
        }

        if (limitRecord != null) {
            _queryParams["limitRecord"] = limitRecord.toString();
        }

        if (parameters != null) {
            _queryParams["parameters"] = toJson(parameters);
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PayabliEnvironment.Sandbox,
                `Export/transactions/${encodeURIComponent(format)}/org/${encodeURIComponent(orgId)}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Payabli.File_, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Payabli.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Payabli.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Payabli.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Payabli.ServiceUnavailableError(
                        _response.error.body as Payabli.PayabliApiResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.PayabliError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PayabliError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PayabliTimeoutError(
                    "Timeout exceeded when calling GET /Export/transactions/{format}/org/{orgId}.",
                );
            case "unknown":
                throw new errors.PayabliError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Export a list of transfer details for an entrypoint. Use filters to limit results.
     *
     * @param {string} entry - The paypoint's entrypoint identifier. [Learn more](/api-reference/api-overview#entrypoint-vs-entry)
     * @param {Payabli.ExportFormat1} format - Format for the export, either XLSX or CSV.
     * @param {number} transferId - Transfer identifier.
     * @param {Payabli.ExportTransferDetailsRequest} request
     * @param {Export.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Payabli.BadRequestError}
     * @throws {@link Payabli.UnauthorizedError}
     * @throws {@link Payabli.InternalServerError}
     * @throws {@link Payabli.ServiceUnavailableError}
     *
     * @example
     *     await client.export.exportTransferDetails("8cfec329267", "csv", 1000000, {
     *         columnsExport: "BatchDate:Batch_Date,PaypointName:Legal_name",
     *         fromRecord: 251,
     *         limitRecord: 1000,
     *         sortBy: "desc(field_name)"
     *     })
     */
    public exportTransferDetails(
        entry: string,
        format: Payabli.ExportFormat1,
        transferId: number,
        request: Payabli.ExportTransferDetailsRequest = {},
        requestOptions?: Export.RequestOptions,
    ): core.HttpResponsePromise<Payabli.File_> {
        return core.HttpResponsePromise.fromPromise(
            this.__exportTransferDetails(entry, format, transferId, request, requestOptions),
        );
    }

    private async __exportTransferDetails(
        entry: string,
        format: Payabli.ExportFormat1,
        transferId: number,
        request: Payabli.ExportTransferDetailsRequest = {},
        requestOptions?: Export.RequestOptions,
    ): Promise<core.WithRawResponse<Payabli.File_>> {
        const { columnsExport, fromRecord, limitRecord, parameters, sortBy } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (columnsExport != null) {
            _queryParams["columnsExport"] = columnsExport;
        }

        if (fromRecord != null) {
            _queryParams["fromRecord"] = fromRecord.toString();
        }

        if (limitRecord != null) {
            _queryParams["limitRecord"] = limitRecord.toString();
        }

        if (parameters != null) {
            _queryParams["parameters"] = toJson(parameters);
        }

        if (sortBy != null) {
            _queryParams["sortBy"] = sortBy;
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PayabliEnvironment.Sandbox,
                `Export/transferDetails/${encodeURIComponent(format)}/${encodeURIComponent(entry)}/${encodeURIComponent(transferId)}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Payabli.File_, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Payabli.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Payabli.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Payabli.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Payabli.ServiceUnavailableError(
                        _response.error.body as Payabli.PayabliApiResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.PayabliError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PayabliError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PayabliTimeoutError(
                    "Timeout exceeded when calling GET /Export/transferDetails/{format}/{entry}/{transferId}.",
                );
            case "unknown":
                throw new errors.PayabliError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Get a list of transfers for an entrypoint. Use filters to limit results.
     *
     * @param {string} entry - The paypoint's entrypoint identifier. [Learn more](/api-reference/api-overview#entrypoint-vs-entry)
     * @param {Payabli.ExportTransfersRequest} request
     * @param {Export.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Payabli.BadRequestError}
     * @throws {@link Payabli.UnauthorizedError}
     * @throws {@link Payabli.InternalServerError}
     * @throws {@link Payabli.ServiceUnavailableError}
     *
     * @example
     *     await client.export.exportTransfers("8cfec329267", {
     *         columnsExport: "BatchDate:Batch_Date,PaypointName:Legal_name",
     *         fromRecord: 251,
     *         limitRecord: 1000,
     *         sortBy: "desc(field_name)"
     *     })
     */
    public exportTransfers(
        entry: string,
        request: Payabli.ExportTransfersRequest = {},
        requestOptions?: Export.RequestOptions,
    ): core.HttpResponsePromise<Payabli.File_> {
        return core.HttpResponsePromise.fromPromise(this.__exportTransfers(entry, request, requestOptions));
    }

    private async __exportTransfers(
        entry: string,
        request: Payabli.ExportTransfersRequest = {},
        requestOptions?: Export.RequestOptions,
    ): Promise<core.WithRawResponse<Payabli.File_>> {
        const { columnsExport, fromRecord, limitRecord, parameters, sortBy } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (columnsExport != null) {
            _queryParams["columnsExport"] = columnsExport;
        }

        if (fromRecord != null) {
            _queryParams["fromRecord"] = fromRecord.toString();
        }

        if (limitRecord != null) {
            _queryParams["limitRecord"] = limitRecord.toString();
        }

        if (parameters != null) {
            _queryParams["parameters"] = toJson(parameters);
        }

        if (sortBy != null) {
            _queryParams["sortBy"] = sortBy;
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PayabliEnvironment.Sandbox,
                `Export/transfers/${encodeURIComponent(entry)}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Payabli.File_, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Payabli.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Payabli.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Payabli.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Payabli.ServiceUnavailableError(
                        _response.error.body as Payabli.PayabliApiResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.PayabliError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PayabliError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PayabliTimeoutError("Timeout exceeded when calling GET /Export/transfers/{entry}.");
            case "unknown":
                throw new errors.PayabliError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Export a list of vendors for an entrypoint. Use filters to limit results.
     *
     * @param {string} entry - The paypoint's entrypoint identifier. [Learn more](/api-reference/api-overview#entrypoint-vs-entry)
     * @param {Payabli.ExportFormat1} format - Format for the export, either XLSX or CSV.
     * @param {Payabli.ExportVendorsRequest} request
     * @param {Export.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Payabli.BadRequestError}
     * @throws {@link Payabli.UnauthorizedError}
     * @throws {@link Payabli.InternalServerError}
     * @throws {@link Payabli.ServiceUnavailableError}
     *
     * @example
     *     await client.export.exportVendors("8cfec329267", "csv", {
     *         columnsExport: "BatchDate:Batch_Date,PaypointName:Legal_name",
     *         fromRecord: 251,
     *         limitRecord: 1000
     *     })
     */
    public exportVendors(
        entry: string,
        format: Payabli.ExportFormat1,
        request: Payabli.ExportVendorsRequest = {},
        requestOptions?: Export.RequestOptions,
    ): core.HttpResponsePromise<Payabli.File_> {
        return core.HttpResponsePromise.fromPromise(this.__exportVendors(entry, format, request, requestOptions));
    }

    private async __exportVendors(
        entry: string,
        format: Payabli.ExportFormat1,
        request: Payabli.ExportVendorsRequest = {},
        requestOptions?: Export.RequestOptions,
    ): Promise<core.WithRawResponse<Payabli.File_>> {
        const { columnsExport, fromRecord, limitRecord, parameters } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (columnsExport != null) {
            _queryParams["columnsExport"] = columnsExport;
        }

        if (fromRecord != null) {
            _queryParams["fromRecord"] = fromRecord.toString();
        }

        if (limitRecord != null) {
            _queryParams["limitRecord"] = limitRecord.toString();
        }

        if (parameters != null) {
            _queryParams["parameters"] = toJson(parameters);
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PayabliEnvironment.Sandbox,
                `Export/vendors/${encodeURIComponent(format)}/${encodeURIComponent(entry)}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Payabli.File_, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Payabli.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Payabli.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Payabli.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Payabli.ServiceUnavailableError(
                        _response.error.body as Payabli.PayabliApiResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.PayabliError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PayabliError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PayabliTimeoutError(
                    "Timeout exceeded when calling GET /Export/vendors/{format}/{entry}.",
                );
            case "unknown":
                throw new errors.PayabliError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Export a list of vendors for an organization. Use filters to limit results.
     *
     * @param {Payabli.ExportFormat1} format - Format for the export, either XLSX or CSV.
     * @param {number} orgId - The numeric identifier for organization, assigned by Payabli.
     * @param {Payabli.ExportVendorsOrgRequest} request
     * @param {Export.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Payabli.BadRequestError}
     * @throws {@link Payabli.UnauthorizedError}
     * @throws {@link Payabli.InternalServerError}
     * @throws {@link Payabli.ServiceUnavailableError}
     *
     * @example
     *     await client.export.exportVendorsOrg("csv", 123, {
     *         columnsExport: "BatchDate:Batch_Date,PaypointName:Legal_name",
     *         fromRecord: 251,
     *         limitRecord: 1000
     *     })
     */
    public exportVendorsOrg(
        format: Payabli.ExportFormat1,
        orgId: number,
        request: Payabli.ExportVendorsOrgRequest = {},
        requestOptions?: Export.RequestOptions,
    ): core.HttpResponsePromise<Payabli.File_> {
        return core.HttpResponsePromise.fromPromise(this.__exportVendorsOrg(format, orgId, request, requestOptions));
    }

    private async __exportVendorsOrg(
        format: Payabli.ExportFormat1,
        orgId: number,
        request: Payabli.ExportVendorsOrgRequest = {},
        requestOptions?: Export.RequestOptions,
    ): Promise<core.WithRawResponse<Payabli.File_>> {
        const { columnsExport, fromRecord, limitRecord, parameters } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (columnsExport != null) {
            _queryParams["columnsExport"] = columnsExport;
        }

        if (fromRecord != null) {
            _queryParams["fromRecord"] = fromRecord.toString();
        }

        if (limitRecord != null) {
            _queryParams["limitRecord"] = limitRecord.toString();
        }

        if (parameters != null) {
            _queryParams["parameters"] = toJson(parameters);
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PayabliEnvironment.Sandbox,
                `Export/vendors/${encodeURIComponent(format)}/org/${encodeURIComponent(orgId)}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Payabli.File_, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Payabli.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Payabli.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Payabli.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Payabli.ServiceUnavailableError(
                        _response.error.body as Payabli.PayabliApiResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.PayabliError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PayabliError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PayabliTimeoutError(
                    "Timeout exceeded when calling GET /Export/vendors/{format}/org/{orgId}.",
                );
            case "unknown":
                throw new errors.PayabliError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getCustomAuthorizationHeaders() {
        const apiKeyValue = await core.Supplier.get(this._options.apiKey);
        return { requestToken: apiKeyValue };
    }
}
