/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as Payabli from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";

export declare namespace Subscription {
    export interface Options {
        environment?: core.Supplier<environments.PayabliEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey?: core.Supplier<string | undefined>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class Subscription {
    protected readonly _options: Subscription.Options;

    constructor(_options: Subscription.Options = {}) {
        this._options = _options;
    }

    /**
     * Retrieves a single subscription's details.
     *
     * @param {number} subId - The subscription ID.
     * @param {Subscription.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Payabli.BadRequestError}
     * @throws {@link Payabli.UnauthorizedError}
     * @throws {@link Payabli.InternalServerError}
     * @throws {@link Payabli.ServiceUnavailableError}
     *
     * @example
     *     await client.subscription.getSubscription(263)
     */
    public getSubscription(
        subId: number,
        requestOptions?: Subscription.RequestOptions,
    ): core.HttpResponsePromise<Payabli.SubscriptionQueryRecords> {
        return core.HttpResponsePromise.fromPromise(this.__getSubscription(subId, requestOptions));
    }

    private async __getSubscription(
        subId: number,
        requestOptions?: Subscription.RequestOptions,
    ): Promise<core.WithRawResponse<Payabli.SubscriptionQueryRecords>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PayabliEnvironment.Sandbox,
                `Subscription/${encodeURIComponent(subId)}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Payabli.SubscriptionQueryRecords, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Payabli.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Payabli.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Payabli.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Payabli.ServiceUnavailableError(
                        _response.error.body as Payabli.PayabliApiResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.PayabliError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PayabliError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PayabliTimeoutError("Timeout exceeded when calling GET /Subscription/{subId}.");
            case "unknown":
                throw new errors.PayabliError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Creates a subscription or scheduled payment to run at a specified time and frequency.
     *
     * @param {Payabli.RequestSchedule} request
     * @param {Subscription.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Payabli.BadRequestError}
     * @throws {@link Payabli.UnauthorizedError}
     * @throws {@link Payabli.InternalServerError}
     * @throws {@link Payabli.ServiceUnavailableError}
     *
     * @example
     *     await client.subscription.newSubscription({
     *         body: {
     *             customerData: {
     *                 customerId: 4440
     *             },
     *             entryPoint: "f743aed24a",
     *             paymentDetails: {
     *                 serviceFee: 0,
     *                 totalAmount: 100
     *             },
     *             paymentMethod: {
     *                 cardcvv: "123",
     *                 cardexp: "02/25",
     *                 cardHolder: "John Cassian",
     *                 cardnumber: "4111111111111111",
     *                 cardzip: "37615",
     *                 initiator: "payor",
     *                 method: "card"
     *             },
     *             scheduleDetails: {
     *                 endDate: "03-20-2025",
     *                 frequency: "weekly",
     *                 planId: 1,
     *                 startDate: "09-20-2024"
     *             }
     *         }
     *     })
     *
     * @example
     *     await client.subscription.newSubscription({
     *         body: {
     *             customerData: {
     *                 customerId: 4440
     *             },
     *             entryPoint: "f743aed24a",
     *             paymentDetails: {
     *                 serviceFee: 0,
     *                 totalAmount: 100
     *             },
     *             paymentMethod: {
     *                 achAccount: "3453445666",
     *                 achAccountType: "Checking",
     *                 achCode: "PPD",
     *                 achHolder: "John Cassian",
     *                 achHolderType: "personal",
     *                 achRouting: "021000021",
     *                 method: "ach"
     *             },
     *             scheduleDetails: {
     *                 endDate: "03-20-2025",
     *                 frequency: "weekly",
     *                 planId: 1,
     *                 startDate: "09-20-2024"
     *             }
     *         }
     *     })
     *
     * @example
     *     await client.subscription.newSubscription({
     *         body: {
     *             customerData: {
     *                 customerId: 4440
     *             },
     *             entryPoint: "f743aed24a",
     *             paymentDetails: {
     *                 serviceFee: 0,
     *                 totalAmount: 100
     *             },
     *             paymentMethod: {
     *                 initiator: "merchant",
     *                 storedMethodId: "4000e8c6-3add-4200-8ac2-9b8a4f8b1639-1323",
     *                 storedMethodUsageType: "recurring"
     *             },
     *             scheduleDetails: {
     *                 endDate: "03-20-2025",
     *                 frequency: "weekly",
     *                 planId: 1,
     *                 startDate: "09-20-2024"
     *             }
     *         }
     *     })
     */
    public newSubscription(
        request: Payabli.RequestSchedule,
        requestOptions?: Subscription.RequestOptions,
    ): core.HttpResponsePromise<Payabli.AddSubscriptionResponse> {
        return core.HttpResponsePromise.fromPromise(this.__newSubscription(request, requestOptions));
    }

    private async __newSubscription(
        request: Payabli.RequestSchedule,
        requestOptions?: Subscription.RequestOptions,
    ): Promise<core.WithRawResponse<Payabli.AddSubscriptionResponse>> {
        const { forceCustomerCreation, idempotencyKey, body: _body } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (forceCustomerCreation != null) {
            _queryParams["forceCustomerCreation"] = forceCustomerCreation.toString();
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                idempotencyKey: idempotencyKey != null ? idempotencyKey : undefined,
                ...(await this._getCustomAuthorizationHeaders()),
            }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PayabliEnvironment.Sandbox,
                "Subscription/add",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            requestType: "json",
            body: _body,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Payabli.AddSubscriptionResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Payabli.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Payabli.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Payabli.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Payabli.ServiceUnavailableError(
                        _response.error.body as Payabli.PayabliApiResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.PayabliError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PayabliError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PayabliTimeoutError("Timeout exceeded when calling POST /Subscription/add.");
            case "unknown":
                throw new errors.PayabliError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Deletes a subscription, autopay, or recurring payment and prevents future charges.
     *
     * @param {number} subId - The subscription ID.
     * @param {Subscription.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Payabli.BadRequestError}
     * @throws {@link Payabli.UnauthorizedError}
     * @throws {@link Payabli.InternalServerError}
     * @throws {@link Payabli.ServiceUnavailableError}
     *
     * @example
     *     await client.subscription.removeSubscription(396)
     */
    public removeSubscription(
        subId: number,
        requestOptions?: Subscription.RequestOptions,
    ): core.HttpResponsePromise<Payabli.RemoveSubscriptionResponse> {
        return core.HttpResponsePromise.fromPromise(this.__removeSubscription(subId, requestOptions));
    }

    private async __removeSubscription(
        subId: number,
        requestOptions?: Subscription.RequestOptions,
    ): Promise<core.WithRawResponse<Payabli.RemoveSubscriptionResponse>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PayabliEnvironment.Sandbox,
                `Subscription/${encodeURIComponent(subId)}`,
            ),
            method: "DELETE",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Payabli.RemoveSubscriptionResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Payabli.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Payabli.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Payabli.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Payabli.ServiceUnavailableError(
                        _response.error.body as Payabli.PayabliApiResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.PayabliError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PayabliError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PayabliTimeoutError("Timeout exceeded when calling DELETE /Subscription/{subId}.");
            case "unknown":
                throw new errors.PayabliError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Updates a subscription's details.
     *
     * @param {number} subId - The subscription ID.
     * @param {Payabli.RequestUpdateSchedule} request
     * @param {Subscription.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Payabli.BadRequestError}
     * @throws {@link Payabli.UnauthorizedError}
     * @throws {@link Payabli.InternalServerError}
     * @throws {@link Payabli.ServiceUnavailableError}
     *
     * @example
     *     await client.subscription.updateSubscription(231, {
     *         setPause: true
     *     })
     *
     * @example
     *     await client.subscription.updateSubscription(231, {
     *         setPause: false
     *     })
     *
     * @example
     *     await client.subscription.updateSubscription(231, {
     *         paymentDetails: {
     *             serviceFee: 0,
     *             totalAmount: 100
     *         },
     *         scheduleDetails: {
     *             endDate: "03-20-2025",
     *             frequency: "weekly",
     *             planId: 1,
     *             startDate: "09-20-2024"
     *         }
     *     })
     */
    public updateSubscription(
        subId: number,
        request: Payabli.RequestUpdateSchedule = {},
        requestOptions?: Subscription.RequestOptions,
    ): core.HttpResponsePromise<Payabli.UpdateSubscriptionResponse> {
        return core.HttpResponsePromise.fromPromise(this.__updateSubscription(subId, request, requestOptions));
    }

    private async __updateSubscription(
        subId: number,
        request: Payabli.RequestUpdateSchedule = {},
        requestOptions?: Subscription.RequestOptions,
    ): Promise<core.WithRawResponse<Payabli.UpdateSubscriptionResponse>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PayabliEnvironment.Sandbox,
                `Subscription/${encodeURIComponent(subId)}`,
            ),
            method: "PUT",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Payabli.UpdateSubscriptionResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Payabli.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Payabli.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Payabli.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Payabli.ServiceUnavailableError(
                        _response.error.body as Payabli.PayabliApiResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.PayabliError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PayabliError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PayabliTimeoutError("Timeout exceeded when calling PUT /Subscription/{subId}.");
            case "unknown":
                throw new errors.PayabliError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getCustomAuthorizationHeaders() {
        const apiKeyValue = await core.Supplier.get(this._options.apiKey);
        return { requestToken: apiKeyValue };
    }
}
