/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Payabli from "../../../index";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index";
import { toJson } from "../../../../core/json";

export declare namespace Boarding {
    export interface Options {
        environment?: core.Supplier<environments.PayabliEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey?: core.Supplier<string | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class Boarding {
    constructor(protected readonly _options: Boarding.Options = {}) {}

    /**
     * Creates a boarding application in an organization. This endpoint requires an application API token.
     *
     * @param {Payabli.AddApplicationRequest} request
     * @param {Boarding.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Payabli.BadRequestError}
     * @throws {@link Payabli.UnauthorizedError}
     * @throws {@link Payabli.InternalServerError}
     * @throws {@link Payabli.ServiceUnavailableError}
     *
     * @example
     *     await client.boarding.addApplication({
     *         services: {
     *             ach: {},
     *             card: {
     *                 acceptAmex: true,
     *                 acceptDiscover: true,
     *                 acceptMastercard: true,
     *                 acceptVisa: true
     *             }
     *         },
     *         annualRevenue: 1000,
     *         averageBillSize: "500",
     *         averageMonthlyBill: "5650",
     *         avgmonthly: 1000,
     *         baddress: "123 Walnut Street",
     *         baddress1: "Suite 103",
     *         bankData: {},
     *         bcity: "New Vegas",
     *         bcountry: "US",
     *         binperson: 60,
     *         binphone: 20,
     *         binweb: 20,
     *         bstate: "FL",
     *         bsummary: "Brick and mortar store that sells office supplies",
     *         btype: "Limited Liability Company",
     *         bzip: "33000",
     *         contacts: [{
     *                 contactEmail: "herman@hermanscoatings.com",
     *                 contactName: "Herman Martinez",
     *                 contactPhone: "3055550000",
     *                 contactTitle: "Owner"
     *             }],
     *         creditLimit: "creditLimit",
     *         dbaName: "Sunshine Gutters",
     *         ein: "123456789",
     *         faxnumber: "1234567890",
     *         highticketamt: 1000,
     *         legalName: "Sunshine Services, LLC",
     *         license: "2222222FFG",
     *         licstate: "CA",
     *         maddress: "123 Walnut Street",
     *         maddress1: "STE 900",
     *         mcc: "7777",
     *         mcity: "Johnson City",
     *         mcountry: "US",
     *         mstate: "TN",
     *         mzip: "37615",
     *         ownership: [{
     *                 oaddress: "33 North St",
     *                 ocity: "Any City",
     *                 ocountry: "US",
     *                 odriverstate: "CA",
     *                 ostate: "CA",
     *                 ownerdob: "01/01/1990",
     *                 ownerdriver: "CA6677778",
     *                 owneremail: "test@email.com",
     *                 ownername: "John Smith",
     *                 ownerpercent: 100,
     *                 ownerphone1: "555888111",
     *                 ownerphone2: "555888111",
     *                 ownerssn: "123456789",
     *                 ownertitle: "CEO",
     *                 ozip: "55555"
     *             }],
     *         phonenumber: "1234567890",
     *         processingRegion: "US",
     *         recipientEmail: "josephray@example.com",
     *         recipientEmailNotification: true,
     *         resumable: true,
     *         signer: {
     *             address: "33 North St",
     *             address1: "STE 900",
     *             city: "Bristol",
     *             country: "US",
     *             dob: "01/01/1990",
     *             email: "test@email.com",
     *             name: "John Smith",
     *             phone: "555888111",
     *             ssn: "123456789",
     *             state: "TN",
     *             zip: "55555"
     *         },
     *         startdate: "01/01/1990",
     *         taxFillName: "Sunshine LLC",
     *         templateId: 22,
     *         ticketamt: 1000,
     *         website: "www.example.com",
     *         whenCharged: "When Service Provided",
     *         whenDelivered: "Over 30 Days",
     *         whenProvided: "30 Days or Less",
     *         whenRefunded: "30 Days or Less"
     *     })
     *
     * @example
     *     await client.boarding.addApplication({
     *         annualRevenue: 750000,
     *         baddress: "789 Industrial Parkway",
     *         baddress1: "Unit 12",
     *         bankData: [{
     *                 accountNumber: "1XXXXXX3100",
     *                 bankAccountFunction: 1,
     *                 bankAccountHolderName: "Herman's Coatings LLC",
     *                 bankAccountHolderType: "Business",
     *                 bankName: "First Miami Bank",
     *                 nickname: "Withdrawal Account",
     *                 routingAccount: "123123123",
     *                 typeAccount: "Checking"
     *             }, {
     *                 accountNumber: "1XXXXXX3200",
     *                 bankAccountFunction: 0,
     *                 bankAccountHolderName: "Herman's Coatings LLC",
     *                 bankAccountHolderType: "Business",
     *                 bankName: "First Miami Bank",
     *                 nickname: "Deposit Account",
     *                 routingAccount: "123123123",
     *                 typeAccount: "Checking"
     *             }, {
     *                 accountNumber: "1XXXXXX3123",
     *                 bankAccountFunction: 3,
     *                 bankAccountHolderName: "Herman's Coatings LLC",
     *                 bankAccountHolderType: "Business",
     *                 bankName: "First Miami Bank",
     *                 nickname: "Remittance Account",
     *                 routingAccount: "123123123",
     *                 typeAccount: "Checking"
     *             }],
     *         bcity: "Miami",
     *         bcountry: "US",
     *         bstate: "FL",
     *         bsummary: "Commercial and industrial coating services, including protective and decorative coatings",
     *         btype: "Limited Liability Company",
     *         bzip: "33101",
     *         contacts: [{
     *                 contactEmail: "herman@hermanscoatings.com",
     *                 contactName: "Herman Martinez",
     *                 contactPhone: "3055550000",
     *                 contactTitle: "Owner"
     *             }],
     *         dbaname: "Herman's Coatings",
     *         ein: "123456789",
     *         faxnumber: "3055550001",
     *         legalname: "Herman's Coatings LLC",
     *         license: "FL123456",
     *         licstate: "FL",
     *         maddress: "789 Industrial Parkway",
     *         maddress1: "Unit 12",
     *         mcc: "1799",
     *         mcity: "Miami",
     *         mcountry: "US",
     *         mstate: "FL",
     *         mzip: "33101",
     *         orgId: 123,
     *         ownership: [{
     *                 oaddress: "123 Palm Avenue",
     *                 ocity: "Miami",
     *                 ocountry: "US",
     *                 odriverstate: "FL",
     *                 ostate: "FL",
     *                 ownerdob: "05/15/1980",
     *                 ownerdriver: "FL789456",
     *                 owneremail: "herman@hermanscoatings.com",
     *                 ownername: "Herman Martinez",
     *                 ownerpercent: 100,
     *                 ownerphone1: "3055550000",
     *                 ownerphone2: "3055550002",
     *                 ownerssn: "123456789",
     *                 ownertitle: "Owner",
     *                 ozip: "33102"
     *             }],
     *         phonenumber: "3055550000",
     *         recipientEmail: "herman@hermanscoatings.com",
     *         recipientEmailNotification: true,
     *         resumable: true,
     *         signer: {
     *             address: "123 Palm Avenue",
     *             address1: "",
     *             city: "Miami",
     *             country: "US",
     *             dob: "05/15/1980",
     *             email: "herman@hermanscoatings.com",
     *             name: "Herman Martinez",
     *             phone: "3055550000",
     *             ssn: "123456789",
     *             state: "FL",
     *             zip: "33102"
     *         },
     *         startdate: "01/01/2015",
     *         taxfillname: "Herman's Coatings LLC",
     *         templateId: 22,
     *         website: "www.hermanscoatings.com"
     *     })
     *
     * @example
     *     await client.boarding.addApplication({
     *         services: {
     *             ach: {
     *                 acceptCCD: true,
     *                 acceptPPD: true,
     *                 acceptWeb: true
     *             },
     *             card: {
     *                 acceptAmex: true,
     *                 acceptDiscover: true,
     *                 acceptMastercard: true,
     *                 acceptVisa: true
     *             },
     *             odp: {
     *                 allowAch: true,
     *                 allowChecks: true,
     *                 allowVCard: true,
     *                 processing_region: "US",
     *                 processor: "tsys",
     *                 issuerNetworkSettingsId: "12345678901234"
     *             }
     *         },
     *         annualRevenue: 750000,
     *         baddress: "789 Industrial Parkway",
     *         baddress1: "Unit 12",
     *         bankData: [{
     *                 accountNumber: "1XXXXXX3100",
     *                 bankAccountFunction: 1,
     *                 bankAccountHolderName: "Herman's Coatings LLC",
     *                 bankAccountHolderType: "Business",
     *                 bankName: "First Miami Bank",
     *                 nickname: "Withdrawal Account",
     *                 routingAccount: "123123123",
     *                 typeAccount: "Checking"
     *             }, {
     *                 accountNumber: "1XXXXXX3200",
     *                 bankAccountFunction: 0,
     *                 bankAccountHolderName: "Herman's Coatings LLC",
     *                 bankAccountHolderType: "Business",
     *                 bankName: "First Miami Bank",
     *                 nickname: "Deposit Account",
     *                 routingAccount: "123123123",
     *                 typeAccount: "Checking"
     *             }, {
     *                 accountNumber: "1XXXXXX3123",
     *                 bankAccountFunction: 3,
     *                 bankAccountHolderName: "Herman's Coatings LLC",
     *                 bankAccountHolderType: "Business",
     *                 bankName: "First Miami Bank",
     *                 nickname: "Remittance Account",
     *                 routingAccount: "123123123",
     *                 typeAccount: "Checking"
     *             }],
     *         bcity: "Miami",
     *         bcountry: "US",
     *         bstate: "FL",
     *         bsummary: "Commercial and industrial coating services, including protective and decorative coatings",
     *         btype: "Limited Liability Company",
     *         bzip: "33101",
     *         contacts: [{
     *                 contactEmail: "herman@hermanscoatings.com",
     *                 contactName: "Herman Martinez",
     *                 contactPhone: "3055550000",
     *                 contactTitle: "Owner"
     *             }],
     *         dbaname: "Herman's Coatings",
     *         ein: "123456789",
     *         faxnumber: "3055550001",
     *         highticketamt: 15000,
     *         legalname: "Herman's Coatings LLC",
     *         license: "FL123456",
     *         licstate: "FL",
     *         maddress: "789 Industrial Parkway",
     *         maddress1: "Unit 12",
     *         mcc: "1799",
     *         mcity: "Miami",
     *         mcountry: "US",
     *         mstate: "FL",
     *         mzip: "33101",
     *         orgId: 123,
     *         ownership: [{
     *                 oaddress: "123 Palm Avenue",
     *                 ocity: "Miami",
     *                 ocountry: "US",
     *                 odriverstate: "FL",
     *                 ostate: "FL",
     *                 ownerdob: "05/15/1980",
     *                 ownerdriver: "FL789456",
     *                 owneremail: "herman@hermanscoatings.com",
     *                 ownername: "Herman Martinez",
     *                 ownerpercent: 100,
     *                 ownerphone1: "3055550000",
     *                 ownerphone2: "3055550002",
     *                 ownerssn: "123456789",
     *                 ownertitle: "Owner",
     *                 ozip: "33102"
     *             }],
     *         payoutAverageMonthlyVolume: 50000,
     *         payoutAverageTicketAmount: 3500,
     *         payoutCreditLimit: 25000,
     *         payoutHighTicketAmount: 15000,
     *         phonenumber: "3055550000",
     *         recipientEmail: "herman@hermanscoatings.com",
     *         recipientEmailNotification: true,
     *         resumable: true,
     *         signer: {
     *             address: "123 Palm Avenue",
     *             address1: "",
     *             city: "Miami",
     *             country: "US",
     *             dob: "05/15/1980",
     *             email: "herman@hermanscoatings.com",
     *             name: "Herman Martinez",
     *             phone: "3055550000",
     *             ssn: "123456789",
     *             state: "FL",
     *             zip: "33102"
     *         },
     *         startdate: "01/01/2015",
     *         taxfillname: "Herman's Coatings LLC",
     *         templateId: 22,
     *         website: "www.hermanscoatings.com"
     *     })
     *
     * @example
     *     await client.boarding.addApplication({
     *         services: {
     *             ach: {
     *                 acceptCCD: true,
     *                 acceptPPD: true,
     *                 acceptWeb: true
     *             },
     *             card: {
     *                 acceptAmex: true,
     *                 acceptDiscover: true,
     *                 acceptMastercard: true,
     *                 acceptVisa: true
     *             },
     *             odp: {
     *                 allowAch: false,
     *                 allowChecks: false,
     *                 allowVCard: false
     *             }
     *         },
     *         annualRevenue: 750000,
     *         attachments: [{}, {}],
     *         baddress: "789 Industrial Parkway",
     *         baddress1: "Unit 12",
     *         bankData: [{
     *                 accountNumber: "1XXXXXX3100",
     *                 bankAccountFunction: 1,
     *                 bankAccountHolderName: "Herman's Coatings LLC",
     *                 bankAccountHolderType: "Business",
     *                 bankName: "First Miami Bank",
     *                 id: 123,
     *                 nickname: "Withdrawal Account",
     *                 routingAccount: "123123123",
     *                 typeAccount: "Checking"
     *             }, {
     *                 accountNumber: "1XXXXXX3200",
     *                 bankAccountFunction: 0,
     *                 bankAccountHolderName: "Herman's Coatings LLC",
     *                 bankAccountHolderType: "Business",
     *                 bankName: "First Miami Bank",
     *                 id: 456,
     *                 nickname: "Deposit Account",
     *                 routingAccount: "123123123",
     *                 typeAccount: "Checking"
     *             }, {
     *                 accountNumber: "1XXXXXX3123",
     *                 bankAccountFunction: 3,
     *                 bankAccountHolderName: "Herman's Coatings LLC",
     *                 bankAccountHolderType: "Business",
     *                 bankName: "First Miami Bank",
     *                 id: 987,
     *                 nickname: "Remittance Account",
     *                 routingAccount: "123123123",
     *                 typeAccount: "Checking"
     *             }],
     *         bcity: "Miami",
     *         bcountry: "US",
     *         boardingLinkId: "bl_123456",
     *         bstate: "FL",
     *         bsummary: "Commercial and industrial coating services, including protective and decorative coatings",
     *         btype: "Limited Liability Company",
     *         bzip: "33101",
     *         contacts: [{
     *                 contactEmail: "herman@hermanscoatings.com",
     *                 contactName: "Herman Martinez",
     *                 contactPhone: "3055550000",
     *                 contactTitle: "Owner"
     *             }],
     *         dbaname: "Herman's Coatings",
     *         ein: "123456789",
     *         faxnumber: "3055550001",
     *         highticketamt: 15000,
     *         legalname: "Herman's Coatings LLC",
     *         license: "FL123456",
     *         licstate: "FL",
     *         maddress: "789 Industrial Parkway",
     *         maddress1: "Unit 12",
     *         mcc: "1799",
     *         mcity: "Miami",
     *         mcountry: "US",
     *         mstate: "FL",
     *         mzip: "33101",
     *         orgId: 123,
     *         ownership: [{
     *                 oaddress: "123 Palm Avenue",
     *                 ocity: "Miami",
     *                 ocountry: "US",
     *                 odriverstate: "FL",
     *                 ostate: "FL",
     *                 ownerdob: "05/15/1980",
     *                 ownerdriver: "FL789456",
     *                 owneremail: "herman@hermanscoatings.com",
     *                 ownername: "Herman Martinez",
     *                 ownerpercent: 100,
     *                 ownerphone1: "3055550000",
     *                 ownerphone2: "3055550002",
     *                 ownerssn: "123456789",
     *                 ownertitle: "Owner",
     *                 ozip: "33102"
     *             }],
     *         payoutAverageMonthlyVolume: 50000,
     *         payoutAverageTicketAmount: 500,
     *         payoutCreditLimit: 25000,
     *         payoutHighTicketAmount: 15000,
     *         phonenumber: "3055550000",
     *         recipientEmail: "herman@hermanscoatings.com",
     *         recipientEmailNotification: true,
     *         resumable: true,
     *         signer: {
     *             address: "123 Palm Avenue",
     *             address1: "",
     *             city: "Miami",
     *             country: "US",
     *             dob: "05/15/1980",
     *             email: "herman@hermanscoatings.com",
     *             name: "Herman Martinez",
     *             phone: "3055550000",
     *             ssn: "123456789",
     *             state: "FL",
     *             zip: "33102"
     *         },
     *         startdate: "01/01/2015",
     *         taxfillname: "Herman's Coatings LLC",
     *         templateId: 22,
     *         website: "www.hermanscoatings.com"
     *     })
     */
    public addApplication(
        request: Payabli.AddApplicationRequest,
        requestOptions?: Boarding.RequestOptions,
    ): core.HttpResponsePromise<Payabli.PayabliApiResponse00Responsedatanonobject> {
        return core.HttpResponsePromise.fromPromise(this.__addApplication(request, requestOptions));
    }

    private async __addApplication(
        request: Payabli.AddApplicationRequest,
        requestOptions?: Boarding.RequestOptions,
    ): Promise<core.WithRawResponse<Payabli.PayabliApiResponse00Responsedatanonobject>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PayabliEnvironment.Sandbox,
                "Boarding/app",
            ),
            method: "POST",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@payabli/sdk-node",
                "X-Fern-SDK-Version": "0.0.58-8",
                "User-Agent": "@payabli/sdk-node/0.0.58-8",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as Payabli.PayabliApiResponse00Responsedatanonobject,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Payabli.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Payabli.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Payabli.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Payabli.ServiceUnavailableError(
                        _response.error.body as Payabli.PayabliApiResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.PayabliError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PayabliError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PayabliTimeoutError("Timeout exceeded when calling POST /Boarding/app.");
            case "unknown":
                throw new errors.PayabliError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Deletes a boarding application by ID.
     *
     * @param {number} appId - Boarding application ID.
     * @param {Boarding.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Payabli.BadRequestError}
     * @throws {@link Payabli.UnauthorizedError}
     * @throws {@link Payabli.InternalServerError}
     * @throws {@link Payabli.ServiceUnavailableError}
     *
     * @example
     *     await client.boarding.deleteApplication(352)
     */
    public deleteApplication(
        appId: number,
        requestOptions?: Boarding.RequestOptions,
    ): core.HttpResponsePromise<Payabli.PayabliApiResponse00Responsedatanonobject> {
        return core.HttpResponsePromise.fromPromise(this.__deleteApplication(appId, requestOptions));
    }

    private async __deleteApplication(
        appId: number,
        requestOptions?: Boarding.RequestOptions,
    ): Promise<core.WithRawResponse<Payabli.PayabliApiResponse00Responsedatanonobject>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PayabliEnvironment.Sandbox,
                `Boarding/app/${encodeURIComponent(appId)}`,
            ),
            method: "DELETE",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@payabli/sdk-node",
                "X-Fern-SDK-Version": "0.0.58-8",
                "User-Agent": "@payabli/sdk-node/0.0.58-8",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as Payabli.PayabliApiResponse00Responsedatanonobject,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Payabli.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Payabli.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Payabli.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Payabli.ServiceUnavailableError(
                        _response.error.body as Payabli.PayabliApiResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.PayabliError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PayabliError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PayabliTimeoutError("Timeout exceeded when calling DELETE /Boarding/app/{appId}.");
            case "unknown":
                throw new errors.PayabliError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Retrieves the details for a boarding application by ID.
     *
     * @param {number} appId - Boarding application ID.
     * @param {Boarding.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Payabli.BadRequestError}
     * @throws {@link Payabli.UnauthorizedError}
     * @throws {@link Payabli.InternalServerError}
     * @throws {@link Payabli.ServiceUnavailableError}
     *
     * @example
     *     await client.boarding.getApplication(352)
     */
    public getApplication(
        appId: number,
        requestOptions?: Boarding.RequestOptions,
    ): core.HttpResponsePromise<Payabli.ApplicationDetailsRecord> {
        return core.HttpResponsePromise.fromPromise(this.__getApplication(appId, requestOptions));
    }

    private async __getApplication(
        appId: number,
        requestOptions?: Boarding.RequestOptions,
    ): Promise<core.WithRawResponse<Payabli.ApplicationDetailsRecord>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PayabliEnvironment.Sandbox,
                `Boarding/read/${encodeURIComponent(appId)}`,
            ),
            method: "GET",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@payabli/sdk-node",
                "X-Fern-SDK-Version": "0.0.58-8",
                "User-Agent": "@payabli/sdk-node/0.0.58-8",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Payabli.ApplicationDetailsRecord, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Payabli.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Payabli.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Payabli.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Payabli.ServiceUnavailableError(
                        _response.error.body as Payabli.PayabliApiResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.PayabliError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PayabliError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PayabliTimeoutError("Timeout exceeded when calling GET /Boarding/read/{appId}.");
            case "unknown":
                throw new errors.PayabliError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Gets a boarding application by authentication information. This endpoint requires an `application` API token.
     *
     * @param {string} xId - The application ID in Hex format. Find this at the end of the boarding link URL returned in a call to api/Boarding/applink/{appId}/{mail2}. For example in:  `https://boarding-sandbox.payabli.com/boarding/externalapp/load/17E`, the xId is `17E`.
     * @param {Payabli.RequestAppByAuth} request
     * @param {Boarding.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Payabli.BadRequestError}
     * @throws {@link Payabli.UnauthorizedError}
     * @throws {@link Payabli.InternalServerError}
     * @throws {@link Payabli.ServiceUnavailableError}
     *
     * @example
     *     await client.boarding.getApplicationByAuth("17E", {
     *         email: "admin@email.com",
     *         referenceId: "n6UCd1f1ygG7"
     *     })
     */
    public getApplicationByAuth(
        xId: string,
        request: Payabli.RequestAppByAuth = {},
        requestOptions?: Boarding.RequestOptions,
    ): core.HttpResponsePromise<Payabli.ApplicationQueryRecord> {
        return core.HttpResponsePromise.fromPromise(this.__getApplicationByAuth(xId, request, requestOptions));
    }

    private async __getApplicationByAuth(
        xId: string,
        request: Payabli.RequestAppByAuth = {},
        requestOptions?: Boarding.RequestOptions,
    ): Promise<core.WithRawResponse<Payabli.ApplicationQueryRecord>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PayabliEnvironment.Sandbox,
                `Boarding/read/${encodeURIComponent(xId)}`,
            ),
            method: "POST",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@payabli/sdk-node",
                "X-Fern-SDK-Version": "0.0.58-8",
                "User-Agent": "@payabli/sdk-node/0.0.58-8",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Payabli.ApplicationQueryRecord, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Payabli.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Payabli.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Payabli.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Payabli.ServiceUnavailableError(
                        _response.error.body as Payabli.PayabliApiResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.PayabliError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PayabliError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PayabliTimeoutError("Timeout exceeded when calling POST /Boarding/read/{xId}.");
            case "unknown":
                throw new errors.PayabliError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Retrieves details for a boarding link, by ID.
     *
     * @param {number} boardingLinkId - The boarding link ID. Can be found at the end of the boarding link reference name.  The boarding link reference name. For example `https://boarding.payabli.com/boarding/app/myorgaccountname-00091`. The ID is `91`.
     * @param {Boarding.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Payabli.BadRequestError}
     * @throws {@link Payabli.UnauthorizedError}
     * @throws {@link Payabli.InternalServerError}
     * @throws {@link Payabli.ServiceUnavailableError}
     *
     * @example
     *     await client.boarding.getByIdLinkApplication(91)
     */
    public getByIdLinkApplication(
        boardingLinkId: number,
        requestOptions?: Boarding.RequestOptions,
    ): core.HttpResponsePromise<Payabli.BoardingLinkQueryRecord> {
        return core.HttpResponsePromise.fromPromise(this.__getByIdLinkApplication(boardingLinkId, requestOptions));
    }

    private async __getByIdLinkApplication(
        boardingLinkId: number,
        requestOptions?: Boarding.RequestOptions,
    ): Promise<core.WithRawResponse<Payabli.BoardingLinkQueryRecord>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PayabliEnvironment.Sandbox,
                `Boarding/linkbyId/${encodeURIComponent(boardingLinkId)}`,
            ),
            method: "GET",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@payabli/sdk-node",
                "X-Fern-SDK-Version": "0.0.58-8",
                "User-Agent": "@payabli/sdk-node/0.0.58-8",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Payabli.BoardingLinkQueryRecord, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Payabli.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Payabli.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Payabli.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Payabli.ServiceUnavailableError(
                        _response.error.body as Payabli.PayabliApiResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.PayabliError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PayabliError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PayabliTimeoutError(
                    "Timeout exceeded when calling GET /Boarding/linkbyId/{boardingLinkId}.",
                );
            case "unknown":
                throw new errors.PayabliError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Get details for a boarding link using the boarding template ID. This endpoint requires an application API token.
     *
     * @param {number} templateId - The boarding template ID. Can be found at the end of the boarding template URL in PartnerHub. Example: `https://partner-sandbox.payabli.com/myorganization/boarding/edittemplate/80`. Here, the template ID is `80`.
     * @param {Boarding.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Payabli.BadRequestError}
     * @throws {@link Payabli.UnauthorizedError}
     * @throws {@link Payabli.InternalServerError}
     * @throws {@link Payabli.ServiceUnavailableError}
     *
     * @example
     *     await client.boarding.getByTemplateIdLinkApplication(80)
     */
    public getByTemplateIdLinkApplication(
        templateId: number,
        requestOptions?: Boarding.RequestOptions,
    ): core.HttpResponsePromise<Payabli.BoardingLinkQueryRecord> {
        return core.HttpResponsePromise.fromPromise(this.__getByTemplateIdLinkApplication(templateId, requestOptions));
    }

    private async __getByTemplateIdLinkApplication(
        templateId: number,
        requestOptions?: Boarding.RequestOptions,
    ): Promise<core.WithRawResponse<Payabli.BoardingLinkQueryRecord>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PayabliEnvironment.Sandbox,
                `Boarding/linkbyTemplate/${encodeURIComponent(templateId)}`,
            ),
            method: "GET",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@payabli/sdk-node",
                "X-Fern-SDK-Version": "0.0.58-8",
                "User-Agent": "@payabli/sdk-node/0.0.58-8",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Payabli.BoardingLinkQueryRecord, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Payabli.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Payabli.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Payabli.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Payabli.ServiceUnavailableError(
                        _response.error.body as Payabli.PayabliApiResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.PayabliError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PayabliError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PayabliTimeoutError(
                    "Timeout exceeded when calling GET /Boarding/linkbyTemplate/{templateId}.",
                );
            case "unknown":
                throw new errors.PayabliError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Retrieves a link and the verification code used to log into an existing boarding application. This endpoint can also be used to send a link and referenceId for an existing boarding application to an email address. The recipient can use the referenceId and email address to access and edit the application.
     *
     * @param {number} appId - Boarding application ID.
     * @param {string} mail2 - Email address used to access the application. If `sendEmail` parameter is true, a link to the application is sent to this email address.
     * @param {Payabli.GetExternalApplicationRequest} request
     * @param {Boarding.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Payabli.BadRequestError}
     * @throws {@link Payabli.UnauthorizedError}
     * @throws {@link Payabli.InternalServerError}
     * @throws {@link Payabli.ServiceUnavailableError}
     *
     * @example
     *     await client.boarding.getExternalApplication(352, "mail2")
     */
    public getExternalApplication(
        appId: number,
        mail2: string,
        request: Payabli.GetExternalApplicationRequest = {},
        requestOptions?: Boarding.RequestOptions,
    ): core.HttpResponsePromise<Payabli.PayabliApiResponse00> {
        return core.HttpResponsePromise.fromPromise(
            this.__getExternalApplication(appId, mail2, request, requestOptions),
        );
    }

    private async __getExternalApplication(
        appId: number,
        mail2: string,
        request: Payabli.GetExternalApplicationRequest = {},
        requestOptions?: Boarding.RequestOptions,
    ): Promise<core.WithRawResponse<Payabli.PayabliApiResponse00>> {
        const { sendEmail } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (sendEmail != null) {
            _queryParams["sendEmail"] = sendEmail.toString();
        }

        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PayabliEnvironment.Sandbox,
                `Boarding/applink/${encodeURIComponent(appId)}/${encodeURIComponent(mail2)}`,
            ),
            method: "PUT",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@payabli/sdk-node",
                "X-Fern-SDK-Version": "0.0.58-8",
                "User-Agent": "@payabli/sdk-node/0.0.58-8",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Payabli.PayabliApiResponse00, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Payabli.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Payabli.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Payabli.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Payabli.ServiceUnavailableError(
                        _response.error.body as Payabli.PayabliApiResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.PayabliError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PayabliError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PayabliTimeoutError(
                    "Timeout exceeded when calling PUT /Boarding/applink/{appId}/{mail2}.",
                );
            case "unknown":
                throw new errors.PayabliError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Retrieves the details for a boarding link, by reference name. This endpoint requires an application API token.
     *
     * @param {string} boardingLinkReference - The boarding link reference name. You can find this at the end of the boarding link URL. For example `https://boarding.payabli.com/boarding/app/myorgaccountname-00091`
     * @param {Boarding.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Payabli.BadRequestError}
     * @throws {@link Payabli.UnauthorizedError}
     * @throws {@link Payabli.InternalServerError}
     * @throws {@link Payabli.ServiceUnavailableError}
     *
     * @example
     *     await client.boarding.getLinkApplication("myorgaccountname-00091")
     */
    public getLinkApplication(
        boardingLinkReference: string,
        requestOptions?: Boarding.RequestOptions,
    ): core.HttpResponsePromise<Payabli.BoardingLinkQueryRecord> {
        return core.HttpResponsePromise.fromPromise(this.__getLinkApplication(boardingLinkReference, requestOptions));
    }

    private async __getLinkApplication(
        boardingLinkReference: string,
        requestOptions?: Boarding.RequestOptions,
    ): Promise<core.WithRawResponse<Payabli.BoardingLinkQueryRecord>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PayabliEnvironment.Sandbox,
                `Boarding/link/${encodeURIComponent(boardingLinkReference)}`,
            ),
            method: "GET",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@payabli/sdk-node",
                "X-Fern-SDK-Version": "0.0.58-8",
                "User-Agent": "@payabli/sdk-node/0.0.58-8",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Payabli.BoardingLinkQueryRecord, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Payabli.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Payabli.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Payabli.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Payabli.ServiceUnavailableError(
                        _response.error.body as Payabli.PayabliApiResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.PayabliError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PayabliError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PayabliTimeoutError(
                    "Timeout exceeded when calling GET /Boarding/link/{boardingLinkReference}.",
                );
            case "unknown":
                throw new errors.PayabliError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Returns a list of boarding applications for an organization. Use filters to limit results.
     *
     * @param {number} orgId - The numeric identifier for organization, assigned by Payabli.
     * @param {Payabli.ListApplicationsRequest} request
     * @param {Boarding.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Payabli.BadRequestError}
     * @throws {@link Payabli.UnauthorizedError}
     * @throws {@link Payabli.InternalServerError}
     * @throws {@link Payabli.ServiceUnavailableError}
     *
     * @example
     *     await client.boarding.listApplications(123, {
     *         fromRecord: 251,
     *         limitRecord: 0,
     *         sortBy: "desc(field_name)"
     *     })
     */
    public listApplications(
        orgId: number,
        request: Payabli.ListApplicationsRequest = {},
        requestOptions?: Boarding.RequestOptions,
    ): core.HttpResponsePromise<Payabli.QueryBoardingAppsListResponse> {
        return core.HttpResponsePromise.fromPromise(this.__listApplications(orgId, request, requestOptions));
    }

    private async __listApplications(
        orgId: number,
        request: Payabli.ListApplicationsRequest = {},
        requestOptions?: Boarding.RequestOptions,
    ): Promise<core.WithRawResponse<Payabli.QueryBoardingAppsListResponse>> {
        const { fromRecord, limitRecord, parameters, sortBy } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (fromRecord != null) {
            _queryParams["fromRecord"] = fromRecord.toString();
        }

        if (limitRecord != null) {
            _queryParams["limitRecord"] = limitRecord.toString();
        }

        if (parameters != null) {
            _queryParams["parameters"] = toJson(parameters);
        }

        if (sortBy != null) {
            _queryParams["sortBy"] = sortBy;
        }

        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PayabliEnvironment.Sandbox,
                `Query/boarding/${encodeURIComponent(orgId)}`,
            ),
            method: "GET",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@payabli/sdk-node",
                "X-Fern-SDK-Version": "0.0.58-8",
                "User-Agent": "@payabli/sdk-node/0.0.58-8",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as Payabli.QueryBoardingAppsListResponse,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Payabli.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Payabli.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Payabli.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Payabli.ServiceUnavailableError(
                        _response.error.body as Payabli.PayabliApiResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.PayabliError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PayabliError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PayabliTimeoutError("Timeout exceeded when calling GET /Query/boarding/{orgId}.");
            case "unknown":
                throw new errors.PayabliError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Return a list of boarding links for an organization. Use filters to limit results.
     *
     * @param {number} orgId - The numeric identifier for organization, assigned by Payabli.
     * @param {Payabli.ListBoardingLinksRequest} request
     * @param {Boarding.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Payabli.BadRequestError}
     * @throws {@link Payabli.UnauthorizedError}
     * @throws {@link Payabli.InternalServerError}
     * @throws {@link Payabli.ServiceUnavailableError}
     *
     * @example
     *     await client.boarding.listBoardingLinks(123, {
     *         fromRecord: 251,
     *         limitRecord: 0,
     *         sortBy: "desc(field_name)"
     *     })
     */
    public listBoardingLinks(
        orgId: number,
        request: Payabli.ListBoardingLinksRequest = {},
        requestOptions?: Boarding.RequestOptions,
    ): core.HttpResponsePromise<Payabli.QueryBoardingLinksResponse> {
        return core.HttpResponsePromise.fromPromise(this.__listBoardingLinks(orgId, request, requestOptions));
    }

    private async __listBoardingLinks(
        orgId: number,
        request: Payabli.ListBoardingLinksRequest = {},
        requestOptions?: Boarding.RequestOptions,
    ): Promise<core.WithRawResponse<Payabli.QueryBoardingLinksResponse>> {
        const { fromRecord, limitRecord, parameters, sortBy } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (fromRecord != null) {
            _queryParams["fromRecord"] = fromRecord.toString();
        }

        if (limitRecord != null) {
            _queryParams["limitRecord"] = limitRecord.toString();
        }

        if (parameters != null) {
            _queryParams["parameters"] = toJson(parameters);
        }

        if (sortBy != null) {
            _queryParams["sortBy"] = sortBy;
        }

        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PayabliEnvironment.Sandbox,
                `Query/boardinglinks/${encodeURIComponent(orgId)}`,
            ),
            method: "GET",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@payabli/sdk-node",
                "X-Fern-SDK-Version": "0.0.58-8",
                "User-Agent": "@payabli/sdk-node/0.0.58-8",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Payabli.QueryBoardingLinksResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Payabli.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Payabli.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Payabli.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Payabli.ServiceUnavailableError(
                        _response.error.body as Payabli.PayabliApiResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.PayabliError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PayabliError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PayabliTimeoutError("Timeout exceeded when calling GET /Query/boardinglinks/{orgId}.");
            case "unknown":
                throw new errors.PayabliError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Updates a boarding application by ID. This endpoint requires an application API token.
     *
     * @param {number} appId - Boarding application ID.
     * @param {Payabli.ApplicationData} request
     * @param {Boarding.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Payabli.BadRequestError}
     * @throws {@link Payabli.UnauthorizedError}
     * @throws {@link Payabli.InternalServerError}
     * @throws {@link Payabli.ServiceUnavailableError}
     *
     * @example
     *     await client.boarding.updateApplication(352, {})
     */
    public updateApplication(
        appId: number,
        request: Payabli.ApplicationData,
        requestOptions?: Boarding.RequestOptions,
    ): core.HttpResponsePromise<Payabli.PayabliApiResponse00Responsedatanonobject> {
        return core.HttpResponsePromise.fromPromise(this.__updateApplication(appId, request, requestOptions));
    }

    private async __updateApplication(
        appId: number,
        request: Payabli.ApplicationData,
        requestOptions?: Boarding.RequestOptions,
    ): Promise<core.WithRawResponse<Payabli.PayabliApiResponse00Responsedatanonobject>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PayabliEnvironment.Sandbox,
                `Boarding/app/${encodeURIComponent(appId)}`,
            ),
            method: "PUT",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@payabli/sdk-node",
                "X-Fern-SDK-Version": "0.0.58-8",
                "User-Agent": "@payabli/sdk-node/0.0.58-8",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as Payabli.PayabliApiResponse00Responsedatanonobject,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Payabli.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Payabli.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Payabli.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Payabli.ServiceUnavailableError(
                        _response.error.body as Payabli.PayabliApiResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.PayabliError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PayabliError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PayabliTimeoutError("Timeout exceeded when calling PUT /Boarding/app/{appId}.");
            case "unknown":
                throw new errors.PayabliError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getCustomAuthorizationHeaders() {
        const apiKeyValue = await core.Supplier.get(this._options.apiKey);
        return { requestToken: apiKeyValue };
    }
}
