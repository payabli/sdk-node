/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Payabli from "../../../index";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index";
import { toJson } from "../../../../core/json";

export declare namespace Invoice {
    export interface Options {
        environment?: core.Supplier<environments.PayabliEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey?: core.Supplier<string | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class Invoice {
    constructor(protected readonly _options: Invoice.Options = {}) {}

    /**
     * Creates an invoice in an entrypoint.
     *
     * @param {string} entry - The paypoint's entrypoint identifier. [Learn more](/api-reference/api-overview#entrypoint-vs-entry)
     * @param {Payabli.AddInvoiceRequest} request
     * @param {Invoice.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Payabli.BadRequestError}
     * @throws {@link Payabli.UnauthorizedError}
     * @throws {@link Payabli.InternalServerError}
     * @throws {@link Payabli.ServiceUnavailableError}
     *
     * @example
     *     await client.invoice.addInvoice("8cfec329267", {
     *         body: {
     *             customerData: {
     *                 firstName: "Tamara",
     *                 lastName: "Bagratoni",
     *                 customerNumber: "3"
     *             },
     *             invoiceData: {
     *                 items: [{
     *                         itemProductName: "Adventure Consult",
     *                         itemDescription: "Consultation for Georgian tours",
     *                         itemCost: 100,
     *                         itemQty: 1,
     *                         itemMode: 1
     *                     }, {
     *                         itemProductName: "Deposit ",
     *                         itemDescription: "Deposit for trip planning",
     *                         itemCost: 882.37,
     *                         itemQty: 1
     *                     }],
     *                 invoiceDate: "2025-10-19",
     *                 invoiceType: 0,
     *                 invoiceStatus: 1,
     *                 frequency: "one-time",
     *                 invoiceAmount: 982.37,
     *                 discount: 10,
     *                 invoiceNumber: "INV-3"
     *             }
     *         }
     *     })
     */
    public addInvoice(
        entry: string,
        request: Payabli.AddInvoiceRequest,
        requestOptions?: Invoice.RequestOptions,
    ): core.HttpResponsePromise<Payabli.InvoiceResponseWithoutData> {
        return core.HttpResponsePromise.fromPromise(this.__addInvoice(entry, request, requestOptions));
    }

    private async __addInvoice(
        entry: string,
        request: Payabli.AddInvoiceRequest,
        requestOptions?: Invoice.RequestOptions,
    ): Promise<core.WithRawResponse<Payabli.InvoiceResponseWithoutData>> {
        const { forceCustomerCreation, idempotencyKey, body: _body } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (forceCustomerCreation != null) {
            _queryParams["forceCustomerCreation"] = forceCustomerCreation.toString();
        }

        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PayabliEnvironment.Sandbox,
                `Invoice/${encodeURIComponent(entry)}`,
            ),
            method: "POST",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@payabli/sdk-node",
                "X-Fern-SDK-Version": "0.0.105",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                idempotencyKey: idempotencyKey != null ? idempotencyKey : undefined,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            body: _body,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Payabli.InvoiceResponseWithoutData, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Payabli.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Payabli.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Payabli.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Payabli.ServiceUnavailableError(
                        _response.error.body as Payabli.PayabliApiResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.PayabliError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PayabliError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PayabliTimeoutError("Timeout exceeded when calling POST /Invoice/{entry}.");
            case "unknown":
                throw new errors.PayabliError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Deletes an invoice that's attached to a file.
     *
     * @param {string} filename - The filename in Payabli. Filename is `zipName` in response to a request to `/api/Invoice/{idInvoice}`. Here, the filename is `0_Bill.pdf``.
     *                            "DocumentsRef": {
     *                              "zipfile": "inva_269.zip",
     *                              "filelist": [
     *                                {
     *                                  "originalName": "Bill.pdf",
     *                                  "zipName": "0_Bill.pdf",
     *                                  "descriptor": null
     *                                }
     *                              ]
     *                            }
     * @param {number} idInvoice - Invoice ID
     * @param {Invoice.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Payabli.BadRequestError}
     * @throws {@link Payabli.UnauthorizedError}
     * @throws {@link Payabli.InternalServerError}
     * @throws {@link Payabli.ServiceUnavailableError}
     *
     * @example
     *     await client.invoice.deleteAttachedFromInvoice("0_Bill.pdf", 23548884)
     */
    public deleteAttachedFromInvoice(
        filename: string,
        idInvoice: number,
        requestOptions?: Invoice.RequestOptions,
    ): core.HttpResponsePromise<Payabli.InvoiceResponseWithoutData> {
        return core.HttpResponsePromise.fromPromise(
            this.__deleteAttachedFromInvoice(filename, idInvoice, requestOptions),
        );
    }

    private async __deleteAttachedFromInvoice(
        filename: string,
        idInvoice: number,
        requestOptions?: Invoice.RequestOptions,
    ): Promise<core.WithRawResponse<Payabli.InvoiceResponseWithoutData>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PayabliEnvironment.Sandbox,
                `Invoice/attachedFileFromInvoice/${encodeURIComponent(idInvoice)}/${encodeURIComponent(filename)}`,
            ),
            method: "DELETE",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@payabli/sdk-node",
                "X-Fern-SDK-Version": "0.0.105",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Payabli.InvoiceResponseWithoutData, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Payabli.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Payabli.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Payabli.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Payabli.ServiceUnavailableError(
                        _response.error.body as Payabli.PayabliApiResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.PayabliError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PayabliError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PayabliTimeoutError(
                    "Timeout exceeded when calling DELETE /Invoice/attachedFileFromInvoice/{idInvoice}/{filename}.",
                );
            case "unknown":
                throw new errors.PayabliError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Deletes a single invoice from an entrypoint.
     *
     * @param {number} idInvoice - Invoice ID
     * @param {Invoice.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Payabli.BadRequestError}
     * @throws {@link Payabli.UnauthorizedError}
     * @throws {@link Payabli.BadRequestError}
     * @throws {@link Payabli.UnauthorizedError}
     * @throws {@link Payabli.InternalServerError}
     * @throws {@link Payabli.ServiceUnavailableError}
     *
     * @example
     *     await client.invoice.deleteInvoice(23548884)
     */
    public deleteInvoice(
        idInvoice: number,
        requestOptions?: Invoice.RequestOptions,
    ): core.HttpResponsePromise<Payabli.InvoiceResponseWithoutData> {
        return core.HttpResponsePromise.fromPromise(this.__deleteInvoice(idInvoice, requestOptions));
    }

    private async __deleteInvoice(
        idInvoice: number,
        requestOptions?: Invoice.RequestOptions,
    ): Promise<core.WithRawResponse<Payabli.InvoiceResponseWithoutData>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PayabliEnvironment.Sandbox,
                `Invoice/${encodeURIComponent(idInvoice)}`,
            ),
            method: "DELETE",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@payabli/sdk-node",
                "X-Fern-SDK-Version": "0.0.105",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Payabli.InvoiceResponseWithoutData, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Payabli.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Payabli.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 400:
                    throw new Payabli.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Payabli.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Payabli.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Payabli.ServiceUnavailableError(
                        _response.error.body as Payabli.PayabliApiResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.PayabliError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PayabliError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PayabliTimeoutError("Timeout exceeded when calling DELETE /Invoice/{idInvoice}.");
            case "unknown":
                throw new errors.PayabliError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Updates details for a single invoice in an entrypoint.
     *
     * @param {number} idInvoice - Invoice ID
     * @param {Payabli.EditInvoiceRequest} request
     * @param {Invoice.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Payabli.BadRequestError}
     * @throws {@link Payabli.UnauthorizedError}
     * @throws {@link Payabli.InternalServerError}
     * @throws {@link Payabli.ServiceUnavailableError}
     *
     * @example
     *     await client.invoice.editInvoice(332, {
     *         body: {
     *             invoiceData: {
     *                 items: [{
     *                         itemProductName: "Deposit",
     *                         itemDescription: "Deposit for trip planning",
     *                         itemCost: 882.37,
     *                         itemQty: 1
     *                     }],
     *                 invoiceDate: "2025-10-19",
     *                 invoiceAmount: 982.37,
     *                 invoiceNumber: "INV-6"
     *             }
     *         }
     *     })
     */
    public editInvoice(
        idInvoice: number,
        request: Payabli.EditInvoiceRequest,
        requestOptions?: Invoice.RequestOptions,
    ): core.HttpResponsePromise<Payabli.InvoiceResponseWithoutData> {
        return core.HttpResponsePromise.fromPromise(this.__editInvoice(idInvoice, request, requestOptions));
    }

    private async __editInvoice(
        idInvoice: number,
        request: Payabli.EditInvoiceRequest,
        requestOptions?: Invoice.RequestOptions,
    ): Promise<core.WithRawResponse<Payabli.InvoiceResponseWithoutData>> {
        const { forceCustomerCreation, body: _body } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (forceCustomerCreation != null) {
            _queryParams["forceCustomerCreation"] = forceCustomerCreation.toString();
        }

        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PayabliEnvironment.Sandbox,
                `Invoice/${encodeURIComponent(idInvoice)}`,
            ),
            method: "PUT",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@payabli/sdk-node",
                "X-Fern-SDK-Version": "0.0.105",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            body: _body,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Payabli.InvoiceResponseWithoutData, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Payabli.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Payabli.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Payabli.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Payabli.ServiceUnavailableError(
                        _response.error.body as Payabli.PayabliApiResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.PayabliError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PayabliError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PayabliTimeoutError("Timeout exceeded when calling PUT /Invoice/{idInvoice}.");
            case "unknown":
                throw new errors.PayabliError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Retrieves a file attached to an invoice.
     *
     * @param {string} filename - The filename in Payabli. Filename is `zipName` in the response to a request to `/api/Invoice/{idInvoice}`. Here, the filename is `0_Bill.pdf``.
     *                            ```
     *                              "DocumentsRef": {
     *                                "zipfile": "inva_269.zip",
     *                                "filelist": [
     *                                  {
     *                                    "originalName": "Bill.pdf",
     *                                    "zipName": "0_Bill.pdf",
     *                                    "descriptor": null
     *                                  }
     *                                ]
     *                              }
     *                              ```
     * @param {number} idInvoice - Invoice ID
     * @param {Payabli.GetAttachedFileFromInvoiceRequest} request
     * @param {Invoice.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Payabli.BadRequestError}
     * @throws {@link Payabli.UnauthorizedError}
     * @throws {@link Payabli.InternalServerError}
     * @throws {@link Payabli.ServiceUnavailableError}
     *
     * @example
     *     await client.invoice.getAttachedFileFromInvoice("filename", 1)
     */
    public getAttachedFileFromInvoice(
        filename: string,
        idInvoice: number,
        request: Payabli.GetAttachedFileFromInvoiceRequest = {},
        requestOptions?: Invoice.RequestOptions,
    ): core.HttpResponsePromise<Payabli.FileContent> {
        return core.HttpResponsePromise.fromPromise(
            this.__getAttachedFileFromInvoice(filename, idInvoice, request, requestOptions),
        );
    }

    private async __getAttachedFileFromInvoice(
        filename: string,
        idInvoice: number,
        request: Payabli.GetAttachedFileFromInvoiceRequest = {},
        requestOptions?: Invoice.RequestOptions,
    ): Promise<core.WithRawResponse<Payabli.FileContent>> {
        const { returnObject } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (returnObject != null) {
            _queryParams["returnObject"] = returnObject.toString();
        }

        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PayabliEnvironment.Sandbox,
                `Invoice/attachedFileFromInvoice/${encodeURIComponent(idInvoice)}/${encodeURIComponent(filename)}`,
            ),
            method: "GET",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@payabli/sdk-node",
                "X-Fern-SDK-Version": "0.0.105",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Payabli.FileContent, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Payabli.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Payabli.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Payabli.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Payabli.ServiceUnavailableError(
                        _response.error.body as Payabli.PayabliApiResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.PayabliError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PayabliError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PayabliTimeoutError(
                    "Timeout exceeded when calling GET /Invoice/attachedFileFromInvoice/{idInvoice}/{filename}.",
                );
            case "unknown":
                throw new errors.PayabliError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Retrieves a single invoice by ID.
     *
     * @param {number} idInvoice - Invoice ID
     * @param {Invoice.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Payabli.BadRequestError}
     * @throws {@link Payabli.UnauthorizedError}
     * @throws {@link Payabli.InternalServerError}
     * @throws {@link Payabli.ServiceUnavailableError}
     *
     * @example
     *     await client.invoice.getInvoice(23548884)
     */
    public getInvoice(
        idInvoice: number,
        requestOptions?: Invoice.RequestOptions,
    ): core.HttpResponsePromise<Payabli.GetInvoiceRecord> {
        return core.HttpResponsePromise.fromPromise(this.__getInvoice(idInvoice, requestOptions));
    }

    private async __getInvoice(
        idInvoice: number,
        requestOptions?: Invoice.RequestOptions,
    ): Promise<core.WithRawResponse<Payabli.GetInvoiceRecord>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PayabliEnvironment.Sandbox,
                `Invoice/${encodeURIComponent(idInvoice)}`,
            ),
            method: "GET",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@payabli/sdk-node",
                "X-Fern-SDK-Version": "0.0.105",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Payabli.GetInvoiceRecord, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Payabli.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Payabli.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Payabli.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Payabli.ServiceUnavailableError(
                        _response.error.body as Payabli.PayabliApiResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.PayabliError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PayabliError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PayabliTimeoutError("Timeout exceeded when calling GET /Invoice/{idInvoice}.");
            case "unknown":
                throw new errors.PayabliError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Retrieves the next available invoice number for a paypoint.
     *
     * @param {string} entry - The paypoint's entrypoint identifier. [Learn more](/api-reference/api-overview#entrypoint-vs-entry)
     * @param {Invoice.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Payabli.BadRequestError}
     * @throws {@link Payabli.UnauthorizedError}
     * @throws {@link Payabli.InternalServerError}
     * @throws {@link Payabli.ServiceUnavailableError}
     *
     * @example
     *     await client.invoice.getInvoiceNumber("8cfec329267")
     */
    public getInvoiceNumber(
        entry: string,
        requestOptions?: Invoice.RequestOptions,
    ): core.HttpResponsePromise<Payabli.InvoiceNumberResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getInvoiceNumber(entry, requestOptions));
    }

    private async __getInvoiceNumber(
        entry: string,
        requestOptions?: Invoice.RequestOptions,
    ): Promise<core.WithRawResponse<Payabli.InvoiceNumberResponse>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PayabliEnvironment.Sandbox,
                `Invoice/getNumber/${encodeURIComponent(entry)}`,
            ),
            method: "GET",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@payabli/sdk-node",
                "X-Fern-SDK-Version": "0.0.105",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Payabli.InvoiceNumberResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Payabli.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Payabli.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Payabli.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Payabli.ServiceUnavailableError(
                        _response.error.body as Payabli.PayabliApiResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.PayabliError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PayabliError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PayabliTimeoutError("Timeout exceeded when calling GET /Invoice/getNumber/{entry}.");
            case "unknown":
                throw new errors.PayabliError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Returns a list of invoices for an entrypoint. Use filters to limit results.
     *
     * @param {string} entry - The paypoint's entrypoint identifier. [Learn more](/api-reference/api-overview#entrypoint-vs-entry)
     * @param {Payabli.ListInvoicesRequest} request
     * @param {Invoice.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Payabli.BadRequestError}
     * @throws {@link Payabli.UnauthorizedError}
     * @throws {@link Payabli.InternalServerError}
     * @throws {@link Payabli.ServiceUnavailableError}
     *
     * @example
     *     await client.invoice.listInvoices("8cfec329267", {
     *         fromRecord: 251,
     *         limitRecord: 0,
     *         sortBy: "desc(field_name)"
     *     })
     */
    public listInvoices(
        entry: string,
        request: Payabli.ListInvoicesRequest = {},
        requestOptions?: Invoice.RequestOptions,
    ): core.HttpResponsePromise<Payabli.QueryInvoiceResponse> {
        return core.HttpResponsePromise.fromPromise(this.__listInvoices(entry, request, requestOptions));
    }

    private async __listInvoices(
        entry: string,
        request: Payabli.ListInvoicesRequest = {},
        requestOptions?: Invoice.RequestOptions,
    ): Promise<core.WithRawResponse<Payabli.QueryInvoiceResponse>> {
        const { fromRecord, limitRecord, parameters, sortBy } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (fromRecord != null) {
            _queryParams["fromRecord"] = fromRecord.toString();
        }

        if (limitRecord != null) {
            _queryParams["limitRecord"] = limitRecord.toString();
        }

        if (parameters != null) {
            _queryParams["parameters"] = toJson(parameters);
        }

        if (sortBy != null) {
            _queryParams["sortBy"] = sortBy;
        }

        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PayabliEnvironment.Sandbox,
                `Query/invoices/${encodeURIComponent(entry)}`,
            ),
            method: "GET",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@payabli/sdk-node",
                "X-Fern-SDK-Version": "0.0.105",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Payabli.QueryInvoiceResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Payabli.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Payabli.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Payabli.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Payabli.ServiceUnavailableError(
                        _response.error.body as Payabli.PayabliApiResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.PayabliError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PayabliError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PayabliTimeoutError("Timeout exceeded when calling GET /Query/invoices/{entry}.");
            case "unknown":
                throw new errors.PayabliError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Returns a list of invoices for an org. Use filters to limit results.
     *
     * @param {number} orgId - The numeric identifier for organization, assigned by Payabli.
     * @param {Payabli.ListInvoicesOrgRequest} request
     * @param {Invoice.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Payabli.BadRequestError}
     * @throws {@link Payabli.UnauthorizedError}
     * @throws {@link Payabli.InternalServerError}
     * @throws {@link Payabli.ServiceUnavailableError}
     *
     * @example
     *     await client.invoice.listInvoicesOrg(123, {
     *         fromRecord: 251,
     *         limitRecord: 0,
     *         sortBy: "desc(field_name)"
     *     })
     */
    public listInvoicesOrg(
        orgId: number,
        request: Payabli.ListInvoicesOrgRequest = {},
        requestOptions?: Invoice.RequestOptions,
    ): core.HttpResponsePromise<Payabli.QueryInvoiceResponse> {
        return core.HttpResponsePromise.fromPromise(this.__listInvoicesOrg(orgId, request, requestOptions));
    }

    private async __listInvoicesOrg(
        orgId: number,
        request: Payabli.ListInvoicesOrgRequest = {},
        requestOptions?: Invoice.RequestOptions,
    ): Promise<core.WithRawResponse<Payabli.QueryInvoiceResponse>> {
        const { fromRecord, limitRecord, parameters, sortBy } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (fromRecord != null) {
            _queryParams["fromRecord"] = fromRecord.toString();
        }

        if (limitRecord != null) {
            _queryParams["limitRecord"] = limitRecord.toString();
        }

        if (parameters != null) {
            _queryParams["parameters"] = toJson(parameters);
        }

        if (sortBy != null) {
            _queryParams["sortBy"] = sortBy;
        }

        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PayabliEnvironment.Sandbox,
                `Query/invoices/org/${encodeURIComponent(orgId)}`,
            ),
            method: "GET",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@payabli/sdk-node",
                "X-Fern-SDK-Version": "0.0.105",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Payabli.QueryInvoiceResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Payabli.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Payabli.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Payabli.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Payabli.ServiceUnavailableError(
                        _response.error.body as Payabli.PayabliApiResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.PayabliError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PayabliError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PayabliTimeoutError("Timeout exceeded when calling GET /Query/invoices/org/{orgId}.");
            case "unknown":
                throw new errors.PayabliError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Sends an invoice from an entrypoint via email.
     *
     * @param {number} idInvoice - Invoice ID
     * @param {Payabli.SendInvoiceRequest} request
     * @param {Invoice.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Payabli.BadRequestError}
     * @throws {@link Payabli.UnauthorizedError}
     * @throws {@link Payabli.InternalServerError}
     * @throws {@link Payabli.ServiceUnavailableError}
     *
     * @example
     *     await client.invoice.sendInvoice(23548884, {
     *         attachfile: true,
     *         mail2: "tamara@example.com"
     *     })
     */
    public sendInvoice(
        idInvoice: number,
        request: Payabli.SendInvoiceRequest = {},
        requestOptions?: Invoice.RequestOptions,
    ): core.HttpResponsePromise<Payabli.SendInvoiceResponse> {
        return core.HttpResponsePromise.fromPromise(this.__sendInvoice(idInvoice, request, requestOptions));
    }

    private async __sendInvoice(
        idInvoice: number,
        request: Payabli.SendInvoiceRequest = {},
        requestOptions?: Invoice.RequestOptions,
    ): Promise<core.WithRawResponse<Payabli.SendInvoiceResponse>> {
        const { attachfile, mail2 } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (attachfile != null) {
            _queryParams["attachfile"] = attachfile.toString();
        }

        if (mail2 != null) {
            _queryParams["mail2"] = mail2;
        }

        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PayabliEnvironment.Sandbox,
                `Invoice/send/${encodeURIComponent(idInvoice)}`,
            ),
            method: "GET",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@payabli/sdk-node",
                "X-Fern-SDK-Version": "0.0.105",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Payabli.SendInvoiceResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Payabli.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Payabli.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Payabli.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Payabli.ServiceUnavailableError(
                        _response.error.body as Payabli.PayabliApiResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.PayabliError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PayabliError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PayabliTimeoutError("Timeout exceeded when calling GET /Invoice/send/{idInvoice}.");
            case "unknown":
                throw new errors.PayabliError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getCustomAuthorizationHeaders() {
        const apiKeyValue = await core.Supplier.get(this._options.apiKey);
        return { requestToken: apiKeyValue };
    }
}
