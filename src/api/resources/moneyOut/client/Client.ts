/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as Payabli from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";

export declare namespace MoneyOut {
    export interface Options {
        environment?: core.Supplier<environments.PayabliEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey?: core.Supplier<string | undefined>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class MoneyOut {
    protected readonly _options: MoneyOut.Options;

    constructor(_options: MoneyOut.Options = {}) {
        this._options = _options;
    }

    /**
     * Authorizes transaction for payout. Authorized transactions aren't flagged for settlement until captured. Use `referenceId` returned in the response to capture the transaction.
     *
     * @param {Payabli.MoneyOutTypesRequestOutAuthorize} request
     * @param {MoneyOut.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Payabli.BadRequestError}
     * @throws {@link Payabli.UnauthorizedError}
     * @throws {@link Payabli.InternalServerError}
     * @throws {@link Payabli.ServiceUnavailableError}
     *
     * @example
     *     await client.moneyOut.authorizeOut({
     *         body: {
     *             entryPoint: "48acde49",
     *             invoiceData: [{
     *                     billId: 54323
     *                 }],
     *             orderDescription: "Window Painting",
     *             paymentDetails: {
     *                 totalAmount: 47
     *             },
     *             paymentMethod: {
     *                 method: "managed"
     *             },
     *             vendorData: {
     *                 vendorNumber: "7895433"
     *             }
     *         }
     *     })
     *
     * @example
     *     await client.moneyOut.authorizeOut({
     *         body: {
     *             entryPoint: "48acde49",
     *             invoiceData: [{
     *                     billId: 123,
     *                     attachments: [{
     *                             filename: "bill.pdf",
     *                             ftype: "pdf",
     *                             furl: "https://example.com/bill.pdf"
     *                         }]
     *                 }],
     *             orderDescription: "Window Painting",
     *             paymentDetails: {
     *                 totalAmount: 47
     *             },
     *             paymentMethod: {
     *                 method: "managed"
     *             },
     *             vendorData: {
     *                 vendorNumber: "7895433"
     *             }
     *         }
     *     })
     *
     * @example
     *     await client.moneyOut.authorizeOut({
     *         body: {
     *             entryPoint: "48acde49",
     *             source: "api",
     *             invoiceData: [{
     *                     billId: 54323
     *                 }],
     *             orderDescription: "Window Painting",
     *             paymentMethod: {
     *                 method: "ach",
     *                 storedMethodId: "4c6a4b78-72de-4bdd-9455-b9d30f991001-XXXX"
     *             },
     *             paymentDetails: {
     *                 totalAmount: 47
     *             },
     *             vendorData: {
     *                 vendorNumber: "7895433"
     *             }
     *         }
     *     })
     *
     * @example
     *     await client.moneyOut.authorizeOut({
     *         body: {
     *             entryPoint: "47ced57b",
     *             paymentMethod: {
     *                 method: "ach"
     *             },
     *             paymentDetails: {
     *                 totalAmount: 978.32
     *             },
     *             vendorData: {
     *                 vendorNumber: "Vendor3800638299609471",
     *                 name1: "Heritage Pro Company",
     *                 name2: "",
     *                 ein: "473771889",
     *                 phone: "7868342364",
     *                 email: "contact570@heritagepro.com",
     *                 address1: "478 Mittie Roads",
     *                 city: "Jakubowskifield",
     *                 state: "WI",
     *                 zip: "45993",
     *                 country: "US",
     *                 mcc: "0763",
     *                 locationCode: "tpa",
     *                 contacts: [{
     *                         contactName: "Dax",
     *                         contactEmail: "Mandy65@heritagepro.com",
     *                         contactPhone: "996-325-5420 x31028"
     *                     }],
     *                 billingData: {
     *                     bankName: "Chase",
     *                     routingAccount: "011401533",
     *                     accountNumber: "1237658922",
     *                     typeAccount: "Savings",
     *                     bankAccountHolderName: "Payabli"
     *                 },
     *                 vendorStatus: 1,
     *                 remitAddress1: "727 Terrell Streets",
     *                 remitAddress2: "Apt. 773",
     *                 remitCity: "South Nicholeside",
     *                 remitState: "ID",
     *                 remitZip: "72951-9790",
     *                 remitCountry: "US"
     *             },
     *             invoiceData: [{
     *                     invoiceNumber: "VI3BvwTG",
     *                     netAmount: "1",
     *                     invoiceDate: "2026-09-03",
     *                     dueDate: "2026-11-04",
     *                     comments: "Building Repairs - Community event setup (System updates)"
     *                 }]
     *         }
     *     })
     */
    public authorizeOut(
        request: Payabli.MoneyOutTypesRequestOutAuthorize,
        requestOptions?: MoneyOut.RequestOptions,
    ): core.HttpResponsePromise<Payabli.AuthCapturePayoutResponse> {
        return core.HttpResponsePromise.fromPromise(this.__authorizeOut(request, requestOptions));
    }

    private async __authorizeOut(
        request: Payabli.MoneyOutTypesRequestOutAuthorize,
        requestOptions?: MoneyOut.RequestOptions,
    ): Promise<core.WithRawResponse<Payabli.AuthCapturePayoutResponse>> {
        const { allowDuplicatedBills, doNotCreateBills, forceVendorCreation, idempotencyKey, body: _body } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (allowDuplicatedBills != null) {
            _queryParams["allowDuplicatedBills"] = allowDuplicatedBills.toString();
        }

        if (doNotCreateBills != null) {
            _queryParams["doNotCreateBills"] = doNotCreateBills.toString();
        }

        if (forceVendorCreation != null) {
            _queryParams["forceVendorCreation"] = forceVendorCreation.toString();
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                idempotencyKey: idempotencyKey != null ? idempotencyKey : undefined,
                ...(await this._getCustomAuthorizationHeaders()),
            }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PayabliEnvironment.Sandbox,
                "MoneyOut/authorize",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            requestType: "json",
            body: _body,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Payabli.AuthCapturePayoutResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Payabli.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Payabli.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Payabli.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Payabli.ServiceUnavailableError(
                        _response.error.body as Payabli.PayabliApiResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.PayabliError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PayabliError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PayabliTimeoutError("Timeout exceeded when calling POST /MoneyOut/authorize.");
            case "unknown":
                throw new errors.PayabliError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Cancels an array of payout transactions.
     *
     * @param {string[]} request
     * @param {MoneyOut.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Payabli.BadRequestError}
     * @throws {@link Payabli.UnauthorizedError}
     * @throws {@link Payabli.InternalServerError}
     * @throws {@link Payabli.ServiceUnavailableError}
     *
     * @example
     *     await client.moneyOut.cancelAllOut(["2-29", "2-28", "2-27"])
     */
    public cancelAllOut(
        request: string[],
        requestOptions?: MoneyOut.RequestOptions,
    ): core.HttpResponsePromise<Payabli.CaptureAllOutResponse> {
        return core.HttpResponsePromise.fromPromise(this.__cancelAllOut(request, requestOptions));
    }

    private async __cancelAllOut(
        request: string[],
        requestOptions?: MoneyOut.RequestOptions,
    ): Promise<core.WithRawResponse<Payabli.CaptureAllOutResponse>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PayabliEnvironment.Sandbox,
                "MoneyOut/cancelAll",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Payabli.CaptureAllOutResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Payabli.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Payabli.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Payabli.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Payabli.ServiceUnavailableError(
                        _response.error.body as Payabli.PayabliApiResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.PayabliError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PayabliError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PayabliTimeoutError("Timeout exceeded when calling POST /MoneyOut/cancelAll.");
            case "unknown":
                throw new errors.PayabliError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Cancel a payout transaction by ID.
     *
     * @param {string} referenceId - The ID for the payout transaction.
     * @param {MoneyOut.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Payabli.BadRequestError}
     * @throws {@link Payabli.UnauthorizedError}
     * @throws {@link Payabli.InternalServerError}
     * @throws {@link Payabli.ServiceUnavailableError}
     *
     * @example
     *     await client.moneyOut.cancelOut("129-219")
     */
    public cancelOut(
        referenceId: string,
        requestOptions?: MoneyOut.RequestOptions,
    ): core.HttpResponsePromise<Payabli.PayabliApiResponse0000> {
        return core.HttpResponsePromise.fromPromise(this.__cancelOut(referenceId, requestOptions));
    }

    private async __cancelOut(
        referenceId: string,
        requestOptions?: MoneyOut.RequestOptions,
    ): Promise<core.WithRawResponse<Payabli.PayabliApiResponse0000>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PayabliEnvironment.Sandbox,
                `MoneyOut/cancel/${encodeURIComponent(referenceId)}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Payabli.PayabliApiResponse0000, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Payabli.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Payabli.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Payabli.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Payabli.ServiceUnavailableError(
                        _response.error.body as Payabli.PayabliApiResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.PayabliError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PayabliError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PayabliTimeoutError(
                    "Timeout exceeded when calling GET /MoneyOut/cancel/{referenceId}.",
                );
            case "unknown":
                throw new errors.PayabliError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Captures an array of authorized payout transactions for settlement.
     *
     * @param {Payabli.CaptureAllOutRequest} request
     * @param {MoneyOut.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Payabli.BadRequestError}
     * @throws {@link Payabli.UnauthorizedError}
     * @throws {@link Payabli.InternalServerError}
     * @throws {@link Payabli.ServiceUnavailableError}
     *
     * @example
     *     await client.moneyOut.captureAllOut({
     *         body: ["2-29", "2-28", "2-27"]
     *     })
     */
    public captureAllOut(
        request: Payabli.CaptureAllOutRequest,
        requestOptions?: MoneyOut.RequestOptions,
    ): core.HttpResponsePromise<Payabli.CaptureAllOutResponse> {
        return core.HttpResponsePromise.fromPromise(this.__captureAllOut(request, requestOptions));
    }

    private async __captureAllOut(
        request: Payabli.CaptureAllOutRequest,
        requestOptions?: MoneyOut.RequestOptions,
    ): Promise<core.WithRawResponse<Payabli.CaptureAllOutResponse>> {
        const { idempotencyKey, body: _body } = request;
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                idempotencyKey: idempotencyKey != null ? idempotencyKey : undefined,
                ...(await this._getCustomAuthorizationHeaders()),
            }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PayabliEnvironment.Sandbox,
                "MoneyOut/captureAll",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: _body,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Payabli.CaptureAllOutResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Payabli.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Payabli.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Payabli.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Payabli.ServiceUnavailableError(
                        _response.error.body as Payabli.PayabliApiResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.PayabliError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PayabliError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PayabliTimeoutError("Timeout exceeded when calling POST /MoneyOut/captureAll.");
            case "unknown":
                throw new errors.PayabliError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Captures a single authorized payout transaction by ID.
     *
     * @param {string} referenceId - The ID for the payout transaction.
     * @param {Payabli.CaptureOutRequest} request
     * @param {MoneyOut.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Payabli.BadRequestError}
     * @throws {@link Payabli.UnauthorizedError}
     * @throws {@link Payabli.InternalServerError}
     * @throws {@link Payabli.ServiceUnavailableError}
     *
     * @example
     *     await client.moneyOut.captureOut("129-219")
     */
    public captureOut(
        referenceId: string,
        request: Payabli.CaptureOutRequest = {},
        requestOptions?: MoneyOut.RequestOptions,
    ): core.HttpResponsePromise<Payabli.AuthCapturePayoutResponse> {
        return core.HttpResponsePromise.fromPromise(this.__captureOut(referenceId, request, requestOptions));
    }

    private async __captureOut(
        referenceId: string,
        request: Payabli.CaptureOutRequest = {},
        requestOptions?: MoneyOut.RequestOptions,
    ): Promise<core.WithRawResponse<Payabli.AuthCapturePayoutResponse>> {
        const { idempotencyKey } = request;
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                idempotencyKey: idempotencyKey != null ? idempotencyKey : undefined,
                ...(await this._getCustomAuthorizationHeaders()),
            }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PayabliEnvironment.Sandbox,
                `MoneyOut/capture/${encodeURIComponent(referenceId)}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Payabli.AuthCapturePayoutResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Payabli.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Payabli.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Payabli.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Payabli.ServiceUnavailableError(
                        _response.error.body as Payabli.PayabliApiResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.PayabliError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PayabliError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PayabliTimeoutError(
                    "Timeout exceeded when calling GET /MoneyOut/capture/{referenceId}.",
                );
            case "unknown":
                throw new errors.PayabliError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Returns details for a processed money out transaction.
     *
     * @param {string} transId - ReferenceId for the transaction (PaymentId).
     * @param {MoneyOut.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Payabli.BadRequestError}
     * @throws {@link Payabli.UnauthorizedError}
     * @throws {@link Payabli.InternalServerError}
     * @throws {@link Payabli.ServiceUnavailableError}
     *
     * @example
     *     await client.moneyOut.payoutDetails("45-as456777hhhhhhhhhh77777777-324")
     */
    public payoutDetails(
        transId: string,
        requestOptions?: MoneyOut.RequestOptions,
    ): core.HttpResponsePromise<Payabli.BillDetailResponse> {
        return core.HttpResponsePromise.fromPromise(this.__payoutDetails(transId, requestOptions));
    }

    private async __payoutDetails(
        transId: string,
        requestOptions?: MoneyOut.RequestOptions,
    ): Promise<core.WithRawResponse<Payabli.BillDetailResponse>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PayabliEnvironment.Sandbox,
                `MoneyOut/details/${encodeURIComponent(transId)}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Payabli.BillDetailResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Payabli.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Payabli.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Payabli.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Payabli.ServiceUnavailableError(
                        _response.error.body as Payabli.PayabliApiResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.PayabliError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PayabliError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PayabliTimeoutError("Timeout exceeded when calling GET /MoneyOut/details/{transId}.");
            case "unknown":
                throw new errors.PayabliError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Retrieves vCard details for a single card in an entrypoint.
     *
     * @param {string} cardToken - ID for a virtual card.
     * @param {MoneyOut.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Payabli.BadRequestError}
     * @throws {@link Payabli.UnauthorizedError}
     * @throws {@link Payabli.InternalServerError}
     * @throws {@link Payabli.ServiceUnavailableError}
     *
     * @example
     *     await client.moneyOut.vCardGet("20230403315245421165")
     */
    public vCardGet(
        cardToken: string,
        requestOptions?: MoneyOut.RequestOptions,
    ): core.HttpResponsePromise<Payabli.VCardGetResponse> {
        return core.HttpResponsePromise.fromPromise(this.__vCardGet(cardToken, requestOptions));
    }

    private async __vCardGet(
        cardToken: string,
        requestOptions?: MoneyOut.RequestOptions,
    ): Promise<core.WithRawResponse<Payabli.VCardGetResponse>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PayabliEnvironment.Sandbox,
                `MoneyOut/vcard/${encodeURIComponent(cardToken)}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Payabli.VCardGetResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Payabli.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Payabli.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Payabli.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Payabli.ServiceUnavailableError(
                        _response.error.body as Payabli.PayabliApiResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.PayabliError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PayabliError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PayabliTimeoutError("Timeout exceeded when calling GET /MoneyOut/vcard/{cardToken}.");
            case "unknown":
                throw new errors.PayabliError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Sends a virtual card link via email to the vendor associated with the `transId`.
     *
     * @param {Payabli.SendVCardLinkRequest} request
     * @param {MoneyOut.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Payabli.BadRequestError}
     * @throws {@link Payabli.UnauthorizedError}
     * @throws {@link Payabli.InternalServerError}
     * @throws {@link Payabli.ServiceUnavailableError}
     *
     * @example
     *     await client.moneyOut.sendVCardLink({
     *         transId: "01K33Z6YQZ6GD5QVKZ856MJBSC"
     *     })
     */
    public sendVCardLink(
        request: Payabli.SendVCardLinkRequest,
        requestOptions?: MoneyOut.RequestOptions,
    ): core.HttpResponsePromise<Payabli.OperationResult> {
        return core.HttpResponsePromise.fromPromise(this.__sendVCardLink(request, requestOptions));
    }

    private async __sendVCardLink(
        request: Payabli.SendVCardLinkRequest,
        requestOptions?: MoneyOut.RequestOptions,
    ): Promise<core.WithRawResponse<Payabli.OperationResult>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PayabliEnvironment.Sandbox,
                "vcard/send-card-link",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Payabli.OperationResult, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Payabli.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Payabli.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Payabli.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Payabli.ServiceUnavailableError(
                        _response.error.body as Payabli.PayabliApiResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.PayabliError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PayabliError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PayabliTimeoutError("Timeout exceeded when calling POST /vcard/send-card-link.");
            case "unknown":
                throw new errors.PayabliError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Retrieve the image of a check associated with a processed transaction.
     * The check image is returned in the response body as a base64-encoded string.
     * The check image is only available for payouts that have been processed.
     *
     * @param {string} assetName - Name of the check asset to retrieve. This is returned as `filename` in the `CheckData` object
     *                             in the response when you make a GET request to `/MoneyOut/details/{transId}`.
     *                             ```
     *                                 "CheckData": {
     *                                   "ftype": "PDF",
     *                                   "filename": "check133832686289732320_01JKBNZ5P32JPTZY8XXXX000000.pdf",
     *                                   "furl": "",
     *                                   "fContent": ""
     *                               }
     *                             ```
     * @param {MoneyOut.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Payabli.BadRequestError}
     * @throws {@link Payabli.UnauthorizedError}
     * @throws {@link Payabli.InternalServerError}
     * @throws {@link Payabli.ServiceUnavailableError}
     *
     * @example
     *     await client.moneyOut.getCheckImage("check133832686289732320_01JKBNZ5P32JPTZY8XXXX000000.pdf")
     */
    public getCheckImage(
        assetName: string,
        requestOptions?: MoneyOut.RequestOptions,
    ): core.HttpResponsePromise<string> {
        return core.HttpResponsePromise.fromPromise(this.__getCheckImage(assetName, requestOptions));
    }

    private async __getCheckImage(
        assetName: string,
        requestOptions?: MoneyOut.RequestOptions,
    ): Promise<core.WithRawResponse<string>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PayabliEnvironment.Sandbox,
                `MoneyOut/checkimage/${encodeURIComponent(assetName)}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as string, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Payabli.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Payabli.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Payabli.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Payabli.ServiceUnavailableError(
                        _response.error.body as Payabli.PayabliApiResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.PayabliError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PayabliError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PayabliTimeoutError(
                    "Timeout exceeded when calling GET /MoneyOut/checkimage/{assetName}.",
                );
            case "unknown":
                throw new errors.PayabliError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getCustomAuthorizationHeaders() {
        const apiKeyValue = await core.Supplier.get(this._options.apiKey);
        return { requestToken: apiKeyValue };
    }
}
