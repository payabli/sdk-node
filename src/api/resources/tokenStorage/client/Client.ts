/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as Payabli from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";

export declare namespace TokenStorage {
    export interface Options {
        environment?: core.Supplier<environments.PayabliEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey?: core.Supplier<string | undefined>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class TokenStorage {
    protected readonly _options: TokenStorage.Options;

    constructor(_options: TokenStorage.Options = {}) {
        this._options = _options;
    }

    /**
     * Saves a payment method for reuse. This call exchanges sensitive payment information for a token that can be used to process future transactions. The `ReferenceId` value in the response is the `storedMethodId` to use with transactions.
     *
     * @param {Payabli.AddMethodRequest} request
     * @param {TokenStorage.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Payabli.BadRequestError}
     * @throws {@link Payabli.UnauthorizedError}
     * @throws {@link Payabli.InternalServerError}
     * @throws {@link Payabli.ServiceUnavailableError}
     *
     * @example
     *     await client.tokenStorage.addMethod({
     *         body: {
     *             customerData: {
     *                 customerId: 4440
     *             },
     *             entryPoint: "f743aed24a",
     *             fallbackAuth: true,
     *             paymentMethod: {
     *                 cardcvv: "123",
     *                 cardexp: "02/25",
     *                 cardHolder: "John Doe",
     *                 cardnumber: "4111111111111111",
     *                 cardzip: "12345",
     *                 method: "card"
     *             }
     *         }
     *     })
     *
     * @example
     *     await client.tokenStorage.addMethod({
     *         createAnonymous: true,
     *         body: {
     *             entryPoint: "f743aed24a",
     *             fallbackAuth: true,
     *             paymentMethod: {
     *                 cardcvv: "123",
     *                 cardexp: "02/25",
     *                 cardHolder: "John Doe",
     *                 cardnumber: "4111111111111111",
     *                 cardzip: "12345",
     *                 method: "card"
     *             }
     *         }
     *     })
     *
     * @example
     *     await client.tokenStorage.addMethod({
     *         body: {
     *             customerData: {
     *                 customerId: 4440
     *             },
     *             entryPoint: "f743aed24a",
     *             fallbackAuth: true,
     *             methodDescription: "Main card",
     *             paymentMethod: {
     *                 method: "card",
     *                 tokenId: "c9700e93-b2ed-4b75-b1e4-ca4fb04fbe45-224"
     *             }
     *         }
     *     })
     *
     * @example
     *     await client.tokenStorage.addMethod({
     *         achValidation: true,
     *         body: {
     *             customerData: {
     *                 customerId: 4440
     *             },
     *             entryPoint: "f743aed24a",
     *             paymentMethod: {
     *                 achAccount: "1111111111111",
     *                 achAccountType: "Checking",
     *                 achCode: "WEB",
     *                 achHolder: "John Doe",
     *                 achHolderType: "personal",
     *                 achRouting: "123456780",
     *                 method: "ach"
     *             }
     *         }
     *     })
     */
    public addMethod(
        request: Payabli.AddMethodRequest,
        requestOptions?: TokenStorage.RequestOptions,
    ): core.HttpResponsePromise<Payabli.AddMethodResponse> {
        return core.HttpResponsePromise.fromPromise(this.__addMethod(request, requestOptions));
    }

    private async __addMethod(
        request: Payabli.AddMethodRequest,
        requestOptions?: TokenStorage.RequestOptions,
    ): Promise<core.WithRawResponse<Payabli.AddMethodResponse>> {
        const {
            achValidation,
            createAnonymous,
            forceCustomerCreation,
            temporary,
            idempotencyKey,
            body: _body,
        } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (achValidation != null) {
            _queryParams["achValidation"] = achValidation.toString();
        }

        if (createAnonymous != null) {
            _queryParams["createAnonymous"] = createAnonymous.toString();
        }

        if (forceCustomerCreation != null) {
            _queryParams["forceCustomerCreation"] = forceCustomerCreation.toString();
        }

        if (temporary != null) {
            _queryParams["temporary"] = temporary.toString();
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                idempotencyKey: idempotencyKey != null ? idempotencyKey : undefined,
                ...(await this._getCustomAuthorizationHeaders()),
            }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PayabliEnvironment.Sandbox,
                "TokenStorage/add",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            requestType: "json",
            body: _body,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Payabli.AddMethodResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Payabli.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Payabli.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Payabli.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Payabli.ServiceUnavailableError(
                        _response.error.body as Payabli.PayabliApiResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.PayabliError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PayabliError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PayabliTimeoutError("Timeout exceeded when calling POST /TokenStorage/add.");
            case "unknown":
                throw new errors.PayabliError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Retrieves details for a saved payment method.
     *
     * @param {string} methodId - The saved payment method ID.
     * @param {Payabli.GetMethodRequest} request
     * @param {TokenStorage.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Payabli.BadRequestError}
     * @throws {@link Payabli.UnauthorizedError}
     * @throws {@link Payabli.InternalServerError}
     * @throws {@link Payabli.ServiceUnavailableError}
     *
     * @example
     *     await client.tokenStorage.getMethod("32-8877drt00045632-678", {
     *         cardExpirationFormat: 1,
     *         includeTemporary: false
     *     })
     */
    public getMethod(
        methodId: string,
        request: Payabli.GetMethodRequest = {},
        requestOptions?: TokenStorage.RequestOptions,
    ): core.HttpResponsePromise<Payabli.GetMethodResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getMethod(methodId, request, requestOptions));
    }

    private async __getMethod(
        methodId: string,
        request: Payabli.GetMethodRequest = {},
        requestOptions?: TokenStorage.RequestOptions,
    ): Promise<core.WithRawResponse<Payabli.GetMethodResponse>> {
        const { cardExpirationFormat, includeTemporary } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (cardExpirationFormat != null) {
            _queryParams["cardExpirationFormat"] = cardExpirationFormat.toString();
        }

        if (includeTemporary != null) {
            _queryParams["includeTemporary"] = includeTemporary.toString();
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PayabliEnvironment.Sandbox,
                `TokenStorage/${encodeURIComponent(methodId)}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Payabli.GetMethodResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Payabli.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Payabli.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Payabli.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Payabli.ServiceUnavailableError(
                        _response.error.body as Payabli.PayabliApiResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.PayabliError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PayabliError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PayabliTimeoutError("Timeout exceeded when calling GET /TokenStorage/{methodId}.");
            case "unknown":
                throw new errors.PayabliError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Deletes a saved payment method.
     *
     * @param {string} methodId - The saved payment method ID.
     * @param {TokenStorage.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Payabli.BadRequestError}
     * @throws {@link Payabli.UnauthorizedError}
     * @throws {@link Payabli.InternalServerError}
     * @throws {@link Payabli.ServiceUnavailableError}
     *
     * @example
     *     await client.tokenStorage.removeMethod("32-8877drt00045632-678")
     */
    public removeMethod(
        methodId: string,
        requestOptions?: TokenStorage.RequestOptions,
    ): core.HttpResponsePromise<Payabli.PayabliApiResponsePaymethodDelete> {
        return core.HttpResponsePromise.fromPromise(this.__removeMethod(methodId, requestOptions));
    }

    private async __removeMethod(
        methodId: string,
        requestOptions?: TokenStorage.RequestOptions,
    ): Promise<core.WithRawResponse<Payabli.PayabliApiResponsePaymethodDelete>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PayabliEnvironment.Sandbox,
                `TokenStorage/${encodeURIComponent(methodId)}`,
            ),
            method: "DELETE",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as Payabli.PayabliApiResponsePaymethodDelete,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Payabli.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Payabli.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Payabli.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Payabli.ServiceUnavailableError(
                        _response.error.body as Payabli.PayabliApiResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.PayabliError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PayabliError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PayabliTimeoutError("Timeout exceeded when calling DELETE /TokenStorage/{methodId}.");
            case "unknown":
                throw new errors.PayabliError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Updates a saved payment method.
     *
     * @param {string} methodId - The saved payment method ID.
     * @param {Payabli.UpdateMethodRequest} request
     * @param {TokenStorage.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Payabli.BadRequestError}
     * @throws {@link Payabli.UnauthorizedError}
     * @throws {@link Payabli.InternalServerError}
     * @throws {@link Payabli.ServiceUnavailableError}
     *
     * @example
     *     await client.tokenStorage.updateMethod("32-8877drt00045632-678", {
     *         body: {
     *             customerData: {
     *                 customerId: 4440
     *             },
     *             entryPoint: "f743aed24a",
     *             fallbackAuth: true,
     *             paymentMethod: {
     *                 cardcvv: "123",
     *                 cardexp: "02/25",
     *                 cardHolder: "John Doe",
     *                 cardnumber: "4111111111111111",
     *                 cardzip: "12345",
     *                 method: "card"
     *             }
     *         }
     *     })
     *
     * @example
     *     await client.tokenStorage.updateMethod("32-8877drt00045632-678", {
     *         body: {
     *             customerData: {
     *                 customerId: 4440
     *             },
     *             entryPoint: "f743aed24a",
     *             paymentMethod: {
     *                 achAccount: "1111111111111",
     *                 achAccountType: "Checking",
     *                 achCode: "WEB",
     *                 achHolder: "John Doe",
     *                 achHolderType: "personal",
     *                 achRouting: "123456780",
     *                 method: "ach"
     *             }
     *         }
     *     })
     */
    public updateMethod(
        methodId: string,
        request: Payabli.UpdateMethodRequest,
        requestOptions?: TokenStorage.RequestOptions,
    ): core.HttpResponsePromise<Payabli.PayabliApiResponsePaymethodDelete> {
        return core.HttpResponsePromise.fromPromise(this.__updateMethod(methodId, request, requestOptions));
    }

    private async __updateMethod(
        methodId: string,
        request: Payabli.UpdateMethodRequest,
        requestOptions?: TokenStorage.RequestOptions,
    ): Promise<core.WithRawResponse<Payabli.PayabliApiResponsePaymethodDelete>> {
        const { achValidation, body: _body } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (achValidation != null) {
            _queryParams["achValidation"] = achValidation.toString();
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PayabliEnvironment.Sandbox,
                `TokenStorage/${encodeURIComponent(methodId)}`,
            ),
            method: "PUT",
            headers: _headers,
            contentType: "application/json",
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            requestType: "json",
            body: _body,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as Payabli.PayabliApiResponsePaymethodDelete,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Payabli.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Payabli.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Payabli.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Payabli.ServiceUnavailableError(
                        _response.error.body as Payabli.PayabliApiResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.PayabliError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PayabliError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PayabliTimeoutError("Timeout exceeded when calling PUT /TokenStorage/{methodId}.");
            case "unknown":
                throw new errors.PayabliError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getCustomAuthorizationHeaders() {
        const apiKeyValue = await core.Supplier.get(this._options.apiKey);
        return { requestToken: apiKeyValue };
    }
}
