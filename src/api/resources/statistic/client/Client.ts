/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Payabli from "../../../index";
import { toJson } from "../../../../core/json";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index";

export declare namespace Statistic {
    export interface Options {
        environment?: core.Supplier<environments.PayabliEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey?: core.Supplier<string | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class Statistic {
    constructor(protected readonly _options: Statistic.Options = {}) {}

    /**
     * Retrieves the basic statistics for an organization or a paypoint, for a given time period, grouped by a particular frequency.
     *
     * @param {number} entryId - Identifier in Payabli for the entity.
     * @param {string} freq - Frequency to group series. Allowed values:
     *
     *                        - `m` - monthly
     *                        - `w` - weekly
     *                        - `d` - daily
     *                        - `h` - hourly
     *
     *                        For example, `w` groups the results by week.
     * @param {number} level - The entry level for the request:
     *                           - 0 for Organization
     *                           - 2 for Paypoint
     * @param {string} mode - Mode for the request. Allowed values:
     *
     *                        - `custom` - Allows you to set a custom date range
     *                        - `ytd` - Year To Date
     *                        - `mtd` - Month To Date
     *                        - `wtd` - Week To Date
     *                        - `today` - All current day
     *                        - `m12` - Last 12 months
     *                        - `d30` - Last 30 days
     *                        - `h24` - Last 24 hours
     *                        - `lasty` - Last Year
     *                        - `lastm` - Last Month
     *                        - `lastw` - Last Week
     *                        - `yesterday` - Last Day
     *
     * @param {Payabli.BasicStatsRequest} request
     * @param {Statistic.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Payabli.BadRequestError}
     * @throws {@link Payabli.UnauthorizedError}
     * @throws {@link Payabli.InternalServerError}
     * @throws {@link Payabli.ServiceUnavailableError}
     *
     * @example
     *     await client.statistic.basicStats(1000000, "m", 1, "ytd", {
     *         endDate: "2023-05-23",
     *         startDate: "2023-03-23"
     *     })
     */
    public basicStats(
        entryId: number,
        freq: string,
        level: number,
        mode: string,
        request: Payabli.BasicStatsRequest = {},
        requestOptions?: Statistic.RequestOptions,
    ): core.HttpResponsePromise<Payabli.StatBasicQueryRecord[]> {
        return core.HttpResponsePromise.fromPromise(
            this.__basicStats(entryId, freq, level, mode, request, requestOptions),
        );
    }

    private async __basicStats(
        entryId: number,
        freq: string,
        level: number,
        mode: string,
        request: Payabli.BasicStatsRequest = {},
        requestOptions?: Statistic.RequestOptions,
    ): Promise<core.WithRawResponse<Payabli.StatBasicQueryRecord[]>> {
        const { endDate, parameters, startDate } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (endDate != null) {
            _queryParams["endDate"] = endDate;
        }

        if (parameters != null) {
            _queryParams["parameters"] = toJson(parameters);
        }

        if (startDate != null) {
            _queryParams["startDate"] = startDate;
        }

        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PayabliEnvironment.Sandbox,
                `Statistic/basic/${encodeURIComponent(mode)}/${encodeURIComponent(freq)}/${encodeURIComponent(level)}/${encodeURIComponent(entryId)}`,
            ),
            method: "GET",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "sdk-node",
                "X-Fern-SDK-Version": "0.0.58-1",
                "User-Agent": "sdk-node/0.0.58-1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Payabli.StatBasicQueryRecord[], rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Payabli.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Payabli.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Payabli.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Payabli.ServiceUnavailableError(
                        _response.error.body as Payabli.PayabliApiResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.PayabliError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PayabliError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PayabliTimeoutError(
                    "Timeout exceeded when calling GET /Statistic/basic/{mode}/{freq}/{level}/{entryId}.",
                );
            case "unknown":
                throw new errors.PayabliError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Retrieves the basic statistics for a customer for a specific time period, grouped by a selected frequency.
     *
     * @param {number} customerId - Payabli-generated customer ID. Maps to "Customer ID" column in PartnerHub.
     * @param {string} freq - Frequency to group series. Allowed values:
     *
     *                        - `m` - monthly
     *                        - `w` - weekly
     *                        - `d` - daily
     *                        - `h` - hourly
     *
     *                        For example, `w` groups the results by week.
     * @param {string} mode - Mode for request. Allowed values:
     *
     *                        - `ytd` - Year To Date
     *                        - `mtd` - Month To Date
     *                        - `wtd` - Week To Date
     *                        - `today` - All current day
     *                        - `m12` - Last 12 months
     *                        - `d30` - Last 30 days
     *                        - `h24` - Last 24 hours
     *                        - `lasty` - Last Year
     *                        - `lastm` - Last Month
     *                        - `lastw` - Last Week
     *                        - `yesterday` - Last Day
     * @param {Payabli.CustomerBasicStatsRequest} request
     * @param {Statistic.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Payabli.BadRequestError}
     * @throws {@link Payabli.UnauthorizedError}
     * @throws {@link Payabli.InternalServerError}
     * @throws {@link Payabli.ServiceUnavailableError}
     *
     * @example
     *     await client.statistic.customerBasicStats(998, "m", "ytd")
     */
    public customerBasicStats(
        customerId: number,
        freq: string,
        mode: string,
        request: Payabli.CustomerBasicStatsRequest = {},
        requestOptions?: Statistic.RequestOptions,
    ): core.HttpResponsePromise<Payabli.SubscriptionStatsQueryRecord[]> {
        return core.HttpResponsePromise.fromPromise(
            this.__customerBasicStats(customerId, freq, mode, request, requestOptions),
        );
    }

    private async __customerBasicStats(
        customerId: number,
        freq: string,
        mode: string,
        request: Payabli.CustomerBasicStatsRequest = {},
        requestOptions?: Statistic.RequestOptions,
    ): Promise<core.WithRawResponse<Payabli.SubscriptionStatsQueryRecord[]>> {
        const { parameters } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (parameters != null) {
            _queryParams["parameters"] = toJson(parameters);
        }

        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PayabliEnvironment.Sandbox,
                `Statistic/customerbasic/${encodeURIComponent(mode)}/${encodeURIComponent(freq)}/${encodeURIComponent(customerId)}`,
            ),
            method: "GET",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "sdk-node",
                "X-Fern-SDK-Version": "0.0.58-1",
                "User-Agent": "sdk-node/0.0.58-1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as Payabli.SubscriptionStatsQueryRecord[],
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Payabli.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Payabli.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Payabli.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Payabli.ServiceUnavailableError(
                        _response.error.body as Payabli.PayabliApiResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.PayabliError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PayabliError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PayabliTimeoutError(
                    "Timeout exceeded when calling GET /Statistic/customerbasic/{mode}/{freq}/{customerId}.",
                );
            case "unknown":
                throw new errors.PayabliError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Retrieves the subscription statistics for a given interval for a paypoint or organization.
     *
     * @param {number} entryId - Identifier in Payabli for the entity.
     * @param {string} interval - Interval to get the data. Allowed values:
     *
     *                            - `all` - all intervals
     *                            - `30` - 1-30 days
     *                            - `60` - 31-60 days
     *                            - `90` - 61-90 days
     *                            - `plus` - +90 days
     * @param {number} level - The entry level for the request:
     *                           - 0 for Organization
     *                           - 2 for Paypoint
     * @param {Payabli.SubStatsRequest} request
     * @param {Statistic.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Payabli.BadRequestError}
     * @throws {@link Payabli.UnauthorizedError}
     * @throws {@link Payabli.InternalServerError}
     * @throws {@link Payabli.ServiceUnavailableError}
     *
     * @example
     *     await client.statistic.subStats(1000000, "interval", 1)
     */
    public subStats(
        entryId: number,
        interval: string,
        level: number,
        request: Payabli.SubStatsRequest = {},
        requestOptions?: Statistic.RequestOptions,
    ): core.HttpResponsePromise<Payabli.StatBasicQueryRecord[]> {
        return core.HttpResponsePromise.fromPromise(this.__subStats(entryId, interval, level, request, requestOptions));
    }

    private async __subStats(
        entryId: number,
        interval: string,
        level: number,
        request: Payabli.SubStatsRequest = {},
        requestOptions?: Statistic.RequestOptions,
    ): Promise<core.WithRawResponse<Payabli.StatBasicQueryRecord[]>> {
        const { parameters } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (parameters != null) {
            _queryParams["parameters"] = toJson(parameters);
        }

        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PayabliEnvironment.Sandbox,
                `Statistic/subscriptions/${encodeURIComponent(interval)}/${encodeURIComponent(level)}/${encodeURIComponent(entryId)}`,
            ),
            method: "GET",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "sdk-node",
                "X-Fern-SDK-Version": "0.0.58-1",
                "User-Agent": "sdk-node/0.0.58-1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Payabli.StatBasicQueryRecord[], rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Payabli.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Payabli.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Payabli.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Payabli.ServiceUnavailableError(
                        _response.error.body as Payabli.PayabliApiResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.PayabliError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PayabliError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PayabliTimeoutError(
                    "Timeout exceeded when calling GET /Statistic/subscriptions/{interval}/{level}/{entryId}.",
                );
            case "unknown":
                throw new errors.PayabliError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Retrieve the basic statistics about a vendor for a given time period, grouped by frequency.
     *
     * @param {string} freq - Frequency to group series. Allowed values:
     *
     *                        - `m` - monthly
     *                        - `w` - weekly
     *                        - `d` - daily
     *                        - `h` - hourly
     *
     *                        For example, `w` groups the results by week.
     * @param {number} idVendor - Vendor ID.
     * @param {string} mode - Mode for request. Allowed values:
     *
     *                        - `ytd` - Year To Date
     *                        - `mtd` - Month To Date
     *                        - `wtd` - Week To Date
     *                        - `today` - All current day
     *                        - `m12` - Last 12 months
     *                        - `d30` - Last 30 days
     *                        - `h24` - Last 24 hours
     *                        - `lasty` - Last Year
     *                        - `lastm` - Last Month
     *                        - `lastw` - Last Week
     *                        - `yesterday` - Last Day
     * @param {Payabli.VendorBasicStatsRequest} request
     * @param {Statistic.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Payabli.BadRequestError}
     * @throws {@link Payabli.UnauthorizedError}
     * @throws {@link Payabli.InternalServerError}
     * @throws {@link Payabli.ServiceUnavailableError}
     *
     * @example
     *     await client.statistic.vendorBasicStats("m", 1, "ytd")
     */
    public vendorBasicStats(
        freq: string,
        idVendor: number,
        mode: string,
        request: Payabli.VendorBasicStatsRequest = {},
        requestOptions?: Statistic.RequestOptions,
    ): core.HttpResponsePromise<Payabli.StatisticsVendorQueryRecord[]> {
        return core.HttpResponsePromise.fromPromise(
            this.__vendorBasicStats(freq, idVendor, mode, request, requestOptions),
        );
    }

    private async __vendorBasicStats(
        freq: string,
        idVendor: number,
        mode: string,
        request: Payabli.VendorBasicStatsRequest = {},
        requestOptions?: Statistic.RequestOptions,
    ): Promise<core.WithRawResponse<Payabli.StatisticsVendorQueryRecord[]>> {
        const { parameters } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (parameters != null) {
            _queryParams["parameters"] = toJson(parameters);
        }

        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PayabliEnvironment.Sandbox,
                `Statistic/vendorbasic/${encodeURIComponent(mode)}/${encodeURIComponent(freq)}/${encodeURIComponent(idVendor)}`,
            ),
            method: "GET",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "sdk-node",
                "X-Fern-SDK-Version": "0.0.58-1",
                "User-Agent": "sdk-node/0.0.58-1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as Payabli.StatisticsVendorQueryRecord[],
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Payabli.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Payabli.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Payabli.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Payabli.ServiceUnavailableError(
                        _response.error.body as Payabli.PayabliApiResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.PayabliError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PayabliError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PayabliTimeoutError(
                    "Timeout exceeded when calling GET /Statistic/vendorbasic/{mode}/{freq}/{idVendor}.",
                );
            case "unknown":
                throw new errors.PayabliError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getCustomAuthorizationHeaders() {
        const apiKeyValue = await core.Supplier.get(this._options.apiKey);
        return { requestToken: apiKeyValue };
    }
}
